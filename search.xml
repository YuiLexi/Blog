<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高等数学常用公式</title>
      <link href="/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/13_%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html"/>
      <url>/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/13_%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-三角恒等式和不等式"><a class="header-anchor" href="#一-三角恒等式和不等式">¶</a>一、三角恒等式和不等式</h1><h2 id="1-1-三角公式"><a class="header-anchor" href="#1-1-三角公式">¶</a>1.1 三角公式</h2><h3 id="1-1-1-基本公式"><a class="header-anchor" href="#1-1-1-基本公式">¶</a>1.1.1 基本公式</h3><table><thead><tr><th style="text-align:center">序号</th><th>公式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>$\displaystyle \csc x= \frac{1}{\sin x} $</td></tr><tr><td style="text-align:center">2</td><td>$\displaystyle \sec x= \frac{1}{\cos x} $</td></tr><tr><td style="text-align:center">3</td><td>$\displaystyle \tan x=\frac{\sin x}{\cos x} $</td></tr><tr><td style="text-align:center">4</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>+</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>=</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin ^{2} x+\cos ^{2} x=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.955198em;vertical-align:-0.08333em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td style="text-align:center">5</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mo><mi>tan</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>+</mo><mn>1</mn><mo>=</mo><msup><mo><mi>sec</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \tan ^{2} x+1=\sec ^{2} x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mop"><span class="mop">tan</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">sec</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td></td></tr></tbody></table><h3 id="1-1-2-倍角公式"><a class="header-anchor" href="#1-1-2-倍角公式">¶</a>1.1.2 倍角公式</h3><h4 id="1-2-1-1-二倍角公式"><a class="header-anchor" href="#1-2-1-1-二倍角公式">¶</a>1.2.1.1 二倍角公式</h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">公式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sin</mi><mo>⁡</mo><mn>2</mn><mi>x</mi><mo>=</mo><mn>2</mn><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin 2x=2\sin x\cdot \cos x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cos</mi><mo>⁡</mo><mn>2</mn><mi>x</mi><mo>=</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>=</mo><mn>1</mn><mo>−</mo><mn>2</mn><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>=</mo><mn>2</mn><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cos 2x=\cos ^{2} x-\sin ^{2} x=1-2\sin ^{2} x=2\cos ^{2} x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.871868em;vertical-align:0em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.871868em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">$\displaystyle \tan 2x=\frac{2\tan x}{1-\tan ^{2} x} $</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">$\displaystyle \cot 2x=\frac{\cot ^{2}x-1 }{2\cot x} $</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">$\displaystyle \sec 2x=\frac{\sec ^{2}x+\csc^{2}x  }{\csc^{2}x -\sec ^{2}x} =\frac{\sec ^{2}x\cdot \csc^{2}x}{\csc^{2}x -\sec ^{2}x} $</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">$\displaystyle \csc 2x=\frac{\sec ^{2}x+\csc^{2}x  }{2\sec x\cdot \csc x} =\frac{\sec x\cdot \csc x}{2} $</td></tr><tr><td style="text-align:center"></td><td style="text-align:left"></td></tr></tbody></table><h3 id="1-1-3-积化和差"><a class="header-anchor" href="#1-1-3-积化和差">¶</a>1.1.3 积化和差</h3><table><thead><tr><th style="text-align:center">序号</th><th>公式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>$$\displaystyle \sin \alpha \cdot \cos \beta = \frac{\sin (\alpha +\beta )+\sin (\alpha -\beta )}{2}$$</td></tr><tr><td style="text-align:center">2</td><td>$$\displaystyle \cos \alpha  \cdot \sin \beta = \frac{\sin (\alpha +\beta )-\sin (\alpha -\beta )}{2}$$</td></tr><tr><td style="text-align:center">3</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cos</mi><mo>⁡</mo><mi>α</mi><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mfrac><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><mo>+</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cos \alpha  \cdot \cos \beta = \frac{\cos (\alpha +\beta )+\cos  (\alpha -\beta )}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">4</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sin</mi><mo>⁡</mo><mi>α</mi><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mo>−</mo><mfrac><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>α</mi><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><mo>−</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin \alpha  \cdot\sin \beta = -\frac{\cos (\alpha +\beta )-\cos  (\alpha -\beta )}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td></td></tr></tbody></table><ul><li>正余余正，正加正减；</li><li>余余正正，余加负余减。</li></ul><h3 id="1-1-4-和差化积"><a class="header-anchor" href="#1-1-4-和差化积">¶</a>1.1.4 和差化积</h3><table><thead><tr><th style="text-align:center">序号</th><th>公式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sin</mi><mo>⁡</mo><mi>α</mi><mo>+</mo><mi>sin</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mn>2</mn><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin \alpha + \sin \beta =2\sin \frac{\alpha +\beta }{2} \cdot \cos  \frac{\alpha -\beta }{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sin</mi><mo>⁡</mo><mi>α</mi><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mn>2</mn><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin \alpha - \sin \beta =2\cos \frac{\alpha +\beta }{2} \cdot \sin \frac{\alpha -\beta }{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cos</mi><mo>⁡</mo><mi>α</mi><mo>+</mo><mi>cos</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mn>2</mn><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cos \alpha + \cos \beta =2\cos \frac{\alpha +\beta }{2} \cdot\cos \frac{\alpha -\beta }{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">4</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cos</mi><mo>⁡</mo><mi>α</mi><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>β</mi><mo>=</mo><mo>−</mo><mn>2</mn><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow><mn>2</mn></mfrac><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo>−</mo><mi>β</mi></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cos \alpha - \cos \beta =-2\sin \frac{\alpha +\beta }{2} \cdot\sin \frac{\alpha -\beta }{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td></td></tr></tbody></table><ol><li>正加正，正在前；</li><li>正减正，余在前；</li><li>余加余，余并肩；</li><li>余减余，负正弦。</li></ol><h2 id="1-2-不等式"><a class="header-anchor" href="#1-2-不等式">¶</a>1.2 不等式</h2><table><thead><tr><th style="text-align:center">序号</th><th>不等式链（调和平均数、算数平均数、几何平均数、平方平均数）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>$\displaystyle \frac{2}{\frac{1}{a}+\frac{1}{b} } \le \sqrt{ab}\le \frac{a+b}{2}  \le \sqrt{\frac{a^{2}+b^{2}  }{2} } $</td></tr><tr><td style="text-align:center"></td><td></td></tr></tbody></table><h1 id="二-极限-导数和微分"><a class="header-anchor" href="#二-极限-导数和微分">¶</a>二、极限、导数和微分</h1><h2 id="2-1-常用等价无穷小"><a class="header-anchor" href="#2-1-常用等价无穷小">¶</a>2.1 常用等价无穷小</h2><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x\to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数一</th><th style="text-align:left">函数二</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mi>a</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle a^{x} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td><td style="text-align:left">$\displaystyle x\ln{a} $</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>a</mi></msup><mo>−</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle (1+x)^{a} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle ax (a\ne 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">$\displaystyle x -\ln{(1+x)} $</td><td style="text-align:left">$\displaystyle \frac{1}{2} x^{2} $</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">$\displaystyle \ln_{}{(x+1)} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sin x,\tan x,\arcsin x,\arctan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8623000000000001em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">$\displaystyle 1-\cos ^{2}x $</td><td style="text-align:left">$\displaystyle \frac{1}{2} x^{2} $</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn><mo>−</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mi>a</mi></msup><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle 1-\cos ^{a} x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left">$\displaystyle \frac{a}{2} x^{2} $</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mroot><mrow><mn>1</mn><mo>+</mo><mi>x</mi></mrow><mi>n</mi></mroot><mo>−</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sqrt[n]{1+x} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.12556999999999996em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6885960000000001em;"><span style="top:-2.973316em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9144300000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-2.8744300000000003em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12556999999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><mi>n</mi></mfrac><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{n} x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h2 id="2-2-导数和微分"><a class="header-anchor" href="#2-2-导数和微分">¶</a>2.2 导数和微分</h2><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数</th><th style="text-align:left">导数</th><th style="text-align:left">微分</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mtext>常数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(\text{常数} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">常数</span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td><td style="text-align:left">$\mathrm{d}©=0\mathrm{d}x  $</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mi>u</mi></msup></mrow><annotation encoding="application/x-tex">x^{u}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><msup><mi>x</mi><mrow><mi>u</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">ux^{u-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left">$\mathrm{d}(x^{u})=ux^{u-1}\mathrm{d}x  $</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">a^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mrow><mi mathvariant="normal">l</mi><mi mathvariant="normal">n</mi></mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a^{x}\mathrm{ln}a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">l</span><span class="mord mathrm">n</span></span><span class="mord mathdefault">a</span></span></span></span></td><td style="text-align:left">$\mathrm{d}(a^{x})=a^{x}\mathrm{ln}a\mathrm{d}x   $</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left">$\mathrm{d}(e^{x})=e^{x}\mathrm{d}x $</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \log_{a}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></td><td style="text-align:left">$\displaystyle \frac{1}{x\ln{a}} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>x</mi><mi>ln</mi><mo>⁡</mo><mi>a</mi></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\log_{a}{x})  = \frac{1}{x\ln{a}}\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">6</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>ln</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \ln{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>ln</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\ln{x})  = \frac{1}{x}\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">7</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\sin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\cos x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\sin x)  = \cos x\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">8</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cos</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cos x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle -\sin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\cos x)  = -\sin x\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">9</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>tan</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \tan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mo><mi>sec</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sec ^{2}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">sec</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mo><mi>sec</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\tan x)  = \sec ^{2}x\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">sec</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">10</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cot</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left">$\displaystyle -\csc ^{2}x $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msup><mo><mi>csc</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\cot x)  = -\csc ^{2}x\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">csc</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">11</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sec</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sec x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sec x\cdot \tan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\sec x)  = \sec x\cdot \tan x \mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">12</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>csc</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \csc x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>−</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle -\csc x\cdot \cot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\csc x)  = -\csc x\cdot \cot x \mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">13</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>arcsin</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \arcsin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{\sqrt{1-x^{2} } }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\arcsin x)  = \frac{1}{\sqrt{1-x^{2} } }\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">14</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>arccos</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \arccos x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">arccos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>−</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle -\frac{1}{\sqrt{1-x^{2} } }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>arccos</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\arccos x)  = -\frac{1}{\sqrt{1-x^{2} } }\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">arccos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">15</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \arctan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{1+x^{2} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\arctan x)  = \frac{1}{1+x^{2} }\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center">16</td><td style="text-align:left">$\displaystyle \operatorname{arccot} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>−</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle -\frac{1}{1+x^{2} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo><mi mathvariant="normal">arccot</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \mathrm{d}(\operatorname{arccot} x)  = -\frac{1}{1+x^{2} }\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mopen">(</span><span class="mop"><span class="mord mathrm">a</span><span class="mord mathrm">r</span><span class="mord mathrm">c</span><span class="mord mathrm">c</span><span class="mord mathrm">o</span><span class="mord mathrm">t</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h1 id="三-积分"><a class="header-anchor" href="#三-积分">¶</a>三、积分</h1><h2 id="3-1-不定积分表"><a class="header-anchor" href="#3-1-不定积分表">¶</a>3.1 不定积分表</h2><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数</th><th style="text-align:left">不定积分</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>k</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>k</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\int k\mathrm{d}x =kx+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mi>x</mi><mi>a</mi></msup></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x^{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msup><mi>x</mi><mi>a</mi></msup><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msup><mi>x</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mi>x</mi><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>a</mi><mo mathvariant="normal">≠</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int x^{a} \mathrm{d}x =\frac{1}{a+1}x^{a+1}  x+C(a\ne -1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">$\displaystyle \frac{1}{x} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><msub><mo><mi>ln</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo fence="true">⌊</mo><mi>x</mi><mo fence="true">⌋</mo></mrow><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int \frac{1}{x} \mathrm{d}x = \ln_{}{\left \lfloor x \right \rfloor } +C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">ln</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-1.85em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mi>a</mi><mi>x</mi></msup><mo stretchy="false">(</mo><mi>a</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>a</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle a^{x} (a&gt;0,a\ne 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mi>a</mi><mi>x</mi></msup><mo stretchy="false">(</mo><mi>a</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>a</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mo stretchy="false">)</mo><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msup><mi>a</mi><mi>x</mi></msup><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mfrac><msup><mi>a</mi><mi>x</mi></msup><mrow><msub><mo><mi>ln</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>a</mi></mrow></mfrac><mo>+</mo><mi>C</mi></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle a^{x} (a&gt;0,a\ne 1)\displaystyle \int  a^{x}\mathrm{d}x = \frac{a^{x} }{\ln_{}{a} } +C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177392em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">ln</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-1.85em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">$\displaystyle e^{x} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msup><mi>e</mi><mi>x</mi></msup><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int e^{x}\mathrm{d}x = e^{x} +C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">6</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mo><mi>lg</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lg_{a}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msub><mo><mi>lg</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mi>a</mi></mrow></mfrac><mo stretchy="false">(</mo><mi>x</mi><msub><mo><mi>ln</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>x</mi><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \lg_{a}{x}\mathrm{d}x = \frac{1}{\ln{a}}(x\ln_{}{x}-x )  +C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">ln</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-1.85em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">$\ln_{}{x} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msub><mo><mi>ln</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>x</mi><msub><mo><mi>ln</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>x</mi><mo>−</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \ln_{}{x} \mathrm{d}x = x\ln_{}{x}-x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">ln</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-1.85em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">ln</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-1.85em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">$\displaystyle \sin x $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \sin x\mathrm{d}x =-\cos x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">9</td><td style="text-align:left">$\displaystyle \cos x $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \cos x \mathrm{d}x =\sin x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">10</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mo><mi>sec</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sec ^{2}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">sec</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msup><mo><mi>sec</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mfrac><mn>1</mn><mrow><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \sec ^{2}x \mathrm{d}x =\int \frac{1}{\cos ^{2}x } \mathrm{d}x =\tan x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">sec</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">11</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mo><mi>csc</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \csc ^{2}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mop"><span class="mop">csc</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><msup><mo><mi>csc</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mo>∫</mo><mfrac><mn>1</mn><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int  \csc ^{2}x \mathrm{d}x =\int \frac{1}{\sin ^{2}x } \mathrm{d}x =\cot x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">csc</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2381320000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.761868em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">12</td><td style="text-align:left">$\sec x\cdot \tan x $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int\sec x\cdot \tan x \mathrm{d}x =\sec x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">13</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \csc x\cdot \tan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo>⋅</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mo>−</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int\csc x\cdot \tan x\mathrm{d}x =-\csc x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">14</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{\sqrt{1-x^{2}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int\frac{1}{\sqrt{1-x^{2}}}\mathrm{d}x =\arcsin x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.29em;vertical-align:-0.93em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.196611em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">15</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{1}{1+x^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int\frac{1}{1+x^{2}}\mathrm{d}x =\arctan x+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center">16</td><td style="text-align:left">$\displaystyle \frac{1}{x^{2}+a^{2} } $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mfrac><mn>1</mn><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mfrac><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mfrac><mrow><mi>arctan</mi><mo>⁡</mo><mfrac><mi>x</mi><mi>a</mi></mfrac></mrow><mi>a</mi></mfrac><mo>+</mo><mi>C</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int\frac{1}{x^{2}+a^{2} } \mathrm{d}x =\frac{\arctan \frac{x}{a} }{a} +C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.22225em;vertical-align:-0.86225em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.116392em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4303919999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7350000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h2 id="3-2-牛顿-莱布尼茨公式"><a class="header-anchor" href="#3-2-牛顿-莱布尼茨公式">¶</a>3.2 牛顿-莱布尼茨公式</h2><table><thead><tr><th style="text-align:center">序号</th><th>公式</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \int_{a}^{b} f(x)\mathrm{d}x  = F(b)-F(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td></td></tr></tbody></table><h1 id="四-微分方程"><a class="header-anchor" href="#四-微分方程">¶</a>四、微分方程</h1><h2 id="4-1-一阶线性微分方程的解"><a class="header-anchor" href="#4-1-一阶线性微分方程的解">¶</a>4.1 一阶线性微分方程的解</h2><p>已知微分方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>y</mi><mo>=</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{y}&#x27; +P(x)y = Q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> ；</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th>通解</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">齐次</td><td>$\displaystyle y=Ce^{\displaystyle -\int P(x)\mathrm{d}x} $</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">非齐次</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><msup><mi>e</mi><mstyle scriptlevel="0" displaystyle="true"><mo>−</mo><mo>∫</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></msup><mo stretchy="false">(</mo><mo>∫</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mstyle scriptlevel="0" displaystyle="true"><mo>∫</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi></mstyle></msup><mi mathvariant="normal">d</mi><mi>x</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y=e^{\displaystyle -\int P(x)\mathrm{d}x} (\int Q(x)e^{\displaystyle \int P(x)\mathrm{d}x} \mathrm{d}x +C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.19225em;vertical-align:-0.86225em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.33em;"><span style="top:-4.33em;margin-right:0.05em;"><span class="pstrut" style="height:3.3600000000000003em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size6">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op sizing reset-size3 size6" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault sizing reset-size3 size6" style="margin-right:0.13889em;">P</span><span class="mopen sizing reset-size3 size6">(</span><span class="mord mathdefault sizing reset-size3 size6">x</span><span class="mclose sizing reset-size3 size6">)</span><span class="mord sizing reset-size3 size6"><span class="mord mathrm">d</span></span><span class="mord mathdefault sizing reset-size3 size6">x</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.33em;"><span style="top:-4.33em;margin-right:0.05em;"><span class="pstrut" style="height:3.3600000000000003em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop op-symbol large-op sizing reset-size3 size6" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault sizing reset-size3 size6" style="margin-right:0.13889em;">P</span><span class="mopen sizing reset-size3 size6">(</span><span class="mord mathdefault sizing reset-size3 size6">x</span><span class="mclose sizing reset-size3 size6">)</span><span class="mord sizing reset-size3 size6"><span class="mord mathrm">d</span></span><span class="mord mathdefault sizing reset-size3 size6">x</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table><h2 id="4-2-二阶常系数齐次线性微分方程的解"><a class="header-anchor" href="#4-2-二阶常系数齐次线性微分方程的解">¶</a>4.2 二阶常系数齐次线性微分方程的解</h2><p>已知微分方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><mi>p</mi><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>q</mi><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">{y}&#x27;&#x27; +p{y}&#x27; +qy=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，特征方程的为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><mi>p</mi><mi>r</mi><mo>+</mo><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">r^{2} +pr+q=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th>通解</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">两个实根</td><td>$\displaystyle y = C_{1}e^{r_{1} x}+C_{2}e^{r_{2} x} $</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">一个2重实根</td><td>$\displaystyle y = (C_{1}+C_{2})e^{rx} $</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">复数根</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>e</mi><mi>α</mi></msup><mo stretchy="false">(</mo><msub><mi>C</mi><mn>1</mn></msub><mi>cos</mi><mo>⁡</mo><mi>β</mi><mi>x</mi><mo>+</mo><msub><mi>C</mi><mn>2</mn></msub><mi>sin</mi><mo>⁡</mo><mi>β</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = e^{\alpha } (C_{1}\cos \beta x+C_{2}\sin \beta x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table><h1 id="五-向量与空间方程"><a class="header-anchor" href="#五-向量与空间方程">¶</a>五、向量与空间方程</h1><h2 id="5-1-向量运算"><a class="header-anchor" href="#5-1-向量运算">¶</a>5.1 向量运算</h2><h2 id="5-2-空间方程"><a class="header-anchor" href="#5-2-空间方程">¶</a>5.2 空间方程</h2><h3 id="5-2-1-空间平面"><a class="header-anchor" href="#5-2-1-空间平面">¶</a>5.2.1 空间平面</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th style="text-align:center">方程</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">点法式</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>B</mi><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>z</mi><mo>−</mo><msub><mi>z</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A(x-x_{0} )+B(y-y_{0} )+C(z-z_{0} )=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td><td>点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_{0},y_{0},z_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，过该点的法向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n=(A,B,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">一般方程</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>x</mi><mo>+</mo><mi>B</mi><mi>y</mi><mo>+</mo><mi>C</mi><mo>+</mo><mi>D</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Ax+By+C+D=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td><td>一条法向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mtext>，</mtext><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n=(A,B，C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 是平面的“相位”</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table><h3 id="5-2-2-直线方程"><a class="header-anchor" href="#5-2-2-直线方程">¶</a>5.2.2 直线方程</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th style="text-align:center">方程</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">一般方程</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>A</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>B</mi><mn>1</mn></msub><mi>y</mi><mo>+</mo><msub><mi>C</mi><mn>1</mn></msub><mo>+</mo><msub><mi>D</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>A</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>B</mi><mn>2</mn></msub><mi>y</mi><mo>+</mo><msub><mi>C</mi><mn>2</mn></msub><mo>+</mo><msub><mi>D</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix} A_{1} x+B_{1} y+C_{1} +D_{1} =0\\ A_{2} x+B_{2} y+C_{2} +D_{2} =0\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td>两平面相交</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">对称式</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><mi>m</mi></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo>−</mo><msub><mi>y</mi><mn>0</mn></msub></mrow><mi>n</mi></mfrac><mo>+</mo><mfrac><mrow><mi>z</mi><mo>−</mo><msub><mi>z</mi><mn>0</mn></msub></mrow><mi>p</mi></mfrac><mo>=</mo><mi>t</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \frac{x-x_{0} }{m} +\frac{y-y_{0} }{n} +\frac{z-z_{0} }{p}=t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.1407700000000003em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span></td><td>方向向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s=(m,n,p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span> ，直线过点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>0</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{0} (x_{0},y_{0} ,z_{0}  )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">参数方程</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mi>t</mi><mo>+</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>n</mi><mi>t</mi><mo>+</mo><msub><mi>y</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mi>p</mi><mi>t</mi><mo>+</mo><msub><mi>z</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix}x = mt+x_{0}  \\ y =nt+y_{0}\\z = pt+z_{0}\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.00501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td>由对称式可得</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table><h3 id="5-2-3-曲面方程"><a class="header-anchor" href="#5-2-3-曲面方程">¶</a>5.2.3 曲面方程</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th style="text-align:center">方程</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">球面</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>z</mi><mn>2</mn></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^{2} +y^{2} +z^{2} =R^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td><td>球心在原点，半径为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">球面</td><td style="text-align:center">$(x-x_{0} )^{2}+ (y-y_{0} )^{2} +(z-z_{0} )=R^{2} $</td><td>球心在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>0</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{0} (x_{0},y_{0} ,z_{0}  )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，半径为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">球面一般方程</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>A</mi><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mi>A</mi><msup><mi>z</mi><mn>2</mn></msup><mo>+</mo><mi>D</mi><mi>x</mi><mo>+</mo><mi>E</mi><mi>y</mi><mo>+</mo><mi>F</mi><mi>z</mi><mo>+</mo><mi>G</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Ax^{2} +Ay^{2}+Az^{2}  +Dx+Ey+Fz+G=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td><td>注意：满足条件</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"></td><td style="text-align:center"></td><td></td></tr></tbody></table><h3 id="5-2-4-曲线方程"><a class="header-anchor" href="#5-2-4-曲线方程">¶</a>5.2.4 曲线方程</h3><h2 id="5-3-向量函数的求导"><a class="header-anchor" href="#5-3-向量函数的求导">¶</a>5.3 向量函数的求导</h2><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">原函数</th><th style="text-align:left">导函数</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></td><td style="text-align:left">$\mathbf{0} $</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">$C\overrightarrow{U(t)} $</td><td style="text-align:left">$C\overrightarrow{ {U}’ (t)} $</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">$\overrightarrow{U(t)} \pm \overrightarrow{V(t)} $</td><td style="text-align:left">$\overrightarrow{ {U}’ (t)} \pm \overrightarrow{ {V}’ (t)} $</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">$\varphi (t)\overrightarrow{V(t)} $</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>φ</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mover accent="true"><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mo stretchy="true">→</mo></mover><mo>+</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mover accent="true"><mrow><msup><mi>V</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">{\varphi }&#x27; (t)\overrightarrow{V (t)} +\varphi (t)\overrightarrow{ {V}&#x27; (t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">φ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.272em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-3.75em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.272em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-3.75em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">$\overrightarrow{U(t)} \cdot \overrightarrow{V(t)} $</td><td style="text-align:left">$\overrightarrow{ {U}’ (t)} \cdot \overrightarrow{V(t)} +\overrightarrow{U(t)} \cdot \overrightarrow{ {V}’ (t)} $</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">$\overrightarrow{U(t)} \times \overrightarrow{V (t)} $</td><td style="text-align:left">$\overrightarrow{ {U}’ (t)} \times \overrightarrow{V(t)} +\overrightarrow{U (t)} \times \overrightarrow{ {V }’ (t)} $</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>U</mi><mrow><mo fence="true">[</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{U\left [ \varphi (t) \right ] }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.272em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span><span class="svg-align" style="top:-3.75em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>φ</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mover accent="true"><mrow><msup><mi>U</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mrow><mo fence="true">[</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">{\varphi }&#x27; (t)\overrightarrow{ {U}&#x27; \left [ \varphi (t) \right ] }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">φ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.272em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span><span class="svg-align" style="top:-3.75em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h1 id="六-坐标系"><a class="header-anchor" href="#六-坐标系">¶</a>六、坐标系</h1><h2 id="6-1-平面坐标系"><a class="header-anchor" href="#6-1-平面坐标系">¶</a>6.1 平面坐标系</h2><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th><th style="text-align:center">直角坐标系与极坐标的关系</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">线元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">线元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">面元</td><td style="text-align:center">$\mathrm{d}x\mathrm{d}y=\rho \mathrm{d}\rho  \mathrm{d}\theta $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学学习 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 函数与极限</title>
      <link href="/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/01_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html"/>
      <url>/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/01_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-函数与极限"><a class="header-anchor" href="#第一章-函数与极限">¶</a>第一章 函数与极限</h1><h1 id="1-1-映射与函数"><a class="header-anchor" href="#1-1-映射与函数">¶</a>1.1 映射与函数</h1><h2 id="1-1-1-映射"><a class="header-anchor" href="#1-1-1-映射">¶</a>1.1.1 映射</h2><p><strong>映射的概念</strong>：定义：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mtext>、</mtext><mi>Y</mi></mrow><annotation encoding="application/x-tex">X、Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 是两个<strong>非空集合</strong>（没说是数集），如果存在一个法则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> ，使得对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 中的每个元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，按法则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> ，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 中有<strong>唯一确定</strong>的元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 与之对应，那么称 $ f $ 为从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 的映射，记作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">f:X→Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 称为元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> （在映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 下）的<strong>像</strong>，并记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> ，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p><p>而元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 称为（在映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 下）的一个<strong>原像</strong>；集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 称为映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的定义域，记作 $D_{f} $ ，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>f</mi></msub><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">D_{f} = X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> （<code>Domain</code>）； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 中所有元素的像所组成的集合称为映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的值域，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> （<code>Range</code>），即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>∈</mo><mi>X</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">R_{f}  = f(X) = \left \{f(x)|x\in X \right \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p><p>注意：</p><ul><li>映射三要素：定义域、值域、对应法则。<ul><li>对于每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> ，元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的像 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 是唯一的；而对于每个 $y\in R_{f} $  ，元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的原像不一定是唯一的；映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的值域 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 的一个子集。</li><li><strong>满射</strong>： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 中任一元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 中某元素的像，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">R_{f}=Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 。</li><li><strong>单射</strong>：对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 中任意的两个不同的元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_{1},x_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，它们的像 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_{1})\ne f(x_{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</li><li><strong>一一映射</strong>：既是单射，又是满射的映射。</li></ul></li></ul><p><strong>逆映射</strong>：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 的单射，则由定义，对每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">y\in R_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，有唯一的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> ，适合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x) =y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 。于是，我们可以定义一个从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 的新映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> ，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>:</mo><msub><mi>R</mi><mi>f</mi></msub><mo>→</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">g :R_{f} \to X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></span></p><p>对每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">y\in R_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">g(y)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x) =y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 。这个映射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> 称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的<u>逆映射</u>，记作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">f^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 。其定义域 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="1.2em"><msub><mi>D</mi><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msub><mo>=</mo><msub><mi>R</mi><mi>f</mi></msub></mstyle></mrow><annotation encoding="application/x-tex">{\large D_{f^{-1} } =R_{f} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1772519999999997em;vertical-align:-0.3572559999999999em;"></span><span class="mord"><span class="mord sizing reset-size6 size7"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.6319133333333333em;margin-left:-0.02778em;margin-right:0.04166666666666667em;"><span class="pstrut" style="height:2.8em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7693299999999998em;"><span style="top:-2.886em;margin-right:0.0625em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size4 size2 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2977133333333333em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel sizing reset-size6 size7">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord sizing reset-size6 size7"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31296em;"><span style="top:-2.65em;margin-left:-0.00773em;margin-right:0.04166666666666667em;"><span class="pstrut" style="height:2.8em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2796266666666667em;"><span></span></span></span></span></span></span></span></span></span></span> ，值域为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mi>R</mi><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msub><mo>=</mo><mi>X</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle R_{f^{-1} } =X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.997058em;vertical-align:-0.313728em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.52238em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.313728em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 。</p><h2 id="1-1-2-函数"><a class="header-anchor" href="#1-1-2-函数">¶</a>1.1.2 函数</h2><h4 id="1-1-2-1-函数的定义"><a class="header-anchor" href="#1-1-2-1-函数的定义">¶</a>1.1.2.1 函数的定义</h4><p><strong>定义</strong>：如果对于每个数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ，变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 按照一定的法则，总有一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 与之对应，则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的函数，记作：（设<strong>数集</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>⊂</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">D\subset R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> （<code>R</code>指的是实数集），则称映射 $f:D\to R $ 定义在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 上的函数）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">y = f(x),x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 称为自变量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 称为因变量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 称为定义域，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">D_{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>f</mi></msub><mo>=</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">D_{f} = D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 。</p><blockquote><p>函数两要素：定义域和对应关系，如果定义域和对应关系相同，那么两个函数为同一个函数。函数的对应关系只能一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 对应一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> ，而一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 可以对应多个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 。</p></blockquote><p>函数的表示方法：表格法、图形法、解析式法。几种典型的函数：</p><ul><li><p>绝对值函数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mi>x</mi><mo fence="true">∣</mo></mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>x</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = \left | x \right |  =\left\{\begin{matrix}  -x,&amp; x&lt;0\\x,  &amp;x\ge 0\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>符号函数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mtext>sgn </mtext><mi>x</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = \text{sgn }  x =\left\{\begin{matrix}-1,  &amp;x&lt;0 \\0,  &amp; x=0\\1,  &amp;x&gt;0\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">sgn </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.00501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>取整函数：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 为任意实数，不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的最大整数成为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的整数部分，记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mi>x</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left [ x \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> ，则取整函数为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mrow><mo fence="true">[</mo><mi>x</mi><mo fence="true">]</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = \left [ x \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span></span></p></li><li><p>分段函数</p><p>有时一个函数需要用到几个式子表示。这种自变量的不同变化范围中，对应法则用不同的式子来表示的函数，通常称为<strong>分段函数</strong>。</p></li></ul><h4 id="1-1-2-2-函数的性质"><a class="header-anchor" href="#1-1-2-2-函数的性质">¶</a>1.1.2.2 函数的性质</h4><ol><li><p>有界性</p><p>设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的定义域为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ，数集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>⊂</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">X\subset D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 。如果存在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> ，使得</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≤</mo><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">f(x)\le K_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 都成立，那么称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 上有上界，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 称为函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 上的一个<strong>上界</strong>。同理：下界。</p><p>存在正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> ，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">∣</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">∣</mo></mrow><mo>≤</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">\left | f(x) \right | \le M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 对任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 都成立，那么称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 上<font color='red'>有界</font>，反之，则<font color='red'>无界</font>。</p><blockquote><p>如果一个函数有界，那么函数的界限不唯一。<strong>有界 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span> 有上界且又下界</strong>。</p></blockquote></li><li><p><strong>单调性</strong></p><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的定义域为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ，区间 $ I\subset D $ 。</p><ul><li>对区间任意两点 $ x_{1} $ 和 $ x_{2} $ 时，恒有 $ f(x_{1} )&lt; f(x_{2} ) $，那么称函数 $ f(x) $ 在区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 上是<strong>单调增加</strong>的。</li><li>对区间任意两点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 $ x_{2} $ 时，恒有$ f(x_{1} )&gt; f(x_{2} )$，那么称函数 $f(x) $ 在区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 上是<strong>单调减少</strong>的。</li></ul><p>单调增加和单调减少函数统称为<font color='red'>单调函数</font>。</p></li><li><p><strong>奇偶性</strong></p><p>设 $f(x) $ 的定义域 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> <u>关于原点对称</u>。</p><ul><li><p>如果对任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(-x)=f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 恒成立，那么称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为<font color='red'>偶函数</font>。（函数图形关于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 轴对称）</p></li><li><p>如果对任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(-x)=-f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 恒成立，那么称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为<font color='red'>奇函数</font>。（函数图形关于零点对称，如果在零点有定义，那么零点处的函数值一定为 “0” ）</p></li></ul></li><li><p><strong>周期性</strong></p><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的定义域 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 。如果存在一个正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> ，使得对任一 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>±</mo><mi>T</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">(x\pm T)\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x+T)=f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 恒成立那么称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为<font color='red'>周期函数</font>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 称为函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的周期（最小正周期）。</p><blockquote><p>如果一个函数是周期函数，那么周期数不唯一。<strong>但是一个周期函数不一定有最小正周期</strong>。</p><p>例：<strong>狄利克雷函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>D</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>∈</mo><mi>Q</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>∈</mo><msup><mi>Q</mi><mi>c</mi></msup></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle D(x)=\left\{\begin{matrix} 1, &amp; x\in Q\\ 0, &amp; x\in Q^{c} \end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">Q</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote></li></ol><h3 id="1-1-3-反函数和复合函数"><a class="header-anchor" href="#1-1-3-反函数和复合函数">¶</a>1.1.3 反函数和复合函数</h3><p><strong>定义</strong>：设函数： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>D</mi><mo>→</mo><mi>f</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f:D\to f(D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span> 是单射，则它存在逆映射 $f^{-1} :f(D)\to D $ ，称此映射 $f^{-1} $ 为函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的<font color='red'>反函数</font>。按此定义，对每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>f</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y\in f(D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span> ，有<strong>唯一</strong>的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">x\in D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> ，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> ，于是有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f^{-1} (y)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p><p>这就是说，反函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">f^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 对应的法则是完全由函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 的对应法则所确定的。（一一映射）</p><p><strong>复合函数</strong>是复合映射的一种特例，按照通常函数的记号，复合函数的概念可如下表述：</p><p>设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 的定义域为 $D_{f} $ ，函数 $ u = g(x) $ 的定义域为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>g</mi></msub></mrow><annotation encoding="application/x-tex">D_{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，且其值域 $R\cap D_{f} \ne \emptyset $ ，则由下式确定的函数</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>∈</mo><msub><mi>D</mi><mi>g</mi></msub></mrow><annotation encoding="application/x-tex">y = f[g(x)],\quad x\in D_{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>称为由函数 $ u = g(x)$与函数 $ y = f(u) $ 构成的<font color='red'><strong>复合函数</strong></font>，它的定义域为 $ D_{g} $ ，变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 称为中间变量。</p><h3 id="1-1-4-函数的运算"><a class="header-anchor" href="#1-1-4-函数的运算">¶</a>1.1.4 函数的运算</h3><ol><li><p>和差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo>±</mo><mi>g</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f\pm g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo stretchy="false">(</mo><mi>f</mi><mo>±</mo><mi>g</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>±</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo>⊆</mo><mi>D</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle(f\pm g)(x)=f(x)\pm g(x),x\subseteq D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p></li><li><p>积 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo>⋅</mo><mi>g</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f \cdot g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> ：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo stretchy="false">(</mo><mi>f</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>⊆</mo><mi>D</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle(f\cdot g)(x)=f(x)\cdot g(x),\quad x\subseteq D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p></li><li><p>商 $\displaystyle \frac{f}{g} $ ：（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g\ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mo stretchy="false">(</mo><mfrac><mi>f</mi><mi>g</mi></mfrac><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle (\frac{f}{g} )(x) = \frac{f(x)}{g(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ol><h3 id="1-1-5-初等函数"><a class="header-anchor" href="#1-1-5-初等函数">¶</a>1.1.5 初等函数</h3><p><font color='red'>基本初等函数</font>：</p><ul><li><p><strong>幂函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><msup><mi>x</mi><mi>u</mi></msup><mo stretchy="false">(</mo><mi>u</mi><mo>⊆</mo><mtext>R是常数</mtext><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = x^{u} (u\subseteq \text{R是常数} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">R</span><span class="mord cjk_fallback">是常数</span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p><strong>指数函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><msup><mi>a</mi><mi>x</mi></msup><mo stretchy="false">(</mo><mi>a</mi><mo>&gt;</mo><mn>0</mn><mtext>且</mtext><mi>a</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = a^{x} (a&gt;0且a\ne 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord cjk_fallback">且</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p></li><li><p><strong>对数函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>a</mi></msub><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mo>&gt;</mo><mn>0</mn><mtext>且</mtext><mi>a</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mo separator="true">,</mo><mtext>特别当</mtext><mi>a</mi><mo>=</mo><mi>e</mi><mtext>时，记为</mtext><mi>y</mi><mo>=</mo><mi>l</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle y = log_{a} x (a&gt;0\text{且} a\ne 1,\text{特别当}a=e\text{时，记为}y=lnx)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord cjk_fallback">特别当</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord text"><span class="mord cjk_fallback">时，记为</span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p></li><li><p><strong>三角函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>csc</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>cot</mi><mo>⁡</mo><mi>x</mi></mstyle></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix}\displaystyle y = \sin x,y=\cos x,y=\tan x \\\displaystyle y=\sec x,y=\csc x,y=\cot x\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">csc</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p><strong>反三角函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>arccos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle scriptlevel="0" displaystyle="true"><mi>y</mi><mo>=</mo><mi mathvariant="normal">arcsec</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi mathvariant="normal">arccos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi mathvariant="normal">arccot</mi><mo>⁡</mo><mi>s</mi><mi>x</mi></mstyle></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix}\displaystyle y = \arcsin  x,y=\arccos  x,y=\arctan  x \\\displaystyle y=\operatorname{arcsec}  x,y=\operatorname{arccos}  x,y=\operatorname{arccot} s  x\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">arccos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mord mathrm">a</span><span class="mord mathrm">r</span><span class="mord mathrm">c</span><span class="mord mathrm">s</span><span class="mord mathrm">e</span><span class="mord mathrm">c</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mord mathrm">a</span><span class="mord mathrm">r</span><span class="mord mathrm">c</span><span class="mord mathrm">c</span><span class="mord mathrm">o</span><span class="mord mathrm">s</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mord mathrm">a</span><span class="mord mathrm">r</span><span class="mord mathrm">c</span><span class="mord mathrm">c</span><span class="mord mathrm">o</span><span class="mord mathrm">t</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul><p><font color='red'>初等函数</font>：由<code>常数</code>和<code>基本初等函数</code><strong>经过有限次的四则运算和有限次的函数复合步骤</strong>并构成一个式子表示的函数。</p><p><em>扩展</em>：</p><ul><li><p>双曲正弦：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>sinh</mi><mo>⁡</mo><mi>a</mi><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \sinh a = \frac{e^{x} - e^{-x}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">sinh</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.134331em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.448331em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>双曲余弦：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>cosh</mi><mo>⁡</mo><mi>a</mi><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \cosh  a = \frac{e^{x} + e^{-x}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cosh</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.134331em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.448331em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>双曲正切：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>tanh</mi><mo>⁡</mo><mo>=</mo><mfrac><mrow><mi>sinh</mi><mo>⁡</mo><mi>x</mi></mrow><mrow><mi>cosh</mi><mo>⁡</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \tanh  = \frac{\sinh x}{\cosh x} = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tanh</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cosh</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sinh</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.217661em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.448331em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>反双曲正弦：</p></li><li><p>反双曲余弦：</p></li><li><p>反双曲正切：</p></li></ul><h1 id="1-2-数列的极限"><a class="header-anchor" href="#1-2-数列的极限">¶</a>1.2 数列的极限</h1><p>极限概念是在探求某些实际问题的精确解答过程中产生的。</p><p><strong>数列的概念</strong>：如果按照某一法则，对每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⊆</mo><msub><mi>N</mi><mo lspace="0em" rspace="0em">+</mo></msub></mrow><annotation encoding="application/x-tex">n\subseteq N_{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 对应着一个确定的实数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，这些实数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 按照下标 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 从小到大排列得到的一个序列，就叫做<strong>数列</strong>，简记为数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n}\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 。数列中每一个数叫做数列的<strong>项</strong>，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 项 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 叫做数列的<strong>一般项（或通项）</strong> 。</p><h2 id="1-2-1-数列极限的定义"><a class="header-anchor" href="#1-2-1-数列极限的定义">¶</a>1.2.1 数列极限的定义</h2><p><strong>定义</strong>：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix} x_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 为一数列，如果存在常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，对任意给定的正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span> （不论它多么小），总存在正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> ，使得当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 时，不等式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>a</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | x_{n}-a \right | &lt;\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></span></p><p>都成立，那么就称常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 是数列 $$\begin{Bmatrix}x_{n}\end{Bmatrix}$$ 的极限，或者称数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n}\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 收敛于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_n=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mi>x</mi><mi>n</mi></msub><mo>→</mo><mi>a</mi><mo stretchy="false">(</mo><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x_{n}\to a(n\to \infty )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span> 。</p><p><strong>几何意义</strong>：当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 大到一定程度，数列后面所有的项都落在邻域 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>ε</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U(a,\varepsilon )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ε</span><span class="mclose">)</span></span></span></span> 内，只有前面有限个项在邻域之外。</p><h2 id="1-2-2-收敛数列的性质"><a class="header-anchor" href="#1-2-2-收敛数列的性质">¶</a>1.2.2 收敛数列的性质</h2><p><strong>定理一</strong>（极限的<font color='red'>唯一性</font>）：如果数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n}\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 收敛，那么它的极限唯一。</p><ul><li><p>证明：（反证法）</p><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_{n} =a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>b</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_{n} =b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> ，并且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo mathvariant="normal">≠</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\ne b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> ，那么可以得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>a</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>b</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix}\left | x_{n} -a \right |  &lt;\varepsilon \\\left | x_{n} -b \right |  &lt;\varepsilon \end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">ε</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">ε</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>令 $\displaystyle \epsilon &lt;\frac{b-a}{2} $ ，上式可以得到：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>−</mo><mfrac><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><mn>2</mn></mfrac><mo>&lt;</mo><msub><mi>x</mi><mi>n</mi></msub><mo>&lt;</mo><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac><mo>&lt;</mo><msub><mi>x</mi><mi>n</mi></msub><mo>&lt;</mo><mi>b</mi><mo>+</mo><mfrac><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{matrix} a-\frac{b-a}{2} &lt;x_{n}&lt; \frac{a+b}{2}  \\\frac{a+b}{2}&lt;x_{n}&lt; b+\frac{b-a}{2} \end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4802160000000004em;vertical-align:-0.9901080000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.490108em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3698919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9901080000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>二式之间相互矛盾，因此极限唯一。</p></li></ul><p><strong>定理二</strong>（收敛数列的<font color='red'>有界性</font>）： 如果数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n}\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 收敛，那么数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n}\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 一定有界。</p><ul><li>收敛一定有界，有界不一定收敛。例如：数列 $a_{n} =(-1)^{n} $ 有界，但是不收敛。</li><li>无界一定发散，发散不一定无界。</li></ul><p><strong>定理三</strong>（收敛数列的<font color='red'>保号性</font>）：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo>=</mo><mi>a</mi><mo separator="true">,</mo><mtext>且</mtext><mi>a</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">(</mo><mtext>或</mtext><mi>a</mi><mo>&lt;</mo><mn>0</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty}  = a,\text{且} a&gt; 0(\text{或} a&lt; 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，那么存在正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> ，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 时，都有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_{n}&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 或（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_{n}&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ）。</p><ul><li><p>证明：</p><p>就 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 而言。由数列极限的定义可得，取 $\displaystyle\varepsilon =\frac{a}{2}&gt;0 $ ， 存在正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> ，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 时，有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>a</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mfrac><mi>a</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | x_{n}-a  \right | &lt; \frac{a}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>从而有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mi>x</mi><mi>n</mi></msub><mo>&gt;</mo><mi>a</mi><mo>−</mo><mfrac><mi>a</mi><mn>2</mn></mfrac><mo>=</mo><mfrac><mi>a</mi><mn>2</mn></mfrac><mo>&gt;</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x_{n} &gt; a-\frac{a}{2}  = \frac{a}{2} &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p></li><li><p><strong>推论</strong>：</p><p>如果数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><msub><mi>x</mi><mi>n</mi></msub><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{ x_{n}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span> 从某项起有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>≥</mo><mn>0</mn><mo stretchy="false">(</mo><mtext>或者</mtext><msub><mi>x</mi><mi>n</mi></msub><mo>≤</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_{n}\ge 0(\text{或者}x_{n} \le 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">或者</span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_{n} =a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">(</mo><mtext>或者</mtext><mi>a</mi><mo>≤</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a\ge 0(\text{或者}a\le 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">或者</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 。</p></li></ul><p><strong>定理四</strong>（收敛数列与其<font color='red'>子数列</font>的关系）：如果数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix}x\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 收敛于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，那么它的任一子数列也收敛，且极限也是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 。</p><h1 id="1-3-函数的极限"><a class="header-anchor" href="#1-3-函数的极限">¶</a>1.3 函数的极限</h1><h2 id="1-3-1-函数极限的定义"><a class="header-anchor" href="#1-3-1-函数极限的定义">¶</a>1.3.1 函数极限的定义</h2><p><strong>自变量趋于有限值时函数的极限</strong>：</p><p><strong>定义 1</strong>：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 $\displaystyle x_{0} $ 的某一<font color='red'>去心邻域</font>内有定义。如果存在常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> ，对任意给定的正数 $\varepsilon $ (不论它多么小)，总存在正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span> ，使得当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 满足不等式 $0&lt;\left | x-x_{0}  \right | &lt;\delta $ 时，对应的函数值  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 都满足不等式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>A</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | f(x)-A \right | &lt;\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">A</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></span></p><p>那么常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 就叫做函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x→x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时的极限，记作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mspace width="1em"/><mtext>或</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>A</mi><mo stretchy="false">(</mo><mtext>当</mtext><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to x_{0}} f(x)=A\quad \text{或} f(x)→A(\text{当} x→x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">当</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>注意：函数不一定在 $\displaystyle x_{0} $ 处有定义！！</p><p><strong>补充去心邻域</strong>：以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为中心的任何<strong>开区间</strong>称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的邻域，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ；在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 中去掉中心 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 后，称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的去心邻域，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\overset{\circ}{U}(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p></blockquote><ul><li><p>左极限：</p><p>在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x\to x_{0}}f(x)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 定义中，把 $0&lt; \left | x-x_{0}\right | &lt; \delta $ 改为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>−</mo><mi>δ</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}-\delta&lt;x&lt;x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 就叫做函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x→x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时的<font color='red'>左极限</font>，记作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">−</mo></msubsup></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mspace width="1em"/><mtext>或</mtext><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">−</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to x_{0}^{-} } f(x)=A\quad \text{或} f(x_{0}^{-})=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8087499999999999em;vertical-align:-1.0587499999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944400000000001em;"><span style="top:-2.25931em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8209857142857142em;"><span style="top:-2.188485714285714em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-2.904321428571429em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0587499999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p></li><li><p>右极限：</p><p>类似的，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x\to x_{0}}f(x)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 定义中，把 $0&lt; \left | x-x_{0}  \right | &lt; \delta $ 改为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">x_{0} &lt; x&lt; x_{0}+\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 就叫做函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x→x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时的<font color='red'>右极限</font>，记作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">+</mo></msubsup></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mspace width="1em"/><mtext>或</mtext><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">+</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to x_{0}^{+} } f(x)=A\quad \text{或} f(x_{0}^{+})=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8087499999999999em;vertical-align:-1.0587499999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944400000000001em;"><span style="top:-2.25931em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8209857142857142em;"><span style="top:-2.188485714285714em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-2.904321428571429em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0587499999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p></li></ul><p><strong>左极限与右极限统称为<font color='red'>单侧极限</font></strong>。</p><blockquote><p><strong>极限存在的充要条件是：左右极限存在且相等</strong>。</p></blockquote><p><strong>自变量趋于无穷大时函数的极限</strong>：</p><p><strong>定义 2</strong>：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 $\left | x \right | $ 大于某一正数时有定义。如果存在常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>，对于任意给定的正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span> （不论它有多么小），总存在着正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> ，使得当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 满足不等式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">∣</mo><mi>x</mi><mo fence="true">∣</mo></mrow><mo>&gt;</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">\left | x \right | &gt;X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 时，对应的函数值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 都满足不等式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>A</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ε</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | f(x)-A \right |&lt;\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">A</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></span></p><p>那么常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 就叫做函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 $x\longrightarrow \infty $ 时的极限，记作</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mtext>或</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>A</mi><mo stretchy="false">(</mo><mtext>当</mtext><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to \infty} f(x) = A或f(x)\to A(当x \to \infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord cjk_fallback">或</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord cjk_fallback">当</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span></span></p><h2 id="1-3-2-函数极限的性质"><a class="header-anchor" href="#1-3-2-函数极限的性质">¶</a>1.3.2 函数极限的性质</h2><p><strong>定理 1</strong> （函数极限的<font color='red'>唯一性</font>）：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to \infty} f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 存在，那么这个极限唯一。</p><p><strong>定理 2</strong>（函数极限的<font color='red'>局部有界性</font>）：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to \infty} f(x) = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> ，那么存在常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">M&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\delta&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，使得当 $0&lt;\left | x-x_{0} \right |&lt;\delta  $ 时，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">∣</mo></mrow><mo>≤</mo><mi>M</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | f(x) \right | \le M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 。</p><ul><li>如果函数极限存在，那么函数局部界性；</li><li>如果函数局部有界，但是函数极限不一定存在。</li></ul><p><strong>定理 3</strong>（函数极限的<font color='red'>局部保号性</font>） 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to \infty} f(x)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> ，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">(</mo><mtext>或</mtext><mi>A</mi><mo>&lt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A&gt;0(\text{或}A&lt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，那么存在常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>M</mi><mo>&gt;</mo><mn>0</mn><mtext>或</mtext><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle M&gt;0\text{或} \delta &gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，使得当 $0&lt;\left | x-x_{0} \right |&lt;\delta  $ 时，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn><mspace width="1em"/><mo stretchy="false">(</mo><mtext>或</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(X)&gt;0\quad(\text{或}f(X)&lt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">或</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 。</p><p><strong>定理 4</strong>（函数极限与数列极限的关系）：如果极限 $\displaystyle \lim_{x \to x_{0}}f(x) $ 存在， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}x_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 定义域内任一收敛于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的数列，并且满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><msub><mi>x</mi><mi>n</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>∈</mo><mi>N</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle x_{n}\ne x_{0} (n\in N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> ，那么相应的函数值数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(\begin{Bmatrix}x_{n} \end{Bmatrix})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span><span class="mclose">)</span></span></span></span> 必收敛，且 $\displaystyle {\large \lim_{n \to \infty} f(x_{n}) = \lim_{x \to x_{0}}f(x)} $ 。</p><h1 id="1-4-无穷小与无穷大"><a class="header-anchor" href="#1-4-无穷小与无穷大">¶</a>1.4 无穷小与无穷大</h1><h2 id="1-4-1-无穷小"><a class="header-anchor" href="#1-4-1-无穷小">¶</a>1.4.1 无穷小</h2><p><strong>定义 1</strong>：如果函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x\to x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或（$x\to \infty $）时极限为零，那么称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x\to x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> （或 $x\to \infty $）时的无穷小。</p><blockquote><p>特别地，以零为极限的数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix}x_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 称为 $n\to\infty $ 时的无穷小。<strong>无穷小是一个变量，不是一个数； “零” 是唯一可以作为无穷小的数</strong>。</p></blockquote><p><strong>定理 1</strong> ：在自变量的统一变化过程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x\to x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（或者 $x\to \infty $）中，函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 具有极限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 的充要条件是： $f(x) = A + \alpha (x) $ ，其中 $\alpha (x) $ 是无穷小。</p><p>极限和无穷小的关系：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>⟺</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>α</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim f(x_{0} )=A \Longleftrightarrow f(x_{0} )=A+\alpha (x_{0} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.70733em;vertical-align:-0.024em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><h2 id="1-4-2-无穷大"><a class="header-anchor" href="#1-4-2-无穷大">¶</a>1.4.2 无穷大</h2><p><strong>定义 2</strong>：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的某一去心邻域内有定义。如果对于任意给定的正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> （不论它多么大），总存在正数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span> ，只要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 适合不等式 $0&lt;\left | x-x_{0} \right | &lt;\delta $ ，对应的函数值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 总满足不等式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">∣</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">∣</mo></mrow><mo>&gt;</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">\left | f(x) \right | &gt;M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>那么称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 是当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x\to x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或（$x\to \infty $）时的无穷大。</p><blockquote><p><strong>必须要注意：无穷大是一个变量，不是一个数，不可与很大的数（如：1 千万、一亿、一亿亿等）混为一谈</strong>。</p><p>正无穷大和负无穷大是无穷大的两种情况。</p></blockquote><p><strong>无穷大的几何意义</strong>：</p><ol><li>若 $\displaystyle \lim_{x \to x_{0} } f(x)=\infty $ ，则 $x=x_{0} $ 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y =f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的<strong>垂直渐近线</strong>。</li><li>若 $\displaystyle \lim_{x \to x_{0} } f(x)=a $ ，则 $y=a $ 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y =f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的<strong>垂直渐近线</strong>。</li></ol><p><strong>定理 2</strong> ：在自变量的统一变化过程中，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为无穷大，那么 $\displaystyle\frac{1}{f(x)} $ 为无穷小；反之，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为无穷小，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x)\neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，那么 $\displaystyle\frac{1}{f(x)} $ 为无穷大。</p><h1 id="1-5-极限的运算法则"><a class="header-anchor" href="#1-5-极限的运算法则">¶</a>1.5 极限的运算法则</h1><p><strong>定理 1</strong>：两个无穷小的和是无穷小。（<strong>有限个</strong>无穷小之和也是无穷小）。</p><ul><li>例： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mfrac><mn>1</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo>+</mo><mo>⋯</mo><mo>+</mo><mfrac><mi>n</mi><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} (\frac{1}{n^{2} } +\frac{2}{n^{2} }+\frac{3}{n^{2} }+\dots +\frac{n}{n^{2} })</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.02144em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span> 极限的值为 “$\displaystyle \frac{1}{2} $” ，而不是 “0”。</li></ul><p><strong>定理 2</strong>：<strong>有界函数与无穷小的乘积是无穷小</strong>。（<strong>极其重要</strong>）</p><ul><li><p><strong>推论 1</strong>：常数与无穷小的乘积是无穷小。（常数有界）</p></li><li><p><strong>推论 2</strong>：<strong>有限个</strong>无穷小的乘积是无穷小。（无穷小有界）</p></li></ul><p><strong>定理 3</strong> 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mtext>，</mtext><mi>lim</mi><mo>⁡</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">\lim  f(x) = A，\lim  g(x) =B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ，那么</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>±</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>±</mo><mi>lim</mi><mo>⁡</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>±</mo><mi>B</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim [f(x)\pm g(x)] = \lim f(x)\pm \lim g(x) = A\pm B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ；</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>lim</mi><mo>⁡</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>⋅</mo><mi>B</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim [f(x)\cdot   g(x)] = \lim f(x)\cdot \lim g(x) = A\cdot B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>；</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">B \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时；</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>lim</mi><mo>⁡</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mi>A</mi><mi>B</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim  \frac{f(x)}{g(x)} = \frac{\lim  f(x)}{\lim g(x)} = \frac{A}{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><strong>推论 1</strong>：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lim  f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 存在，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 为常数，那么</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>c</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lim  cf(x) = c\lim f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p><ul><li><strong>推论 2</strong>：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lim  f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 存在，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 为正整数，那么</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>=</mo><mo stretchy="false">[</mo><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim  [f(x)]^{n}  = [\lim f(x)]^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><p><strong>定理 4</strong> ：设有数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">{</mo><msub><mi>x</mi><mi>n</mi></msub><mo fence="true">}</mo></mrow><mtext>和</mtext><mrow><mo fence="true">{</mo><msub><mi>y</mi><mi>n</mi></msub><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\left \{ x_{n} \right \}\text{和} \left \{ y_{n} \right \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord cjk_fallback">和</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span> 。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_{n} = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>y</mi><mi>n</mi></msub><mo>=</mo><mi>B</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} y_{n} = B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ，那么</p><ol><li>$\displaystyle {\large \lim_{n \to \infty} (x_{n}\pm y_{n}) = A\pm B} $ ；</li><li>$\displaystyle {\large \lim_{n \to \infty} (x_{n}\cdot y_{n}) = A\cdot B} $ ；</li><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>n</mi></msub><mo mathvariant="normal">≠</mo><mn>0</mn><mo stretchy="false">(</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋅</mo><mo>⋅</mo><mo>⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_{n}\neq 0(n = 1,2,\cdot \cdot \cdot )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">⋅</span><span class="mclose">)</span></span></span></span> 且 $B\neq 0 $ 时，$\displaystyle {\large \lim_{n \to \infty} \frac{x-{n}}{y_{n}} =\frac{A}{B}} $；</li></ol><p><strong>定理 5</strong>：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi (x)\ge \psi (x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> ， 而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">\lim \varphi(x)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">\lim\psi(x)=B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>≥</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A\ge B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 。</p><p><strong>定理 6</strong> （复合函数的极限运算法则）：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">y=f[g(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span> 是由函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u=g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 与函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 复合而成， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[g(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的某去心邻域内有定义，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x\to x_{0}}g(x)=u_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>u</mi><mo>→</mo><msub><mi>u</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim_{u\to u_{0}}f(u)=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> ，且存在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>δ</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\delta_{0}&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>δ</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x\in \overset{\circ }{U}  (x_{0} ,\delta _{0} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 时，有 <strong>$g(x)\ne u_{0} $</strong> ，则</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>u</mi><mo>→</mo><msub><mi>u</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to x_{0} } f[g(x)] = \lim_{u \to u_{0} } f(u) = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p><h1 id="1-6-极限存在准则-两个重要极限"><a class="header-anchor" href="#1-6-极限存在准则-两个重要极限">¶</a>1.6 极限存在准则  两个重要极限</h1><h2 id="1-6-1-极限存在准则"><a class="header-anchor" href="#1-6-1-极限存在准则">¶</a>1.6.1 极限存在准则</h2><p><strong>准则 1-1</strong>：如果数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix}x_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix}y_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 及 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix} z_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 满足下列条件：</p><ol><li><p>从某项起，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi><msub><mi>n</mi><mn>0</mn></msub><mo>∈</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\exists n_{0}\in N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord">∃</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> ，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n&gt;n_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时，有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>n</mi></msub><mo>≤</mo><msub><mi>x</mi><mi>n</mi></msub><mo>≤</mo><msub><mi>z</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">y_{n}\le x_{n}\le z_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>$\displaystyle {\large \lim_{n \to \infty}y_{n} = a, \lim_{n \to \infty} z_{n} = a} $ ；</p></li></ol><p>那么数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \begin{Bmatrix}x_{n} \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 的极限存在，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} x_{n} = a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 。</p><p><strong>准则 1-2</strong>：如果</p><ol><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi><mo>∈</mo><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle  x\in \overset{\circ}{U}(x_{0},r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mrow><mo fence="true">∣</mo><mi>x</mi><mo fence="true">∣</mo></mrow><mo>&gt;</mo><mi>M</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \left | x \right |&gt; M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 时，$\displaystyle g(x)\le f(x)\le h(x) $ ；</li><li>$\displaystyle {\large \lim_{x \to x_{0} } g(x)=A,\quad \lim_{x \to x_{0} } h(x)=A} $ ；</li></ol><p>那么：$\displaystyle {\large \lim_{x \to x_{0} } f(x)} $ 存在，且等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 。</p><p><strong>准则 1-1 和准则 1-2 称为<font color='red'>夹逼准则</font></strong>。</p><p><strong>准则 2</strong>：单调有界数列必有极限。（即单调递增（减）有上（下）界的数列必有极限）</p><h2 id="1-6-2-两个重要极限"><a class="header-anchor" href="#1-6-2-两个重要极限">¶</a>1.6.2 两个重要极限</h2><ul><li>极限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to 0} \frac{\sin x}{x} =1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0619680000000002em;vertical-align:-0.717108em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.382892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3448600000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ；</li><li>极限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></msup><mo>=</mo><mi>e</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to 0} (1+x )^{\frac{1}{x}} =e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.467108em;vertical-align:-0.717108em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.382892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2540200000000001em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0040200000000001em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span> 。（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><mi>e</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{n \to \infty} (1+\frac{1}{n} )^{n} =e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>）</li></ul><h1 id="1-7-无穷小的比较"><a class="header-anchor" href="#1-7-无穷小的比较">¶</a>1.7 无穷小的比较</h1><h3 id="1-7-1-无穷小的定义"><a class="header-anchor" href="#1-7-1-无穷小的定义">¶</a>1.7.1 无穷小的定义</h3><p><strong>定义</strong>：（无穷下的比较，实际上体现的是逼近 “0” 的速度大小的比较）</p><ul><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><mi>α</mi></mfrac><mo>=</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，那么就说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的<strong>高阶无穷小</strong>，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>=</mo><mi>o</mi><mo stretchy="false">(</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta =o(\beta )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span> 。</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><mi>α</mi></mfrac><mo>=</mo><mi mathvariant="normal">∞</mi></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha}=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> ，那么就说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的<strong>低阶无穷小</strong>。</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><mi>α</mi></mfrac><mo>=</mo><mi>c</mi><mspace width="1em"/><mo stretchy="false">(</mo><mi>c</mi><mo>∈</mo><mi>R</mi><mtext>且</mtext><mi>c</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha}=c\quad(c\in R\text{且}c\ne0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，那么就说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的<strong>同阶无穷小</strong>。</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><msup><mi>α</mi><mi>k</mi></msup></mfrac><mo>=</mo><mi>c</mi><mspace width="1em"/><mo stretchy="false">(</mo><mi>c</mi><mo>∈</mo><mi>R</mi><mtext>且</mtext><mi>c</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mtext>且</mtext><mi>k</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha^{k} }=c\quad(c\in R\text{且}c\ne0\text{且}k&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，那么就说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 阶无穷小</strong>。</li><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><mi>α</mi></mfrac><mo>=</mo><mn>1</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，那么就说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的<strong>等价无穷小</strong>，记作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>∼</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha \sim \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 。</li></ul><p><strong>定理 1</strong>： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 的等价无穷小的<strong>充要条件</strong>是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>=</mo><mi>α</mi><mo>+</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta =\alpha +o(\alpha )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></span></p><p><strong>定理 2</strong>：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>∼</mo><mover accent="true"><mi>α</mi><mo stretchy="true">~</mo></mover></mrow><annotation encoding="application/x-tex">\alpha \sim \widetilde{\alpha }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6905600000000001em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6905600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span class="svg-align" style="width:calc(100% - 0.05556em);margin-left:0.05556em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>∼</mo><mover accent="true"><mi>β</mi><mo stretchy="true">~</mo></mover></mrow><annotation encoding="application/x-tex">\beta \sim \widetilde{\beta }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14888em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> ，并且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mover accent="true"><mi>β</mi><mo stretchy="true">~</mo></mover><mover accent="true"><mi>α</mi><mo stretchy="true">~</mo></mover></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim  \frac{\widetilde{\beta } }{\widetilde{\alpha } }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.31744em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.63144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6905600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span class="svg-align" style="width:calc(100% - 0.05556em);margin-left:0.05556em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 存在，则</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>lim</mi><mo>⁡</mo><mfrac><mi>β</mi><mi>α</mi></mfrac><mo>=</mo><mi>lim</mi><mo>⁡</mo><mfrac><mover accent="true"><mi>β</mi><mo stretchy="true">~</mo></mover><mover accent="true"><mi>α</mi><mo stretchy="true">~</mo></mover></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\lim\frac{\beta}{\alpha}=\lim\frac{\widetilde{\beta}}{\widetilde{\alpha}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.31744em;vertical-align:-0.686em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.63144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6905600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span class="svg-align" style="width:calc(100% - 0.05556em);margin-left:0.05556em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.95444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>使用 <strong>“定理 2”</strong> 时需要注意，必须满足分子、分母同时为无穷小，才能进行替换；分子或者分母是若干因子的乘积，可对其中的一个或几个因子进行替换。</p></blockquote><h3 id="1-7-2-等价无穷小代换"><a class="header-anchor" href="#1-7-2-等价无穷小代换">¶</a>1.7.2 等价无穷小代换</h3><ol><li>代换原则：乘除关系可以换；</li><li>常用的等价无穷小：详见<a href="./13_%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91">附录 高等数学常用公式</a>。</li></ol><h1 id="1-8-函数的连续性和间断点"><a class="header-anchor" href="#1-8-函数的连续性和间断点">¶</a>1.8 函数的连续性和间断点</h1><h2 id="1-8-1-函数的连续性"><a class="header-anchor" href="#1-8-1-函数的连续性">¶</a>1.8.1 函数的连续性</h2><p><strong>定义</strong>：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的某一邻域内有定义，如果</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mi mathvariant="normal">Δ</mi><mi>y</mi><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mrow><mo fence="true">[</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow><mo>=</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{\Delta x \to 0} \Delta y = \lim_{\Delta x \to 0}\left [ f(x_{0}+\Delta x)-f(x_{0}) \right ]  = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.438771em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.355669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4943309999999999em;vertical-align:-0.744331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.355669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.744331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>那么就称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 连续。设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的某一邻域内有定义，如果</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lim_{x \to x_{0} } f(x)=f(x_{0} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>那么就称函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 处连续。</p><p>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mstyle mathsize="1.2em"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">−</mo></msubsup></mrow></munder></mstyle><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">−</mo></msubsup><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle {\large \lim_{x \to x_{0}^{-}  }}  f(x) = f(x_{0}^{-} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0959879999999997em;vertical-align:-1.2626600000000001em;"></span><span class="mord"><span class="mop op-limits sizing reset-size6 size7"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944399999999998em;"><span style="top:-2.4708033333333335em;margin-left:0em;"><span class="pstrut" style="height:3.2em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8447949999999999em;"><span style="top:-2.26547em;margin-left:0em;margin-right:0.0625em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size4 size2 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.0072975em;margin-right:0.0625em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size4 size2 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33452999999999994em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0522166666666668em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 存在，且等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">−</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_{0}^{-} )=f(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>那么就说函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <strong>左连续</strong>。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mstyle mathsize="1.2em"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">+</mo></msubsup></mrow></munder></mstyle><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">+</mo></msubsup><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle {\large \lim_{x\to x_{0}^{+}}}f(x)=f(x_{0}^{+})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0959879999999997em;vertical-align:-1.2626600000000001em;"></span><span class="mord"><span class="mop op-limits sizing reset-size6 size7"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944399999999998em;"><span style="top:-2.4708033333333335em;margin-left:0em;"><span class="pstrut" style="height:3.2em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8447949999999999em;"><span style="top:-2.26547em;margin-left:0em;margin-right:0.0625em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size4 size2 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.0072975em;margin-right:0.0625em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size4 size2 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33452999999999994em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0522166666666668em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 存在，且等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>0</mn><mo lspace="0em" rspace="0em">+</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_{0}^{+} )=f(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.07777em;vertical-align:-0.256439em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4435610000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>那么就说函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <strong>右连续</strong>。</p><h2 id="1-8-2-函数的间断点"><a class="header-anchor" href="#1-8-2-函数的间断点">¶</a>1.8.2 函数的间断点</h2><p>设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的某去心邻域内有定义。在此前提下，如果函数 $$\displaystyle f(x)$$ ：</p><ol><li>在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x=x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 没有定义；</li><li>在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=\overset{\circ}{U}(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 有定义，但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x\to x_{0}}f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 不存在；</li><li>在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x=x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 有定义，且 $\displaystyle \lim_{x \to x_{0}}f(x) $ 存在，但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle  \lim_{x \to x_{0}}f(x) \ne f(x_{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>；</li></ol><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">可去间断点</td><td style="text-align:center">左右极限存在且相等</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo mathvariant="normal">≠</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x) = \left\{\begin{matrix}x,  &amp; x\ne 1\\\frac{1}{2}   &amp;x = 1\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4051080000000002em;vertical-align:-0.9525540000000003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.452554em;"><span style="top:-3.612554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mpunct">,</span></span></span><span style="top:-2.4074459999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9525540000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.452554em;"><span style="top:-3.612554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.4074459999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9525540000000003em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">跳跃间断点</td><td style="text-align:center">左右极限存在且不相等</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x) = \left\{\begin{matrix}x-1,  &amp; x&lt;0\\0,  &amp; x = 0\\x+1,  &amp;x&gt;0\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.00501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr><tr><td style="text-align:center">振荡间断点</td><td style="text-align:center"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>sin</mi><mo>⁡</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo separator="true">,</mo><mi>x</mi><mo>⟶</mo><mn>0</mn></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x) = \sin \frac{1}{x} ,x\longrightarrow 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td></tr><tr><td style="text-align:center">无穷间断点</td><td style="text-align:center"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">(</mo><mi>x</mi><mo>→</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle f(x) = \tan x(x\rightarrow \frac{\pi }{2} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:left"></td></tr></tbody></table><p><strong>间断点的分类</strong>：</p><ul><li><strong>第一类间断点</strong>：左右极限存在的间断点（<strong>可去间断点、跳跃间断点</strong>）。</li><li><strong>第二类间断点</strong>：不属于第一类间断点的其余间断点（<strong>振荡间断点、无穷间断点</strong>）。</li></ul><h1 id="1-9-连续函数的运算与初等函数的连续性"><a class="header-anchor" href="#1-9-连续函数的运算与初等函数的连续性">¶</a>1.9 连续函数的运算与初等函数的连续性</h1><p>初等函数是由基本初等函数经过与有限次的四则运算或者复合组成的函数。</p><h2 id="1-9-1-连续函数的和-差-积-商的连续性"><a class="header-anchor" href="#1-9-1-连续函数的和-差-积-商的连续性">¶</a>1.9.1 连续函数的和、差、积、商的连续性</h2><p><strong>定理 1</strong>：设函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 处连续，则他们的和、差、积以及商（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(x_{0})\ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>）都在点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 处连续。</p><h2 id="1-9-2-反函数与复合函数的连续性"><a class="header-anchor" href="#1-9-2-反函数与复合函数的连续性">¶</a>1.9.2 反函数与复合函数的连续性</h2><p><strong>定理 2</strong>：如果函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">I_{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 上单调增加（或单调减少）且连续，那么它的反函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=f^{-1}(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 也在对应的区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>y</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><msub><mi>I</mi><mi>x</mi></msub><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">I_{y}=\left \{y|y=f(x),x\in I_{x}  \right \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span> 上单调增加（或单调减少）且连续。</p><p><strong>定理 3</strong>：设函数 $y=f[g(x)] $ 由函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u=g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 与函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 复合而成， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>⊆</mo><msub><mi>D</mi><mrow><mi>f</mi><mo separator="true">,</mo><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\overset{\circ}{U}(x_{0})\subseteq D_{f,g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 。若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle \lim_{x \to x_{0} } g(x)=u_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，而函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">u=u_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 连续，则</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>u</mi><mo>→</mo><msub><mi>u</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lim_{x \to x_{0} } f[g(x)] = \lim_{u \to u_{0} } f(u) = f(u_{0} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>**定理 4 **：设函数 $y=f[g(x)] $ 是由函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u=g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 与函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 复合而成， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mover><mo><mi>U</mi></mo><mo lspace="0em" rspace="0em">∘</mo></mover></mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>⊆</mo><msub><mi>D</mi><mrow><mi>f</mi><mo separator="true">,</mo><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\overset{\circ}{U}(x_{0})\subseteq D_{f,g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.544445em;vertical-align:-0.25em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.294445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.88333em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 。 若函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u=g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x=x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 连续，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">g(x_{0})=u_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，而函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>u</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">u=u_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 连续，则复合函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">y=f[g(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x=x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 连续。</p><h2 id="1-9-3-初等函数的连续性"><a class="header-anchor" href="#1-9-3-初等函数的连续性">¶</a>1.9.3 初等函数的连续性</h2><p><strong>基本初等函数在它们的定义域内是连续的。一切初等函数在其定义区间内都是连续的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学学习 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学  绪论</title>
      <link href="/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/00_%E7%BB%AA%E8%AE%BA%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html"/>
      <url>/04_%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0/01_%E6%9C%AC%E7%A7%91/01_%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/00_%E7%BB%AA%E8%AE%BA%E3%80%90%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-微积分研究的主要内容"><a class="header-anchor" href="#一-微积分研究的主要内容">¶</a>一、微积分研究的主要内容</h1><p><strong>主要研究</strong>：事物运动中的数量变化规律。</p><p><strong>两种变化</strong>：均匀变化和非均匀变化（重点）。</p><p><strong>两个侧面</strong>：微观（局部）和宏观（整体）。</p><h1 id="二-微积分研究的主要对象-思想方法与特征"><a class="header-anchor" href="#二-微积分研究的主要对象-思想方法与特征">¶</a>二、微积分研究的主要对象、思想方法与特征</h1><ol><li><p>微积分研究的主要对象：函数 $y=f(x),x\in \left [ a,b \right ] $ 的变化规律</p><ol><li>微观（变化率）；</li><li>宏观（改变量）。</li></ol></li><li><p>微积分研究的思想方法：</p><ol><li>利用已知来表示未知；</li><li>均匀变化来计算非均匀变化。</li></ol><p>局部均匀化求<strong>近似</strong>，利用<strong>极限</strong>得精确。</p></li><li><p>导数和积分的本质：</p><p>导数和积分是分别处理均匀量的商和积在处理非均匀量中的发展。</p></li><li><p>微积分发展的关键：<strong>极限思想</strong>。</p></li><li><p>微积分（高等数学）的特征：</p><ol><li>对象和抽象性；</li><li>推理的严密性；</li><li>应用的广泛性。</li></ol></li></ol><h1 id="三-怎样学好高等数学"><a class="header-anchor" href="#三-怎样学好高等数学">¶</a>三、怎样学好高等数学</h1><ol><li><p>认识重要性，培养学习兴趣；</p><blockquote><p>“一门科学，只有当它成功地运用数学时，才能达到真正完善的地步”。——马克思</p></blockquote></li><li><p>深入钻研，领会本质，培养科学思维方法。</p><blockquote><p>“没有一种数学思想，以它被发现时的那个样子发表出来。一个问题被解决以后，相应的发展一种形式化的技巧，结果使得<strong>火热的思考变成了冰冷的美丽</strong>”。——20世最伟大最有影响力的数学家教育家弗兰登塔尔。</p></blockquote></li><li><p>培养抽象思维、逻辑推理和熟练计算能力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学学习 </tag>
            
            <tag> 高等数学 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua基础语法</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/05.Lua/01.Lua%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/05.Lua/01.Lua%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a class="header-anchor" href="#一">¶</a>一、</h1><h1 id="二-lua基础"><a class="header-anchor" href="#二-lua基础">¶</a>二、Lua基础</h1><h2 id="2-1-第一个lua程序"><a class="header-anchor" href="#2-1-第一个lua程序">¶</a>2.1 第一个Lua程序</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：在 <code>Lua</code> 语法中，语句的结尾可以添加 “;”，也可以选择不添加 “;”，但是习惯上不添加 “;”。</p></blockquote><h2 id="2-2-注释"><a class="header-anchor" href="#2-2-注释">¶</a>2.2 注释</h2><p>俗话说的好：我讨厌两种人，一是不写注释的人；二是让我写注释的人。尽管如此，良好的注释习惯不仅能提升代码的美观度和可读性，而且便于后期迭代修改。因此，养成写注释的好习惯是写代码的第一步。</p><p>基本上所有的计算机语言都有注释，而在 <code>Lua</code> 语言中，支持的注释类型有两种，分别是：</p><ol><li><p>单行注释</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********单行注释**********&quot;</span>)</span><br><span class="line"><span class="comment">-- 我是单行注释</span></span><br></pre></td></tr></table></figure><p>这里是两个短横线 “-”。</p></li><li><p>多行注释</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********多行注释**********&quot;</span>)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">我是多行注释</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">我是多行注释</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">   <span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">我是多行注释</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-基础变量类型"><a class="header-anchor" href="#2-3-基础变量类型">¶</a>2.3 基础变量类型</h2><p>在 <code>Lua</code> 语言中，所有的变量类型总结起来一共有 8 种，分别是：</p><table><thead><tr><th style="text-align:center">nil</th><th style="text-align:center">number</th><th style="text-align:center">string</th><th style="text-align:center">boolean</th><th style="text-align:center">table</th><th style="text-align:center">function</th><th style="text-align:center">userdata</th><th style="text-align:center">thread</th></tr></thead><tbody><tr><td style="text-align:center">表示NULL</td><td style="text-align:center">表示数字，包含整数和浮点数</td><td style="text-align:center">表示字符串</td><td style="text-align:center">表示布尔类型</td><td style="text-align:center">表类型</td><td style="text-align:center">函数类型</td><td style="text-align:center">数据结构</td><td style="text-align:center">协同程序</td></tr></tbody></table><p>本节中，主要讲解前四种基础变量类型，而后四种的复杂变量类型放在以后的小节中。</p><p>首先，在 <code>Lua</code> 语言中，声明变量是不需要指明其类型的，系统能够自动推断出变量的类型，属于<strong>弱语言</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. nil变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********nil变量**********&quot;</span>)</span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的值:&quot;</span>, a, <span class="string">&quot;    a的类型:&quot;</span>, <span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. number变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********number变量**********&quot;</span>)</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num的值:&quot;</span>, num, <span class="string">&quot;    num的类型:&quot;</span>, <span class="built_in">type</span>(num))</span><br><span class="line">number = <span class="number">73.123123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;number的值:&quot;</span>, number, <span class="string">&quot;    number的类型:&quot;</span>, <span class="built_in">type</span>(number))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. string变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********string变量**********&quot;</span>)</span><br><span class="line">str = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str的值:&quot;</span>, str, <span class="string">&quot;    str的类型:&quot;</span>, <span class="built_in">type</span>(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. boolean变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********boolean变量**********&quot;</span>)</span><br><span class="line">bool = <span class="literal">true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bool的值:&quot;</span>, bool, <span class="string">&quot;    bool的类型:&quot;</span>, <span class="built_in">type</span>(bool))</span><br></pre></td></tr></table></figure><p>从上面的代码中，我们能得到：</p><ol><li><p>变量的类型是根据其赋值所决定的；</p><p>疑问：如果一个没有赋值的变量，那么它的类型是什么呢？</p><p>答案：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变量 “ABCD” 的类型是&quot;</span>, <span class="built_in">type</span>(ABCD))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">变量 “ABCD” 的类型是nil</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>由此可见，使用为定义的变量时，系统并不会报错，并且未定义的变量的类型为 <code>nil</code> 。</p></li><li><p>同一变量名可以进行多次赋值，并且取最后赋的值。</p><p>疑问：如果我将一个变量赋<strong>不同类型的变量</strong>，是否可取？结果又会是什么呢？</p><p>答案：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********变量的多次赋值**********&quot;</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的值:&quot;</span>, a, <span class="string">&quot;    a的类型:&quot;</span>, <span class="built_in">type</span>(a))</span><br><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的值:&quot;</span>, a, <span class="string">&quot;    a的类型:&quot;</span>, <span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********变量的多次赋值**********</span></span><br><span class="line"><span class="comment">a的值:10    a的类型:number</span></span><br><span class="line"><span class="comment">a的值:Hello, World!    a的类型:string</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Tip：在 <code>Lua</code> 语言中，可以使用 <code>type(..)</code> 函数来获取变量类型，其返回值是一个字符串。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********type()**********&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********type()**********</span></span><br><span class="line"><span class="comment">string</span></span><br><span class="line"><span class="comment">string</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="2-4-字符串"><a class="header-anchor" href="#2-4-字符串">¶</a>2.4 字符串</h2><p>在 <code>Lua</code> 语言中，针对字符的变量类型只有字符串 <code>string</code> ，没有字符 <code>char</code> 。</p><p><strong>对于字符串的表示，既可以使用双引号，也可以使用单引号</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********字符串的声明**********&quot;</span>)</span><br><span class="line">str = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">str2 = <span class="string">&#x27;你好&#x27;</span></span><br></pre></td></tr></table></figure><p>对于字符串来讲，我们使用字符串，不仅会要学会创建字符串，而且还必须学会如可操作字符串，例如：获取字符串长度、拼接字符串、大小写转换、查找、截取、重复、替换等。</p><p>首先，给出字符串多行打印的方法，并且 <code>Lua</code> 语言中，<strong>字符串支持转义字符</strong>；而字符串类型的转换，是通过函数 <code>tostring(..)</code> 来完成的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********多行打印**********&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12345\n67890\n&quot;</span>)</span><br><span class="line">str3 = <span class="string">[[</span></span><br><span class="line"><span class="string">我是</span></span><br><span class="line"><span class="string">多行打印</span></span><br><span class="line"><span class="string">!!!!</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********多行打印**********</span></span><br><span class="line"><span class="comment">12345</span></span><br><span class="line"><span class="comment">67890</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我是</span></span><br><span class="line"><span class="comment">多行打印</span></span><br><span class="line"><span class="comment">!!!!</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********字符串的转换**********&quot;</span>)</span><br><span class="line">str4 = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str4的值:&quot;</span>, str4, <span class="string">&quot;    str4的类型:&quot;</span>, <span class="built_in">type</span>(str4))</span><br><span class="line">str4 = <span class="built_in">tonumber</span>(str4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str4的值:&quot;</span>, str4, <span class="string">&quot;    str4的类型:&quot;</span>, <span class="built_in">type</span>(str4))</span><br><span class="line">str4 = <span class="built_in">tostring</span>(str4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str4的值:&quot;</span>, str4, <span class="string">&quot;    str4的类型:&quot;</span>, <span class="built_in">type</span>(str4))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********字符串的转换**********</span></span><br><span class="line"><span class="comment">str4的值:123    str4的类型:string</span></span><br><span class="line"><span class="comment">str4的值:123    str4的类型:number</span></span><br><span class="line"><span class="comment">str4的值:123    str4的类型:string</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>对于如何获取字符串的长度，通过 <code>#</code> 符号来进行操作的，其使用方法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********字符串的长度**********&quot;</span>)</span><br><span class="line">str5 = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str5的长度:&quot;</span>, #str5)</span><br><span class="line">str6 = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str6的长度:&quot;</span>, #str6)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(#str6))</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********字符串的长度**********</span></span><br><span class="line"><span class="comment">str5的长度:13</span></span><br><span class="line"><span class="comment">str6的长度:6</span></span><br><span class="line"><span class="comment">number</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在 <code>Lua</code> 语言中，通过 <code>#</code> 获取字符串的长度，并不是字符数，而是返回的字节数（汉字占三个字节）。</p></blockquote><p>字符串的拼接：使用 <code>..</code> 操作符。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********字符串的连接**********&quot;</span>)</span><br><span class="line">str7 = <span class="string">&quot;Hello, &quot;</span></span><br><span class="line">str8 = <span class="string">&quot;World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str7 .. str8)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********字符串的连接**********</span></span><br><span class="line"><span class="comment">Hello, World!</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>还可以使用模式匹配的方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********模式匹配**********&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;我已经使用了 %d 天的Lua&quot;</span>, <span class="number">7</span>))</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********模式匹配**********</span></span><br><span class="line"><span class="comment">我已经使用了 7 天的Lua</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>而对于字符串的其余操作，其用法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********字符串的操作**********&quot;</span>)</span><br><span class="line">str9 = <span class="string">&quot;abcDEFghabc&quot;</span></span><br><span class="line"><span class="comment">-- 1. 小写转大写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(str9))</span><br><span class="line"><span class="comment">-- 2. 大写转小写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">lower</span>(str9))</span><br><span class="line"><span class="comment">-- 3. 反转</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">reverse</span>(str9))</span><br><span class="line"><span class="comment">-- 4. 查找</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(str9, <span class="string">&quot;abc&quot;</span>))</span><br><span class="line"><span class="comment">-- 5. 截取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(str9, <span class="number">4</span>, <span class="number">6</span>))</span><br><span class="line"><span class="comment">-- 6. 替换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(str9, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;***&quot;</span>))</span><br><span class="line"><span class="comment">-- 7. 重复</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">rep</span>(str9, <span class="number">3</span>))</span><br><span class="line"><span class="comment">-- 8. 匹配</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">match</span>(str9, <span class="string">&quot;DEF&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********字符串的操作**********</span></span><br><span class="line"><span class="comment">ABCDEFGHABC</span></span><br><span class="line"><span class="comment">abcdefghabc</span></span><br><span class="line"><span class="comment">cbahgFEDcba</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">DEF</span></span><br><span class="line"><span class="comment">***DEFgh***2</span></span><br><span class="line"><span class="comment">abcDEFghabcabcDEFghabcabcDEFghabc</span></span><br><span class="line"><span class="comment">DEF</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>函数 <code>find()</code> 返回值有两个，表明查找到两处，位置分别是 1 和 3；函数 <code>gsub()</code> 最后输出一个数字，表明替换的次数。</p><blockquote><p>注意：在 <code>Lua</code> 语言中，字符串的索引是从 “1” 开始的，这一点需要和替他语言进行区分。在后面的学习中，其实发现，涉及到索引的，默认都是从 “1” 开始，而不是从 “0” 开始。</p></blockquote><h2 id="2-5-运算符"><a class="header-anchor" href="#2-5-运算符">¶</a>2.5 运算符</h2><p>在 <code>Lua</code> 语言中，运算符的种类分为三种：<strong>算术运算符</strong>、<strong>条件运算符</strong>和<strong>逻辑运算符</strong>。</p><ol><li><p>算术运算符：<code>+  -  *  /  %  ^</code> （加、减、乘、除、取余、幂）；</p><blockquote><p><strong>在 <code>Lua</code> 语言中，没有自增自减运算符（<code>++ --</code>），同时也没有复合运算符（<code>+= -= *= /= %=</code>）</strong>。</p></blockquote><p><code>string</code> 与 <code>number</code> 类型运算时，如果 <code>string</code> 可以被转换成 <code>number</code> ，那么会得到 <code>number</code> 类型的结果。</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********算术运算符**********&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12.3&quot;</span> + <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12.3&quot;</span> - <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12.3&quot;</span> * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12.3&quot;</span> / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;12.3&quot;</span> % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">结果为:</span></span><br><span class="line"><span class="comment">**********算术运算符**********</span></span><br><span class="line"><span class="comment">14.3</span></span><br><span class="line"><span class="comment">10.3</span></span><br><span class="line"><span class="comment">24.6</span></span><br><span class="line"><span class="comment">6.15</span></span><br><span class="line"><span class="comment">0.3</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>条件(关系)运算符：<code>&gt;  &lt;  &gt;=  &lt;=  ==  ~=</code> （大于、小于、大于等于、小于等于、等于、不等于）</p></li><li><p>逻辑运算符：<code>and  or  not</code> （与、或、非）。</p><p>在 <code>Lua</code> 语言中，“与” 和 “或” 都遵循逻辑电路的 “短路” 原则。</p></li></ol><blockquote><p>在 <code>Lua</code> 语言中，<strong>不支持位运算符和三目运算符</strong>。</p></blockquote><h1 id="三-流程控制语句"><a class="header-anchor" href="#三-流程控制语句">¶</a>三、流程控制语句</h1><h2 id="3-1-条件分支语句"><a class="header-anchor" href="#3-1-条件分支语句">¶</a>3.1 条件分支语句</h2><p>在 <code>Lua</code> 语言中，基本的 <code>if</code> 语句如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [条件表达式] <span class="keyword">then</span></span><br><span class="line">    [分支]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [分支]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于5&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于5&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">a大于5</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>多分支语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于5&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a &lt; <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于5&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a等于5&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">a大于5</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>在<code>Lua</code>语法中，没有<code>switch</code>语法</strong>。</p></blockquote><h2 id="3-2-循环语句"><a class="header-anchor" href="#3-2-循环语句">¶</a>3.2 循环语句</h2><ol><li><p><code>while</code>循环</p><p>基本语法格式如下：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [条件表达式] <span class="keyword">do</span></span><br><span class="line">    [循环体]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>“<code>do-while</code>” <code>repeat</code>循环</p><p>基本语法格式如下：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    [循环体]</span><br><span class="line"><span class="keyword">until</span> [结束条件判断表达式]</span><br></pre></td></tr></table></figure></li><li><p><code>for</code>循环</p><p>基本语法格式如下：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = [初值], [目标值(不包含)], [step] <span class="keyword">do</span></span><br><span class="line">    [循环体]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>在<code>Lua</code>语言中，<code>for</code>循环会自行累计计数，不需要手动著名<code>i = i + 1</code>；</li><li><code>step</code>是步长，也就是每一次迭代，<code>i</code>变换的量，<strong>默认是 “1”</strong>；</li><li>初值和目标值是左开右闭（区间）范围，也就是相当于 “初值 &lt;= X &lt; 目标值”。</li></ul></li></ol><h1 id="四-函数💲"><a class="header-anchor" href="#四-函数💲">¶</a>四、函数💲</h1><h2 id="4-1-函数的定义"><a class="header-anchor" href="#4-1-函数的定义">¶</a>4.1 函数的定义</h2><p>在<code>Lua</code>语言中，函数的表示方式有两种，分别是：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Name</span><span class="params">()</span></span></span><br><span class="line">    [函数体]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Name()</span><br><span class="line"></span><br><span class="line">Name = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    [函数体]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Name()</span><br></pre></td></tr></table></figure><blockquote><p>Tips：在前面的学习中提到过函数<code>function</code>也是一种特殊的变量，而第二种表示方式就类似于变量的定义。</p><p>注意：在<code>Lua</code>语言中，由于是解释型语言，系统逐行进行执行的，因此<strong>不能将函数的执行放在函数的定义之前</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这样的代码会报错</span></span><br><span class="line">Name()</span><br><span class="line">Name = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m a function&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></blockquote><p>对于含有参数的函数，在定义的时候不需要指明参数的类型，因此，在函数处理的时候，就要做好应对多种数据类型的准备，例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">F1 = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入的是：&quot;</span>, a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">F1(<span class="literal">nil</span>)</span><br><span class="line">F1(<span class="number">1</span>)</span><br><span class="line">F1(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">F1(<span class="literal">true</span>)</span><br><span class="line">F1()</span><br><span class="line">F1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">你输入的是：nil</span></span><br><span class="line"><span class="comment">你输入的是：1</span></span><br><span class="line"><span class="comment">你输入的是：Hello, World!</span></span><br><span class="line"><span class="comment">你输入的是：true</span></span><br><span class="line"><span class="comment">你输入的是：nil</span></span><br><span class="line"><span class="comment">你输入的是：1</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>当执行有参的函数时，如果输入零个参数，那么会按照<code>nil</code>对每个参数进行处理；如果输入的参数多于定义的参数，那么会默认忽略多余的参数</strong>。</p></blockquote><p>对于有返回值的参数，在函数体内部使用<code>return</code>语句，并且<strong>可以有多返回值</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********函数的返回值**********&quot;</span>)</span><br><span class="line">F2 = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(F2(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">F3 = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a, b, a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a, b, c = F3(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>对于多返回值，可以声明多个变量来接收，如果接收者多于返回者，那么多余的接收者为<code>nil</code>；如果接收者小于返回者，那么多余的返回者丢弃。</p><blockquote><p>在<code>Lua</code>语言中，如果中间某个返回值不想要，可以使用弃元<code>_</code>（单下划线），作为接收的占位符。</p></blockquote><h2 id="4-2-函数的重载"><a class="header-anchor" href="#4-2-函数的重载">¶</a>4.2 函数的重载</h2><p>先回答一下什么是函数额重载：函数名相同，但是函数的参数不同，称为<strong>函数的重载</strong>。</p><p>在<code>Lua</code>语言中，不支持函数的重载，执行函数时，会默认调取最后一次赋值的函数变量。</p><h2 id="4-3-变长参数"><a class="header-anchor" href="#4-3-变长参数">¶</a>4.3 变长参数</h2><p>在<code>Lua</code>语言中，如果希望函数传入多个参数，但是参数的个数不确定，可以使用变长参数，例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********函数的可变参数**********&quot;</span>)</span><br><span class="line">F4 = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span> &#123; ... &#125; <span class="keyword">do</span></span><br><span class="line">        sum = sum + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(F4(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(F4(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">**********函数的可变参数**********</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">55</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>在上面代码中，定义函数的参数时，使用<code>...</code>（三个点）表示参数，那么在执行函数的时候，就能传入多个参数。这些传入函数的参数，是通过转换成表<code>table</code>类型的变量来操作的，对于表<code>table</code>的相关知识，在后续的章节中，会进行细致的讲解。</p><h2 id="4-4-函数的嵌套-闭包"><a class="header-anchor" href="#4-4-函数的嵌套-闭包">¶</a>4.4 函数的嵌套(闭包)</h2><p>函数作为一种变量类型，可以<strong>以返回值的形式</strong>进行使用，这就是函数的嵌套。例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">F5 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数的嵌套&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">F6 = F5() <span class="comment">-- 此时的F6是一个函数，调用F6()即可调用F5()返回的函数</span></span><br><span class="line">F6()</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">函数的嵌套</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>闭包的实现方式：改变变量的生命周期</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">F1 = <span class="function"><span class="keyword">function</span><span class="params">(k)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span></span><br><span class="line">        <span class="keyword">return</span> a * k</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">F2 = F1(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(F2(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(F2(<span class="number">4</span>))</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>如何理解上面的代码呢？</p><p>首先定义函数变量<code>F1</code>，而函数<code>F2</code>就是返回值里面的函数，并且<code>k</code>恒为“1”。因此，无论调用<code>F2(..)</code>时输入是什么，<code>k</code>必定是“1”，这样，这个变量值就被锁定在函数<code>F2</code>内部。</p><h1 id="五-复杂数据结构-表"><a class="header-anchor" href="#五-复杂数据结构-表">¶</a>五、复杂数据结构——表</h1><h2 id="5-1-数组"><a class="header-anchor" href="#5-1-数组">¶</a>5.1 数组</h2><h3 id="5-1-1-数组基础"><a class="header-anchor" href="#5-1-1-数组基础">¶</a>5.1.1 数组基础</h3><p>数组的创建方式，通过大括号 “{ }” 创建，并且数组内的元素用逗号 “,” 隔开。基本语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; <span class="number">1</span>, <span class="number">2.4</span>, <span class="string">&quot;Hello, World!&quot;</span>, <span class="literal">true</span>, <span class="literal">nil</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在<code>Lua</code>语言中，数组的元素类型可以不相同。</p></blockquote><p>数组可以通过索引来获取内部元素，并且<strong>要注意，索引是从 “1” 开始的</strong>，但是如果使用小于1的索引，并不会出错，而是输出为<code>nil</code>。（这里可以更加加深<code>nil</code>类型的概念，就是“无”、“空”）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; <span class="number">1</span>, <span class="number">2.4</span>, <span class="string">&quot;Hello, World!&quot;</span>, <span class="literal">true</span>, <span class="literal">nil</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>], a[<span class="number">4</span>], a[<span class="number">5</span>])</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">nil12.4Hello, World!truenil</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p><s><strong>获取数据的长度依旧是使用<code>#</code>，并且只会从 “1” 开始，到遇到<code>nil</code>结束。也就是说，如果一个数组的元素都不为<code>nil</code>，那么相当于在其尾部跟随一个<code>nil</code>；而如果在数组的中间段某个元素为<code>nil</code>，那么数组的长度就到此为止</strong></s>。</p><blockquote><p><strong>注意：在新版本<code>Lua</code>中，<code>#</code>可以获取数组的全部元素，如果中间某个元素为<code>nil</code>，也会输出数组全部元素的个数</strong>。</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">b = &#123; <span class="number">1</span>, <span class="number">2.4</span>, <span class="literal">nil</span>, <span class="string">&quot;Hello, World!&quot;</span>, <span class="literal">true</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(#b)</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--新版本的输出</span></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips：在<code>Lua</code>语言中，<code>#</code>是一个通用的获取长度的关键字。</p></blockquote><h3 id="5-1-2-数据的遍历"><a class="header-anchor" href="#5-1-2-数据的遍历">¶</a>5.1.2 数据的遍历</h3><p>使用<code>for</code>循环进行数组的遍历，代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********数组的遍历**********&quot;</span>)</span><br><span class="line">array = &#123; <span class="number">1</span>, <span class="number">2.4</span>, <span class="string">&quot;Hello, World!&quot;</span>, <span class="literal">nil</span>, <span class="number">2</span>, <span class="literal">true</span> &#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #array, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(array[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><s>上面的遍历是根据获取数组的长度，进行计数遍历的。但是很明显，打印的信息表明，并未将数组中的所有元素进行输出，因此这种<strong>遍历方式不可靠</strong>。</s></p><blockquote><p>注意：在新版本<code>Lua</code>中，<code>#</code>可以获取数组的全部元素，如果中间某个元素为<code>nil</code>，也会输出数组全部元素的个数。</p></blockquote><h3 id="5-1-3-二维数组"><a class="header-anchor" href="#5-1-3-二维数组">¶</a>5.1.3 二维数组</h3><p>二维数组的定义如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array2 = &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="string">&quot;Hello, World!&quot;</span>, <span class="literal">true</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>这里需要了解到，其实在<code>Lua</code>语言中，<code>table</code>是一种很宽泛的概念，数组也是<code>table</code>的一种。而<code>table</code>里面的元素可以是任何数据类型，当然也包括<code>table</code>。当<code>table</code>作为<code>table</code>的元素时，从形式上来看，就类似于<code>C#</code>当中的二维数组。因此，在学习<code>Lua</code>语言的<code>table</code>，需要更深一步去理解，并且也要学会灵活运用。</p><h3 id="5-1-4-自定义索引"><a class="header-anchor" href="#5-1-4-自定义索引">¶</a>5.1.4 自定义索引</h3><p>基本格式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array3 = &#123; [<span class="number">0</span>] = <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>] = <span class="number">3</span>, [<span class="number">-1</span>] = <span class="number">4</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(array3[<span class="number">0</span>], array3[<span class="number">1</span>], array3[<span class="number">2</span>], array3[<span class="number">3</span>], array3[<span class="number">-1</span>])</span><br><span class="line"><span class="built_in">print</span>(#array3)</span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">**********自定义索引**********</span></span><br><span class="line"><span class="comment">12nil34</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>为什么获取数组的长度会是 “1” 呢？其实，数组对应的值如下：</p><table><thead><tr><th style="text-align:center">索引</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">3</th><th style="text-align:center">-1</th></tr></thead><tbody><tr><td style="text-align:center">值</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table><p><s>对于获取数组的长度，是从索引 “1” 开始的，因此，索引小于 “1” 的全部元素无法获取，并且由于没有索引为 “2” 的元素，因此也识别不到索引为 “3” 的元素，<strong>从索引 “1” 开始的连续索引，进行计数</strong>。</s></p><p><s>但是，如果连续的索引当中，被拿走<strong>一个</strong>，例如：1-2-3-5-6，那么会根据返回索引的最大值 “6”作为数组的长度，如果是1-2-3-6，那么就只会输出 “3” 。</s></p><blockquote><p>经过多次测试，发现 1-2-4-5 输出 5 ；1-2-3-5 输出 3 ；1-2-3-4-6-7 输出  7 。本人推测，可能是奇偶数不同，输出的结果就不同，这里可能是底层代码的问题。</p></blockquote><h2 id="5-2-迭代器遍历"><a class="header-anchor" href="#5-2-迭代器遍历">¶</a>5.2 迭代器遍历</h2><p>对于表<code>table</code>的遍历，主要是通过迭代器进行遍历的，前面通过<code>#  for</code>遍历的方式并不准确。对于表的迭代器遍历，主要有两种方法：</p><ol><li>函数<code>ipairs()</code>；</li><li>函数<code>pairs()</code>。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">array = &#123; [<span class="number">0</span>] = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">-1</span>] = <span class="number">4</span>, [<span class="number">4</span>] = <span class="number">5</span>, [<span class="number">6</span>] = <span class="number">6</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********使用ipairs**********&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********使用pairs**********&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">**********使用ipairs**********</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">23</span></span><br><span class="line"><span class="comment">**********使用pairs**********</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">23</span></span><br><span class="line"><span class="comment">01</span></span><br><span class="line"><span class="comment">66</span></span><br><span class="line"><span class="comment">-14</span></span><br><span class="line"><span class="comment">45</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述两种方法的区别是：</p><ul><li><code>ipairs()</code>：从索引 “1” 开始进行遍历，只能遍历连续索引；</li><li><code>pairs()</code>：索引 “1” 开始进行遍历，将索引连续部分全部遍历完，然后在将剩余的元素进行遍历</li></ul><blockquote><p>总结：<code>ipairs()</code>是不完全遍历，而<code>pairs()</code>是完全遍历。</p></blockquote><h2 id="5-3-表实现字典"><a class="header-anchor" href="#5-3-表实现字典">¶</a>5.3 表实现字典</h2><h3 id="5-3-1-字典的声明"><a class="header-anchor" href="#5-3-1-字典的声明">¶</a>5.3.1 字典的声明</h3><p>从结构上来看，字典与数组很想，区别就是字典的索引可以是字符串，而数组的索引是整数。基本格式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dictionary = &#123;</span><br><span class="line">    [<span class="string">&quot;hello&quot;</span>] = <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;world&quot;</span>] = <span class="string">&quot;世界&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;lua&quot;</span>] = <span class="string">&quot;Lua&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;is&quot;</span>] = <span class="string">&quot;是&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;great&quot;</span>] = <span class="string">&quot;伟大&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;language&quot;</span>] = <span class="string">&quot;语言&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;and&quot;</span>] = <span class="string">&quot;和&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;I&quot;</span>] = <span class="string">&quot;我&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;love&quot;</span>] = <span class="string">&quot;爱&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;it&quot;</span>] = <span class="string">&quot;它&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问字典的元素有两种方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dictionary[<span class="string">&quot;hello&quot;</span>]) <span class="comment">-- 你好</span></span><br><span class="line"><span class="built_in">print</span>(dictionary.world)    <span class="comment">-- 世界</span></span><br></pre></td></tr></table></figure><p>修改字典元素的方法也有两种：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictionary[<span class="string">&quot;hello&quot;</span>] = <span class="string">&quot;你好!&quot;</span></span><br><span class="line">dictionary.world = <span class="string">&quot;世界!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dictionary[<span class="string">&quot;hello&quot;</span>]) <span class="comment">-- 你好!</span></span><br><span class="line"><span class="built_in">print</span>(dictionary.world)    <span class="comment">-- 世界!</span></span><br></pre></td></tr></table></figure><p>删除字典元素的方法，是通过将其的值修改为<code>nil</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary[<span class="string">&quot;new&quot;</span>] = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果使用<code>.</code>操作符访问或者操作字典的元素，那么<strong>键的类型</strong>必须是<code>string</code>。</p></blockquote><h3 id="5-3-2-字典的遍历"><a class="header-anchor" href="#5-3-2-字典的遍历">¶</a>5.3.2 字典的遍历</h3><p>对于字典的遍历，只能使用<code>pairs()</code>而不能是使用<code>ipairs()</code>。基本格式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(dictionary) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[结果为:</span></span><br><span class="line"><span class="comment">it它</span></span><br><span class="line"><span class="comment">luaLua</span></span><br><span class="line"><span class="comment">is是</span></span><br><span class="line"><span class="comment">love爱</span></span><br><span class="line"><span class="comment">and和</span></span><br><span class="line"><span class="comment">hello你好</span></span><br><span class="line"><span class="comment">I我</span></span><br><span class="line"><span class="comment">great伟大</span></span><br><span class="line"><span class="comment">language语言</span></span><br><span class="line"><span class="comment">world世界</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips：从上面的输出来看，字典的内部顺序可能和定义的时候并不相同。</p></blockquote><h2 id="5-4-表实现类🍁"><a class="header-anchor" href="#5-4-表实现类🍁">¶</a>5.4 表实现类🍁</h2><h3 id="5-4-1-类的定义"><a class="header-anchor" href="#5-4-1-类的定义">¶</a>5.4.1 类的定义</h3><p>在<code>Lua</code>语言中，并没有内置的类，因此，需要自行去实现类结构。而<code>table</code>类型的变量十分灵活，可以通过表来创建类结构。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********类和结构体**********&quot;</span>)</span><br><span class="line">People = &#123;</span><br><span class="line">    name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age = <span class="number">18</span>,</span><br><span class="line">    sex = <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    SayHello = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is &quot;</span> .. <span class="built_in">self</span>.name)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    Learn = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am learning&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问类中的元素，通过<code>.</code>操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(People.name)</span><br><span class="line">People.SayHello(People)</span><br></pre></td></tr></table></figure><p>在<code>C#</code>语言中，类是通过<code>new()</code>的方式，去调用类的构造方法，来创建类的实例对象；而在<code>Lua</code>语言中，类更像是静态类，其中包含静态字段和静态方法。</p><p>如果在创建完成类后，如果想要增加类成员，那么可以直接通过<code>.</code>操作符去定义新的类成员，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">People = &#123;</span><br><span class="line">    name = &quot;张三&quot;,</span><br><span class="line">    age = 18,</span><br><span class="line">    sex = &quot;男&quot;,</span><br><span class="line">    SayHello = function(self)</span><br><span class="line">        print(&quot;Hello, my name is &quot; .. self.name)</span><br><span class="line">    end,</span><br><span class="line">    Learn = function(self)</span><br><span class="line">        print(&quot;I am learning&quot;)</span><br><span class="line">    end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.Aging = function(self)</span><br><span class="line">    self.age = self.age + 1</span><br><span class="line">    print(&quot;I am &quot; .. self.age .. &quot; years old&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>在类的成员方法中，如果想调用类的成员变量，那么同样需要使用<code>.</code>操作符进行访问，如果不指明调用的表的类型，就会按照全局变量处理。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(age)</span><br><span class="line">        <span class="built_in">print</span>(Student.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">Student.Say()</span><br><span class="line"><span class="comment">--[[结果是：</span></span><br><span class="line"><span class="comment">nil</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>直接使用<code>age</code>相当于访问全局变量，但是由于全局变量<code>age</code>不存在，所以输出的是<code>nil</code>，因此，想要调用<code>Student 的 age</code>，就需要使用<code>.</code>操作符，指明访问的类及其成员。（一定要指明访问的变量是谁的）</p><h3 id="5-4-2-调用类成员函数的两种方法🍁"><a class="header-anchor" href="#5-4-2-调用类成员函数的两种方法🍁">¶</a>5.4.2 调用类成员函数的两种方法🍁</h3><p>上一节内容中提到，如果类的函数想要调用类的变量，就需要指明调用的变量所属的类名：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(Student.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这每一次都手动指明类，是比较麻烦的，一种做法是，再调用函数的时候，将该类作为参数，传入到函数中去，这样就能很方便的访问类变量。代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">self</span>.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">Student.Say(Student)</span><br><span class="line">Student.Say()</span><br></pre></td></tr></table></figure><p>通过将<code>Student</code>作为参数，传入到函数中去，这样就能很方便的访问类成员变量。</p><p><strong>还有一种方法是，通过操作符<code>:</code>来访问成员函数，它与<code>.</code>操作符的区别是，会默认将调用方法的对象作为该方法的第一个参数，传入到函数中去</strong>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">self</span>.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student:Say()</span><br><span class="line"><span class="comment">--[[结果是：</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>操作符<code>:</code>的使用是重点，笔试和面试的考点，一定要深刻理解</strong>。</p></blockquote><p>这二者的使用对比：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">self</span>.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">Student.Say(Student)</span><br><span class="line"></span><br><span class="line">Student = &#123;</span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    Say = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">self</span>.age)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">Student:Say()</span><br></pre></td></tr></table></figure><h3 id="5-4-3-小总结"><a class="header-anchor" href="#5-4-3-小总结">¶</a>5.4.3 小总结</h3><p>对于类中成员的声明，可以是表内声明，也可以是表外声明。对于成员变量来说，声明的基本格式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person = &#123;</span><br><span class="line">    name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">Person.age = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>对于成员函数的声明，也分为表内声明和表外声明。而对于表外声明，根据函数的性质，有两种方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Person = &#123;</span><br><span class="line">    name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">Person.age = <span class="number">18</span></span><br><span class="line">Person.Say1 = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Say1&quot;</span>, <span class="built_in">self</span>.name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person:Say2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Say2&quot;</span>, <span class="built_in">self</span>.name)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="5-5-表的公共操作"><a class="header-anchor" href="#5-5-表的公共操作">¶</a>5.5 表的公共操作</h2><p>在<code>Lua</code>语言中，对表的公共操作有：插入、删除、排序、拼接</p><p>先创建一个表，后续的表都是对该表进行操作：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t0 = &#123; &#123; name = <span class="string">&quot;张三&quot;</span>, age = <span class="number">18</span> &#125;, &#123; name = <span class="string">&quot;李四&quot;</span>, age = <span class="number">30</span> &#125;, &#123; name = <span class="string">&quot;王五&quot;</span>, age = <span class="number">24</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>插入操作：使用<code>insert()</code>方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********插入操作**********&quot;</span>)</span><br><span class="line">t1 = &#123; name = <span class="string">&quot;Tom&quot;</span>, age = <span class="number">19</span> &#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t0, t1)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t0) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v.name, v.age)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">**********插入操作**********</span></span><br><span class="line"><span class="comment">1张三18</span></span><br><span class="line"><span class="comment">2李四30</span></span><br><span class="line"><span class="comment">3王五24</span></span><br><span class="line"><span class="comment">4Tom19</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>移除操作：使用<code>remove()</code>方法，<strong>默认会移除表内最后一个索引所代表的元素</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********删除操作**********&quot;</span>)</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t0)</span><br></pre></td></tr></table></figure><p>如果想要移除指定索引的元素，就需要在调用方法的时候，在添加一个参数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********删除操作**********&quot;</span>)</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t0,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>排序操作：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********排序操作**********&quot;</span>)</span><br><span class="line">t3 = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span> &#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(t3)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(t3) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面的排序操作，针对数字元素的表，默认是<strong>从小到大</strong>的排列顺序。如果想要自定义排序的规则，就需要在调用<code>sort()</code>的时候，传入一个规则函数作为参数（类似于匿名函数）。代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(t0, <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a.age &lt; b.age</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t0) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v.name, v.age)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">1张三18</span></span><br><span class="line"><span class="comment">2王五23</span></span><br><span class="line"><span class="comment">3李四30</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>拼接操作：使用<code>concat()</code>函数，主要用于字符串的拼接</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;**********连接操作**********&quot;</span>)</span><br><span class="line">t4 = &#123; <span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>, <span class="string">&quot;789&quot;</span> &#125;</span><br><span class="line">str = <span class="built_in">table</span>.<span class="built_in">concat</span>(t4, <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str)</span><br><span class="line"><span class="comment">--[[ Output:    </span></span><br><span class="line"><span class="comment">123,456,789</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：上述拼接的表中，元素不能是<code>boolean</code>类型。</p></blockquote><h1 id="六-特性"><a class="header-anchor" href="#六-特性">¶</a>六、特性</h1><h2 id="6-1-多脚本执行"><a class="header-anchor" href="#6-1-多脚本执行">¶</a>6.1 多脚本执行</h2><h3 id="6-1-1-全局变量和局部变量"><a class="header-anchor" href="#6-1-1-全局变量和局部变量">¶</a>6.1.1 全局变量和局部变量</h3><p>在之前的学习中，定义变量的使用，是直接使用<code>[变量名] = [值]</code>的方式进行的，而这种方式定义的变量，都是<strong>全局变量</strong>。</p><p>而相对的<strong>局部变量</strong>，在定义变量的时候，在其名字前添加<code>local</code>关键字进行修饰：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> v1  = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>二者的区别就是：全局变量的作用域是全局对象，也就是说在脚本的任意位置都能访问该变量；而对于局部变量来说，只能在定义的部分作用域内才能访问，超出了作用域就会失效。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    v2 = <span class="string">&quot;世界&quot;</span></span><br><span class="line">    <span class="keyword">local</span> v3 = <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(v1, v2, v3)</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">你好世界nil</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>这里的<code>v1,v2</code>，无论在哪里定义的，在脚本的任何位置都能进行访问；而<code>v3</code>是局部变量，并且在<code>for</code>循环内部定义的，因此只能在循环体中才能访问，一旦循环结束或者在循环体外访问，局部变量就会失效。</p><blockquote><p>Tips：在平时写代码的使用，尽量使用局部变量，除非是刻意才会使用全局变量。</p></blockquote><h3 id="6-1-2-多脚本执行"><a class="header-anchor" href="#6-1-2-多脚本执行">¶</a>6.1.2 多脚本执行</h3><p>在 <code>Lua</code> 语言中，一个脚本文件可以调用另一个脚本文件，这就是多脚本执行。多脚本执行需要使用关键字 <code>require</code> ，使用方式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多脚本执行&quot;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;Test&quot;</span>) <span class="comment">-- require(&quot;脚本名&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果脚本不在同一个目录下，就需要通过相对位置的形式，定位到脚本的位置，并且脚本文件不需要添加<code>.lua</code>后缀名。</p></blockquote><p>如果在脚本中的使用 <code>local</code> 修饰“全局域”变量，那么该脚本的任意位置都能访问该变量，但是其本质上还是一个局部变量，因为其他的脚本无法访问该变量。</p><p>如果想要使用其他脚本中的局部变量，那么可以在脚本的最后一行使用 <code>return</code> 返回该局部变量。</p><p>脚本<code>Main.lua</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多脚本执行&quot;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;Lua学习/Test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多脚本执行&quot;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;Lua学习/Test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">多脚本执行</span></span><br><span class="line"><span class="comment">多脚本执行文件-1</span></span><br><span class="line"><span class="comment">nil</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>脚本<code>Test.lua</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多脚本执行文件-1&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> v1 = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果是使用<code>require</code>加载的脚本，执行一次之后就不会再在被执行，就算再次使用<code>require</code>也不会被执行。如果想要该脚本再次执行，可以先将其卸载，然后再重新加载。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="string">&quot;Lua学习/Test&quot;</span>]) <span class="comment">-- 返回值为true，表明已经加载过</span></span><br><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="string">&quot;Lua学习/Test&quot;</span>] = <span class="literal">nil</span> <span class="comment">-- 卸载模块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="string">&quot;Lua学习/Test&quot;</span>]) <span class="comment">-- 返回值为nil，表明已经卸载</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;Lua学习/Test&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-1-3-大g表⚰-⚰"><a class="header-anchor" href="#6-1-3-大g表⚰-⚰">¶</a>6.1.3 大G表⚰️⚰️</h3><p>**大G表（<code>_G</code>）**是一个总表，它将定义的所有全局变量都存储在这个表中。对于<code>local</code>修饰的局部变量没有存放在<code>_G</code>表中。</p><h2 id="6-2-特殊用法"><a class="header-anchor" href="#6-2-特殊用法">¶</a>6.2 特殊用法</h2><p>多变量赋值：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>多返回值：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Get = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a, b, c, d, e = Get()</span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, e)</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">12345</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>逻辑表达式：<strong>在<code>lua</code>语言中，只有<code>false</code>和<code>nil</code>被认为是假，其余的任何都会被认定为真</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>) <span class="comment">-- [[ Output: 2 ]]</span></span><br></pre></td></tr></table></figure><p>为什么输出是 “2” 呢？之前提到的短路原则：<code>and</code>连接，有假则假；<code>or</code>连接，有真则真。如果在前面已经满足判断条件，后面的所有条件不在进行判断。</p><p>根据上述的规则，实现<strong>三目运算符</strong>的功能：输出较大的数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> y = <span class="number">20</span></span><br><span class="line"><span class="keyword">local</span> out = (x &gt; y) <span class="keyword">and</span> x <span class="keyword">or</span> y</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p>上面的代码讲解：如果<code>(x &gt; y)</code>为真，那么接下来会判断<code>(x &gt; y) and x</code>，而<code>x</code>为真，所以<code>or y</code>不需要判断，等效于<code>out = ture and x</code>，进一步等效于<code>out = x</code>；如果<code>(x &gt; y)</code>为假，那么不需要判断<code>x</code>，直接<code>(x &gt; y) and x</code>为假，然后因为<code>false or y</code>，所以再判断<code>y</code>，而<code>y</code>又是真，所以<code>out = y</code>，等效于<code>out = false or y</code>，即<code>out = y</code>。</p><h2 id="6-3-协同程序"><a class="header-anchor" href="#6-3-协同程序">¶</a>6.3 协同程序</h2><p>Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。</p><p>协同程序可以理解为一种特殊的线程，可以暂停和恢复其执行，从而允许非抢占式的多任务处理。</p><p>基本语法;</p><p>同程序由 <strong>coroutine</strong> 模块提供支持。</p><p>使用协同程序，你可以在函数中使用 <strong>coroutine.create</strong> 创建一个新的协同程序对象，并使用 <strong>coroutine.resume</strong> 启动它的执行。协同程序可以通过调用 <strong>coroutine.yield</strong> 来主动暂停自己的执行，并将控制权交还给调用者。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">coroutine.create()</td><td style="text-align:left">创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td></tr><tr><td style="text-align:left">coroutine.resume()</td><td style="text-align:left">重启 coroutine，和 create 配合使用</td></tr><tr><td style="text-align:left">coroutine.yield()</td><td style="text-align:left">挂起 coroutine，将 coroutine 设置为挂起状态</td></tr><tr><td style="text-align:left">coroutine.status()</td><td style="text-align:left">查看 coroutine 的状态 注：coroutine 的状态有三种：dead，suspended，running，具体什么时候有这样的状态请参考下面的程序</td></tr><tr><td style="text-align:left">coroutine.wrap（）</td><td style="text-align:left">创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</td></tr><tr><td style="text-align:left">coroutine.running()</td><td style="text-align:left">返回正在跑的 coroutine，一个 coroutine 就是一个线程，当使用running的时候，就是返回一个 coroutine 的线程号</td></tr></tbody></table><p>携程的本质是创建了一个线程对象。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> fun = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(fun)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"><span class="comment">--[[output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>通过多次调用 <code>coroutine.resume()</code> 方法，使得携程多次执行，从表面上来看与多次调用函数相似，但是，携程相当于调用一次函数，因此在携程启动的时候，其函数内部的状态信息不会重置，而是保持为上一次的状态，这就是与普通函数最大的区别。</p><p>函数 <code>coroutine.resume()</code> 本身是可以有返回值，并且第一个返回值默认为 “boolean” 类型，表示携程是否启动成功，而其余返回值则由 <code>coroutine.yield()</code> 函数决定。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">local fun = function()</span><br><span class="line">    local i = 1</span><br><span class="line">    while true do</span><br><span class="line">        i = i + 1</span><br><span class="line">        coroutine.yield(i)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">local co = coroutine.create(fun)</span><br><span class="line">local a, b = coroutine.resume(co)</span><br><span class="line">print(a, b)</span><br><span class="line"></span><br><span class="line">--[[ Output:</span><br><span class="line">true2</span><br><span class="line">]]</span><br></pre></td></tr></table></figure><p>使用 <code>coroutine.wrap（）</code> 方法创建的携程也可以有返回值，但是跟 <code>coroutine.resume()</code> 的区别是前者少了第一个默认的 “boolean” 类型的返回值。</p><h2 id="6-4-元表💥💥"><a class="header-anchor" href="#6-4-元表💥💥">¶</a>6.4 元表💥💥</h2><h3 id="6-4-1-元表的概念"><a class="header-anchor" href="#6-4-1-元表的概念">¶</a>6.4.1 元表的概念</h3><p>在 Lua table 中我们可以访问对应的 key 来得到 value 值，但是却无法对两个 table 进行操作(比如相加)。</p><p>因此 Lua 提供了元表(Metatable)，允许我们改变 table 的行为，每个行为关联了对应的元方法。</p><ol><li>任何表都可以作为其他表的元表；</li><li>任何表都可以有自己的元表；</li><li>当子表执行一些特定操作的时候，就会执行元表的相关方法。例如：<code>__tostring</code> 、 <code>——call</code> 、 <code>__index</code> 和 <code>__newindex</code> 。</li></ol><p>处理元表有两个重要的函数：</p><ul><li><code>setmetatable(table,metatable)</code> ：对指定 table 设置元表(metatable)，如果元表(metatable)中存在 <code>__metatable</code> 键值，setmetatable 会失败。</li><li><code>getmetatable(table)</code> ：返回对象的元表。</li></ul><h3 id="6-4-2-对元表的特定操作"><a class="header-anchor" href="#6-4-2-对元表的特定操作">¶</a>6.4.2 对元表的特定操作</h3><p>如果我们使用 <code>print()</code> 函数去直接打印输出一个表，就会得到表的内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> metaTable = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> myTable = &#123;</span><br><span class="line">    name = <span class="string">&quot;myTable&quot;</span>,</span><br><span class="line">    content = <span class="string">&quot;myContent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, metaTable)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myTable) <span class="comment">--[[ Output: table: 00C4A4D0]]</span></span><br></pre></td></tr></table></figure><p>但是有时候希望打印输出表内的内容，这时候就需要再元表中添加 <code>__tostring</code> 函数（注意是双下划线），然后再该函数中返回想要打印输出的字符串，这时候再调用 <code>print()</code> 函数的时候，就会打印 <code>__tostring</code> 返回值。代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> metaTable = &#123;</span><br><span class="line">    <span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(table)</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表的名字是：&quot;</span> .. <span class="built_in">table</span>.name .. <span class="string">&quot;，表的内容是：&quot;</span> .. <span class="built_in">table</span>.content</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> myTable = &#123;</span><br><span class="line">    name = <span class="string">&quot;myTable&quot;</span>,</span><br><span class="line">    content = <span class="string">&quot;myContent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, metaTable)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myTable) <span class="comment">--[[ Output: 表的名字是：myTable，表的内容是：myContent]]</span></span><br></pre></td></tr></table></figure><p>并且上面的方法中的第一个参数，会默认只想该表。</p><p>同样的使用方法还有以下：</p><table><thead><tr><th style="text-align:left">特使用法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>__call</code></td><td>如果将该表作为方法调用的时候，就会执行该方法。</td></tr><tr><td style="text-align:left"><code>__add</code></td><td>对应的运算符 ‘+’。</td></tr><tr><td style="text-align:left"><code>__sub</code></td><td>对应的运算符 ‘-’。</td></tr><tr><td style="text-align:left"><code>__mul</code></td><td>对应的运算符 ‘*’。</td></tr><tr><td style="text-align:left"><code>__div</code></td><td>对应的运算符 ‘/’。</td></tr><tr><td style="text-align:left"><code>__mod</code></td><td>对应的运算符 ‘%’。</td></tr></tbody></table><h3 id="6-4-3-index-与-newindex"><a class="header-anchor" href="#6-4-3-index-与-newindex">¶</a>6.4.3 __index 与 __newindex</h3><p>当你通过键来访问 table 的时候，如果这个键没有值，那么 Lua 就会寻找该 table 的metatable 中的 <code>__index</code> 键。如果 <code>__index</code> 包含一个表，Lua 会在表格中查找相应的键。</p><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> metaTable = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> myTable = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, metaTable)</span><br><span class="line"><span class="built_in">print</span>(myTable.name) <span class="comment">--[[ Output: nil ]]</span></span><br><span class="line">metaTable.<span class="built_in">__index</span> = &#123;</span><br><span class="line">    name = <span class="string">&quot;myTable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(myTable.name) <span class="comment">--[[ Output: myTable]]</span></span><br></pre></td></tr></table></figure><p>那么如果元表（元表-1）也有一个元表（元表-2），并且元表-1中没有待访问的变量，就会访问元表-2的 <code>__index</code> 所指向的表中的元素：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> table1 = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> table2 = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> table3 = &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(table1, table2)</span><br><span class="line">table2.<span class="built_in">__index</span> = table2</span><br><span class="line"><span class="built_in">setmetatable</span>(table2, table3)</span><br><span class="line">table3.<span class="built_in">__index</span> = &#123;</span><br><span class="line">    name = <span class="string">&quot;table3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(table1.name) <span class="comment">--[[ Output: table3]]</span></span><br></pre></td></tr></table></figure><p>从上面的逻辑结构来看，就相当于实现了面向对象中的继承关系，对于面向对象的知识，会在后续的章节中进行细致讲解。</p><blockquote><p>Tips：这里的 <code>metaTable.__index = &#123;&#125;</code> 用法，也可以指向元表本身，即 <code>metaTable.__index = metaTable</code> ，即在 metaTable 中添加变量。</p></blockquote><p>而 <code>__newindex</code> 与之相对，在对 table 进行赋值的时候，如果该表当中没有对应的变量，就是修改元表中 <code>__newindex</code> 指向的表中的变量。</p><h1 id="七-面向对象🍓🍓"><a class="header-anchor" href="#七-面向对象🍓🍓">¶</a>七、面向对象🍓🍓</h1><h2 id="7-1-封装🍉🍉"><a class="header-anchor" href="#7-1-封装🍉🍉">¶</a>7.1 封装🍉🍉</h2><p>在 Lua 语言中，面向对象和类的实现，其实都是基于 “table” 的特性来展开的，应用到元表的相关内容。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> Object = &#123;&#125;</span><br><span class="line">Object.id = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:printId</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.id)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- : 会默认传入第一个参数self.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:new</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> obj = &#123;&#125;          <span class="comment">-- 创建一个新对象，这个表是空的</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>) <span class="comment">-- 将obj的元表设置为self</span></span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span>     <span class="comment">-- 将self的元表设置为self，这样self就可以访问自己的属性了</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> obj = Object:new()</span><br><span class="line">obj:printId() <span class="comment">--[[ Output: 1]]</span></span><br><span class="line"><span class="comment">-- : 会默认传入第一个参数self.</span></span><br><span class="line"></span><br><span class="line">obj.id = <span class="number">2</span></span><br><span class="line">obj:printId() <span class="comment">--[[ Output: 2]]</span></span><br><span class="line">Object:printId() <span class="comment">--[[ Output: 1]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据 <code>__index</code> 的知识，当我们在创建一个新的表对象 “obj” 的时候，里面是不包含变量 “id” 的，我们调用的时候其实是访问表 “Object” 的 “id” ，但是，当我们给 “obj” 赋值的时候，因为没有使用 <code>__newindex</code> ，所以会在 “obj” 下创建新的变量 “id” ，而不是修改 “Object” 的 “id” 。这样就能通过 <code>__index</code> 访问新的表对象中不存在的变量，同时给新表赋值的时候，有保护会影响到元表的内容。通过这种方式，实现了封装</p><h2 id="7-2-继承🍇🍇"><a class="header-anchor" href="#7-2-继承🍇🍇">¶</a>7.2 继承🍇🍇</h2><p>在 Lua 语法中，并没有 “class” ，所有类似于 “class” 的功能都是基于 table 来实现的。因此，需要构造特定的个方法来实现继承。</p><p>首先，通过使用 “_G” 表，创建一个全局的表变量，然后再根据元表的相关知识去实现继承关系。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> Object = &#123;</span><br><span class="line">    id = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:new</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> obj = &#123;&#125;          <span class="comment">-- 创建一个新对象，这个表是空的</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>) <span class="comment">-- 将obj的元表设置为self</span></span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span>     <span class="comment">-- 将self的元表设置为self，这样self就可以访问自己的属性了</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:subClass</span><span class="params">(className)</span></span></span><br><span class="line">    <span class="built_in">_G</span>[className] = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> obj = <span class="built_in">_G</span>[className]</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Object:subClass(<span class="string">&quot;Person&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> person = Person:new()</span><br></pre></td></tr></table></figure><p>这里为什么需要用到 “_G” 表呢？其实，目的是为了再 “_G” 表中，创建一个 “Person” 表的原型，而该原型的元表是 “Object” ，相当于通过原型 “Person” 表创建的新的表对象，都是继承自 “Object” 表的。首先，<code>Object:subClass(&quot;Person&quot;)</code> 代码在 “_G” 中创建一个名字为 “Person” 的表，然后执行 <code>Person:new()</code> ；但是由于 “Person” 中没有 “new()” 的方法，并且在函数 <code>Object:subClass(className)</code> 中指明 “Person” 的元表是 “Object” ，并且 “Object” 的 “__index” 指向的是本身，因此执行 <code>Person:new()</code> 其实就是执行 <code>Object:new()</code> ，而在 <code>Object:new()</code> 中，就会实际创建一个继承自“Object” 表的 “Person” 的对象。</p><blockquote><p>Tips：可以进行类比，“Object” 是父类， “Person” 是子类， <code>local person = Person:new()</code> 是<strong>创建子类的对象</strong>。</p></blockquote><h2 id="7-3-多态🫐🫐"><a class="header-anchor" href="#7-3-多态🫐🫐">¶</a>7.3 多态🫐🫐</h2><p>具有相同的行为，但是具有不同的表象；或者具有相同的方法，但是有不同的逻辑，这就是多态的表现。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> Object = &#123;</span><br><span class="line">    id = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:new</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> obj = &#123;&#125;</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:subClass</span><span class="params">(className)</span></span></span><br><span class="line">    <span class="built_in">_G</span>[className] = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> obj = <span class="built_in">_G</span>[className]</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Object:subClass(<span class="string">&quot;GameObject&quot;</span>)</span><br><span class="line">GameObject.px = <span class="number">0</span></span><br><span class="line">GameObject.py = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameObject:Move</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.px = <span class="built_in">self</span>.px + <span class="number">1</span></span><br><span class="line">    <span class="built_in">self</span>.py = <span class="built_in">self</span>.py + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">self</span>.px, <span class="built_in">self</span>.py)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">GameObject:subClass(<span class="string">&quot;Player&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> p1 = Player:new()</span><br><span class="line">p1:Move()</span><br></pre></td></tr></table></figure><p>调用上面的代码会发现，子类 “Player” 执行的其实是父类 “GameObject” 的方法，因此，当需要实现多态的时候，就需要给 “Player” 创建同名的新方法。但是，在 C# 中，父类和子类的同名方法是可以进行区分的，通过 “base” 在多态子类中访问父类的方法，而在 Lua 语言中，并没有 “base” 的用法，因此需要自己去实现。</p><p>根据上面的需求，修改 <code>Object:subClass(className)</code> 的代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:subClass</span><span class="params">(className)</span></span></span><br><span class="line">    <span class="built_in">_G</span>[className] = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> obj = <span class="built_in">_G</span>[className]</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    obj.base = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>并且给 “Player” 添加同名方法，这时候就能通过 “self” 去调用父类的方法，并且还能添加新的逻辑，即：保留父类方法的情况下，在实现新的逻辑。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player:Move</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.base:Move()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Player Move&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>但是，上面的使用会出现一个严重的问题</strong>，代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> p1 = Player:new()</span><br><span class="line">p1:Move()</span><br><span class="line"><span class="keyword">local</span> p2 = Player:new()</span><br><span class="line">p2:Move()</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">Player Move</span></span><br><span class="line"><span class="comment">22</span></span><br><span class="line"><span class="comment">Player Move</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当多次调用的时候，不同表的状态时公用的，其实问题出在 <code>self.base:Move()</code> 上面，我们在这样调用父类的方法时，相当于将父类作为第一个参数传入的函数中去，其实本质上执行 <code>self.base:Move()</code> 函数修改的是父类的状态，而不是子类的状态，因此需要使用 <code>self.base.Move(self)</code> 将子类传入到函数中去，这样子类执行各自的函数时，虽然会调用父类的方法，但是修改的状态却是个自本身的，这样就实现了多态。</p><p>代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GameObject:subClass(<span class="string">&quot;Player&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player:Move</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.base.Move(<span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Player Move&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> p1 = Player:new()</span><br><span class="line"><span class="keyword">local</span> p2 = Player:new()</span><br><span class="line">p1:Move()</span><br><span class="line">p2:Move()</span><br><span class="line"><span class="comment">--[[ Output:</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">Player Move</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">Player Move</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h2 id="7-4-总结"><a class="header-anchor" href="#7-4-总结">¶</a>7.4 总结</h2><p>面向对象的实现语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Object = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例化方法，主要是给空对象设置元表，以及元表的__index属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:new</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> obj = &#123;&#125;</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子类继承方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:subClass</span><span class="params">(className)</span></span></span><br><span class="line">    <span class="built_in">_G</span>[className] = &#123;&#125;</span><br><span class="line">    <span class="keyword">local</span> obj = <span class="built_in">_G</span>[className]</span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    obj.base = <span class="built_in">self</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="八-lua自带库"><a class="header-anchor" href="#八-lua自带库">¶</a>八、Lua自带库</h1><h2 id="8-1-时间"><a class="header-anchor" href="#8-1-时间">¶</a>8.1 时间</h2><table><thead><tr><th>代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>os.time()</code></td><td style="text-align:left">当前时间的距离1970.1.1.08:00时间的秒数</td></tr><tr><td>``os.time({year=2016,month=11,day=2g</td><td style="text-align:left">给定时间的距离1970.1.1.08:00时间的秒数</td></tr><tr><td><code>os.date()</code></td><td style="text-align:left">把时间戳转化成可显示的时间字符串</td></tr></tbody></table><blockquote><p>任何一个时区，在相同的时间，同时调用os.time() 返回的结果都是一样的</p></blockquote><h2 id="8-2-数学运算"><a class="header-anchor" href="#8-2-数学运算">¶</a>8.2 数学运算</h2><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td><code>math.abs(a)</code></td><td>绝对值</td></tr><tr><td><code>math.deg(a)</code></td><td>弧度转角度</td></tr><tr><td><code>math.sin(a)</code></td><td>三角函数</td></tr><tr><td><code>math.floor(a)</code></td><td>向下取整</td></tr><tr><td><code>math.ceil(a)</code></td><td>向上取整</td></tr><tr><td><code>math.max(a,b)</code></td><td>取最大值</td></tr><tr><td><code>math.min(a,b)</code></td><td>取最小值</td></tr><tr><td><code>math.modf(1.45)</code></td><td>分别返回浮点数的整数部分和小数部分</td></tr><tr><td><code>math.pow(a,b)</code></td><td>幂运算</td></tr><tr><td><code>math.random()</code></td><td>随机数</td></tr><tr><td><code>math.sqrt()</code></td><td>开方</td></tr></tbody></table><h1 id="九-垃圾回收"><a class="header-anchor" href="#九-垃圾回收">¶</a>九、垃圾回收</h1><p>Lua 提供了以下函数**collectgarbage ([opt [, arg]])**用来控制自动内存管理:</p><ul><li><strong>collectgarbage(“collect”):</strong> 做一次完整的垃圾收集循环。通过参数 opt 它提供了一组不同的功能：</li><li><strong>collectgarbage(“count”):</strong> 以 K 字节数为单位返回 Lua 使用的总内存数。 这个值有小数部分，所以只需要乘上 1024 就能得到 Lua 使用的准确字节数（除非溢出）。</li><li><strong>collectgarbage(“restart”):</strong> 重启垃圾收集器的自动运行。</li><li><strong>collectgarbage(“setpause”):</strong> 将 arg 设为收集器的 间歇率。 返回 间歇率 的前一个值。</li><li><strong>collectgarbage(“setstepmul”):</strong> 返回 步进倍率 的前一个值。</li><li><strong>collectgarbage(“step”):</strong> 单步运行垃圾收集器。 步长&quot;大小&quot;由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非 0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。 如果收集器结束一个循环将返回 true 。</li><li><strong>collectgarbage(“stop”):</strong> 停止垃圾收集器的运行。 在调用重启前，收集器只会因显式的调用运行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Unity3D基础 </category>
          
          <category> Lua </category>
          
          <category> Lua基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有限状态机【Unity】</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/06.%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/06.%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是有限状态机"><a class="header-anchor" href="#什么是有限状态机">¶</a>什么是有限状态机</h1><p>有限状态机(Finite state machine)是非常重要的一个概念，是一种用来进行对象行为建模的工具，其作用主要是<strong>描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件</strong>。在计算机科学中，有限状态机被广泛用于建模应用行为、硬件电路系统设计、软件工程，编译器、网络协议、和计算与语言的研究。其实，有限状态机的概念和应用遍布生活中的每一个角落。</p><p>有限状态机有两个主要特征：状态是有限的，同一时刻只能存在一种状态；一般归为4个要素，即：现态、条件、动作、次态。“现态”和“条件”是原因，“动作”和“次态”是结果。详解如下：</p><ol><li><p>现态：是指当前所处的状态；</p></li><li><p>条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移；</p></li><li><p>动作：条件满足后执行的动作。</p><p>动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态；</p></li><li><p>次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。</p></li></ol><h1 id="unity中实现fsm"><a class="header-anchor" href="#unity中实现fsm">¶</a>Unity中实现FSM</h1><h2 id="1-框架结构"><a class="header-anchor" href="#1-框架结构">¶</a>1 框架结构</h2><p><img src="https://imagehost.yuilexi.cn/Blog/Post/02.Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/06.%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.md/FSM%E6%A1%86%E5%9B%BE.svg" alt="FSM框图"></p><h2 id="2-代码结构"><a class="header-anchor" href="#2-代码结构">¶</a>2 代码结构</h2><p>首先，定义一个接口：<code>IState</code>，该结构声明三个状态的基础方法：进入状态<code>OnEnterState</code>、更新状态<code>OnUpdateState</code>、退出状态<code>OnExitState</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 进入状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnterState</span>()</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnUpdateState</span>()</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 退出状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnExitState</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有状态都要继承该接口，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">State1</span> : <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnterState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnUpdateState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnExitState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">State2</span> : <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnterState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnUpdateState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnExitState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 代码;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><p>然后构造一个FSM的抽象父类，需要继承自<code>MonoBehaviour</code>，里面包含<strong>当前状态字段</strong>、<strong>状态切换方法</strong>，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FSM</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">protected</span> IState _currentState;</span><br><span class="line">    <span class="keyword">protected</span> Dictionary&lt;T, IState&gt; _stateDic = <span class="keyword">new</span> Dictionary&lt;T, IState&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化状态机</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化状态机的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新状态机</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_currentState != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _currentState.OnUpdateState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 状态切换</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stateType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;Exception&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">TransitionState</span>(<span class="params">T stateType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_currentState != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _currentState.OnExitState();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _currentState = _stateDic.TryGetValue(stateType);</span><br><span class="line">        <span class="keyword">if</span> (_currentState == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;状态机中没有找到对应的状态：<span class="subst">&#123;stateType&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _currentState.OnEnterState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的FSM类使用了泛型，泛型参数是不同对象的状态枚举类型，例如：玩家有Idle、Move、Attack等状态，将这些状态定义为枚举变量，即为FSM抽象父类的泛型参数。使用抽象泛型的目的是为了，是不同的对象可以有不同的状态机来控制，不同对象的状态条件不同，但是状态的切换和更新功能是一致的，</p><p>FSM类里面有两个字段：</p><ul><li><code>_currentState</code> ：存放当前对象的当前状态；</li><li><code>_stateDic</code>：存放当前对象的所有状态类型，并且以状态枚举值作为字典的键，以状态对象作为字典的值。</li></ul><p>FSM还要构造出抽象的 <code>Awake()</code> 与 <code>Start()</code> 函数，其目的是为继承的子类去初始化状态机，特别向字典中添加所有的状态类型。</p><p>FSM里面还包括两个虚函数 <code>Update()</code> 和 <code>TransitionState(T stateType)</code> ，前者是状态更新函数，后者是状态切换函数，使用虚函数，便于子类进行多态扩展。</p><h2 id="3-具体实现"><a class="header-anchor" href="#3-具体实现">¶</a>3 具体实现</h2><p>根据上述提供的状态接口和FSM父类，实现一个具体对象的状态：</p><p>1.玩家的状态枚举：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 玩家的状态枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> PlayerStateEnum</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>, <span class="comment">// 无状态</span></span><br><span class="line">    Idle = <span class="number">1</span>, <span class="comment">// 空闲</span></span><br><span class="line">    Move = <span class="number">2</span>, <span class="comment">// 移动状态</span></span><br><span class="line">    Attack = <span class="number">3</span>, <span class="comment">// 攻击状态</span></span><br><span class="line">    Hurt = <span class="number">4</span>, <span class="comment">// 受伤状态</span></span><br><span class="line">    Dead = <span class="number">5</span>, <span class="comment">// 死亡状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.玩家的所有状态：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 空闲状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdleState</span> : <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> PlayerFSM _fsm; <span class="comment">// 对该状态对象所在状态机对象的引用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdleState</span>(<span class="params">PlayerFSM fsm</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _fsm = fsm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdleState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;创建Idle状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEnterState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;进入Idle状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnUpdateState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnExitState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;退出Idle状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻击状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AttackState</span> : <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> PlayerFSM _fsm;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttackState</span>(<span class="params">PlayerFSM fsm</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _fsm = fsm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEnterState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;进入Attack状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnUpdateState</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnExitState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;退出Attack状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他状态......</span></span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><p>3.玩家的FSM</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem; <span class="comment">// 引入Unity的InputSystem命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerFSM</span> : <span class="title">FSM</span>&lt;<span class="title">PlayerStateEnum</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">private</span> PlayerProperty _playerProperty; <span class="comment">// 玩家属性</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 _moveDirection; <span class="comment">// 移动方向</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 MoveDirection =&gt; _moveDirection; <span class="comment">// 移动方向</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _stateDic.Add(PlayerStateEnum.Idle, <span class="keyword">new</span> IdleState(<span class="keyword">this</span>));</span><br><span class="line">        _stateDic.Add(PlayerStateEnum.Move, <span class="keyword">new</span> MoveState(<span class="keyword">this</span>));</span><br><span class="line">        _stateDic.Add(PlayerStateEnum.Attack, <span class="keyword">new</span> AttackState(<span class="keyword">this</span>));</span><br><span class="line">        _stateDic.Add(PlayerStateEnum.Hurt, <span class="keyword">new</span> HurtState(<span class="keyword">this</span>));</span><br><span class="line">        _stateDic.Add(PlayerStateEnum.Dead, <span class="keyword">new</span> DeadState(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        TransitionState(PlayerStateEnum.Idle);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 玩家移动状态切换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnMove</span>(<span class="params">InputAction.CallbackContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _moveDirection = context.ReadValue&lt;Vector2&gt;();</span><br><span class="line">        <span class="keyword">if</span> (context.performed)</span><br><span class="line">        &#123;</span><br><span class="line">            TransitionState(PlayerStateEnum.Move);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (context.canceled)</span><br><span class="line">        &#123;</span><br><span class="line">            TransitionState(PlayerStateEnum.Idle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnAttack</span>(<span class="params">InputAction.CallbackContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.performed)</span><br><span class="line">        &#123;</span><br><span class="line">            TransitionState(PlayerStateEnum.Attack);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (context.canceled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_moveDirection != Vector2.zero)</span><br><span class="line">            &#123;</span><br><span class="line">                TransitionState(PlayerStateEnum.Move);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                TransitionState(PlayerStateEnum.Idle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnHurt</span>(<span class="params">InputAction.CallbackContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.performed)</span><br><span class="line">        &#123;</span><br><span class="line">            TransitionState(PlayerStateEnum.Hurt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展"><a class="header-anchor" href="#4-扩展">¶</a>4 扩展</h2><p>根据上面的结构，就可以在具体的状态中，调整玩家的各项属性和行为，建议将玩家的属性和各种组件放在FSM中，便于不用的状态进行引用修改。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> 经典功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> Csharp </tag>
            
            <tag> 有限状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)DOTS基础—1. 认识DOTS</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/DOTS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/(%E4%B8%80)DOTS%E4%BB%8B%E7%BB%8D.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/DOTS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/(%E4%B8%80)DOTS%E4%BB%8B%E7%BB%8D.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><h1 id="dots架构"><a class="header-anchor" href="#dots架构">¶</a>DOTS架构</h1><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>Unity中，<code>DOTS</code>代表的是&quot;<strong>Data-Oriented Technology Stack</strong>&quot;，官方中文名字是**多线程面向数据的技术堆栈 **，是一种用于游戏开发的技术堆栈。DOTS的目标是优化游戏引擎的性能，使开发者能够更好地利用现代硬件的多核处理能力和内存体系结构。</p><p>DOTS包含了一系列的工具、框架和技术，其中最重要的包括：</p><ol><li><strong>Entity Component System (ECS)</strong>：这是DOTS的核心，它是一种用于构建游戏对象和组件的新的架构。ECS将游戏对象拆分为实体（Entities）和组件（Components），并通过系统（Systems）来处理数据和逻辑。这种数据导向的方式可以更好地利用多核处理器，提高性能。</li><li><strong>Burst Compiler</strong>：Burst Compiler是一种使用LLVM从IL/.NET字节码转换为高度优化的本机代码的编译器，可以生成高度优化的本地机器码，提高代码的执行效率。它能通过编译本地代码，极大提高代码的运行效率 10-1000倍不等，当我们在加入Jobsystem进行并行计算的时候，运行效率会进一步提升。</li><li><strong>Jobs System</strong>：Jobs System允许开发者编写高性能的并行代码，能够更有效地利用多核处理器。通过JobSystem让我们需要大量计算的程序，以并行的方式，放入多个子线程中进行计算，这样能大大提升为我们的计算效率，其实也就是提升性能！</li><li>Unity Physics：Unity Physics是一个用于模拟物理行为的引擎，可以与ECS结合使用，实现高性能的物理模拟。</li><li>Unity Collections：这是一组优化过的集合类型，用于在ECS架构中存储和处理数据。</li></ol><p>DOTS的引入旨在解决传统游戏引擎在大规模游戏中性能问题的挑战，但也需要开发者学习新的编程模式和工具。虽然DOTS在性能方面有很多优势，但在选择是否使用时，开发者需要权衡其带来的学习成本和适用性。</p><p>在Unity发布的 <code>2022LTS</code> 版本中，全面支持 <code>ECS</code> 架构，并且实现对 DOTS 的支持。</p><h2 id="dots应用"><a class="header-anchor" href="#dots应用">¶</a>DOTS应用</h2><ul><li>具有大世界流式加载的游戏</li><li>具有复杂的大规模模拟的游戏</li><li>具有多种网络类型的多人连线游戏</li><li>具有需要客户端模拟预测的网络游戏，如射击游戏</li></ul><h1 id="ecs架构"><a class="header-anchor" href="#ecs架构">¶</a>ECS架构</h1><h2 id="什么是ecs？"><a class="header-anchor" href="#什么是ecs？">¶</a>什么是ECS？</h2><p>说起 ECS 架构（面向数据编程），就不得不提到传统的面向对象编程（Object-Oriented Programming，简称OOP）。</p><h3 id="面向对象编程"><a class="header-anchor" href="#面向对象编程">¶</a>面向对象编程</h3><p>面向对象编程（Object-Oriented Programming，简称OOP）是一种编程范式，它的核心思想是通过将<strong>数据</strong>和<strong>操作数据的方法</strong>组合成对象，以模拟现实世界的实体和交互。OOP强调数据和方法的封装、继承和多态性，旨在提高代码的可维护性、可扩展性和重用性。</p><img src="https://imageshack.yuilexi.cn/(%E4%B8%80)DOTS%E5%9F%BA%E7%A1%80%E2%80%941-%E8%AE%A4%E8%AF%86DOTSOOP%E7%BB%93%E6%9E%84.svg" alt="OOP结构" style="zoom:50%" /><p>在Unity中，使用传统的面向对象编程技术，是依赖<strong>多重继承</strong>的方式实现的，虽然Unity中有<strong>组件系统</strong>，但是本质上，每一个对象都是<strong>数据和方法</strong>的集合体。</p><img src="https://imageshack.yuilexi.cn/(%E4%B8%80)DOTS%E5%9F%BA%E7%A1%80%E2%80%941-%E8%AE%A4%E8%AF%86DOTSOOP%E7%9A%84%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF.svg" alt="OOP的多重继承" style="zoom:50%" /><blockquote><p>总结：面向数据编程，就是将<strong>数据</strong>和<strong>方法</strong>绑定在一起，形成一个集合体，称之为<strong>对象</strong>。其功能的实现通过封装、<strong>多重继承</strong>、多态的手段实现。</p></blockquote><h3 id="面向数据编程-ecs"><a class="header-anchor" href="#面向数据编程-ecs">¶</a>面向数据编程——ECS</h3><p>ECS即实体（Entity），组件（Component），系统（System），其中<strong>Entity，Component皆为纯数据向的类</strong>，<strong>System负责操控它们</strong>，这种模式会一定程度上优化我们的代码速度。</p><ul><li>Entities：游戏中的事物，但在ECS中它只作为一个Id，用于表示对应的对象。</li><li>Components：与Entity相关的数据，但是这些数据应该由Component本身而不是Entity来组织。（这种组织上的差异正是面向对象和面向数据的设计之间的关键差异之一）。</li><li>Systems：Systems是把Components的数据从当前状态转换为下一个状态的逻辑，但System本身应当是无状态的。例如，一个system可能会通过他们的速度乘以从前一帧到这一帧的时间间隔来更新所有的移动中的entities的位置。</li></ul><h2 id="ecs为什么快？"><a class="header-anchor" href="#ecs为什么快？">¶</a>ECS为什么快？</h2><p>首先明确几个知识点：</p><ol><li>CPU与Memory的速度发展不均衡以及带宽限制<ol><li>CPU处理数据的速度非常快，即CPU的处理速度远高于内存的读写速度，所以需要设计能跟上CPU的高速缓存区，来尽量保证CPU有事干，同时也提高了数据访问效率。</li><li>CPU自身有三级缓存，俗称高速缓存，CPU访问第一级（L1）缓存最快，容量最小，第三级（L3）缓存最慢，容量最大。</li><li>常说的内存是指CPU拿取数据的起源点，CPU访问内存所需的时钟周期，<strong>远大于</strong>访问高速缓存所需的时钟周期。</li><li>CPU操作数据会先从一，二，三级缓存中取得数据，速度非常快，尤其在一级缓存处速率基本可以满足CPU的需求（即不让CPU等待数据），但是有些情况下我们请求的数据不在这三级缓存中（即 <code>Cache Miss</code> ），就需要寻址到内存中的数据（<strong>包含这个数据的一整块数据都将被存入缓存</strong>），并且把目标数据放到高速缓存中，提高下一次的访问速度（因为这一次调用的数据块往往在不久的将来还会用到）。</li><li>因此，CPU指令跳转的次数越少，运算速度越快。最常见的例子就是在数据量小的情况下遍历数组会比遍历List快上很多，因为数组是有序的，而列表则是分散的，无序的。</li></ol></li><li>摩尔定律的延续和现代CPU工艺的设计<ol><li>越来越好的工艺</li><li>越来越多的核</li><li>分工越来越细的处理单元和存储</li><li>SIMD/SIMT</li></ol></li></ol><h3 id="ecs的数据组织与使用形式"><a class="header-anchor" href="#ecs的数据组织与使用形式">¶</a>ECS的数据组织与使用形式</h3><p>在传统模式中，假设想要移动场景中的一个物体，那么我们会修改它的 <code>Position</code> ，但是使用的时候整个 <code>Transform</code> 都会被加到缓存当中，而 <code>Transform</code> 中有很多我们不需要的属性占用了很大的缓存空间，所以就造成了严重的内存浪费。</p><p>而ECS架构在执行逻辑时，只会操作需要操作的数据：System在操作数据的时候只会收集它关心的Component数据，CPU运行时就会将这一整块内存装入高速缓存中，这样就减少了<code>Cache Miss</code>次数，增加了缓存命中率，整体上提高了程序效率。</p><blockquote><p>ECS是数据组件化的，需要哪些数据，就声明哪些数据，不会造成上面那样严重的内存浪费！</p></blockquote><h2 id="ecs有什么优势"><a class="header-anchor" href="#ecs有什么优势">¶</a>ECS有什么优势</h2><p>对比传统的面向对象编程，ECS模式无疑更加适合现代CPU架构，因为它可以做到高效的处理数据，而不用把多余的数据字段存入宝贵的缓存，从而导致多次 <code>Cache Miss</code> 。 举个例子就是传统模式下我们操作Unity对象的Position属性，它会把GameObject所有相关数据都加入缓存，浪费了宝贵的缓存空间。 而如果在ECS模式下，将只会把Position属性集放入内存，节省了缓存空间，也一定程度上减少了Cache Miss，即常说的<code>提高缓存命中率</code>。</p><h1 id="job-system"><a class="header-anchor" href="#job-system">¶</a>Job System</h1><h2 id="什么是job-system？"><a class="header-anchor" href="#什么是job-system？">¶</a>什么是Job System？</h2><p>Job System （作业系统） 可以理解为多线程管理系统。通过Job System就可以编写与Unity其他部件交互的多线程代码，同时让编写正确的多线程代码变得更容易。编写多线程代码可以提供更好的性能表现。这包括极大的提升提升和手机上更久的续航。</p><p>Job System的一个非常关键的方面是它可以融入Unity内部的原生Job System。这使得用户的代码可以和Unity共享worker threads。这种合作避免了创建更多线程，因为这可能会造成对于CPU资源的争抢。</p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> DOTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOTS </tag>
            
            <tag> Unity3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/00_Global/%E6%A8%A1%E6%9D%BF.html"/>
      <url>/00_Global/%E6%A8%A1%E6%9D%BF.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">名称</th><th style="text-align:center">状体</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">title</td><td style="text-align:center"><strong>【必需】</strong></td><td>文章标题</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">date</td><td style="text-align:center"><strong>【必需】</strong></td><td>文章创建日期</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">updated</td><td style="text-align:center">【可选】</td><td>文章更新日期</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">tags</td><td style="text-align:center">【可选】</td><td>文章标签</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">categories</td><td style="text-align:center">【可选】</td><td>文章分类</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">keywords</td><td style="text-align:center">【可选】</td><td>文章关键字</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">description</td><td style="text-align:center">【可选】</td><td>文章描述</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">top_img</td><td style="text-align:center">【可选】</td><td>文章顶部图片</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">cover</td><td style="text-align:center">【可选】</td><td>文章缩略图(可设为false/图片地址/留空)</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">comments</td><td style="text-align:center">【可选】</td><td>显示文章评论模块(默认true)</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">toc</td><td style="text-align:center">【可选】</td><td>显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">toc_number</td><td style="text-align:center">【可选】</td><td>显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">toc_style_simple</td><td style="text-align:center">【可选】</td><td>显示 toc 简洁模式</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">copyright</td><td style="text-align:center">【可选】</td><td>显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">copyright_author</td><td style="text-align:center">【可选】</td><td>文章版权模块的文章作者</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">copyright_author_href</td><td style="text-align:center">【可选】</td><td>文章版权模块的文章作者链接</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">copyright_url</td><td style="text-align:center">【可选】</td><td>文章版权模块的文章连结链接</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">copyright_info</td><td style="text-align:center">【可选】</td><td>文章版权模块的版权声明文字</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">mathjax</td><td style="text-align:center">【可选】</td><td>显示mathjax(默认 false)</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">katex</td><td style="text-align:center">【可选】</td><td>显示katex(默认 false)</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">aplayer</td><td style="text-align:center">【可选】</td><td>在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">highlight_shrink</td><td style="text-align:center">【可选】</td><td>配置代码框是否展开(true/false)</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">aside</td><td style="text-align:center">【可选】</td><td>显示侧边栏 (默认true)</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一节 前导课【DOTS】</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/03.DOST%E6%A1%86%E6%9E%B6%E5%85%A8%E5%BA%94%E7%94%A8/01.%E5%89%8D%E5%AF%BC%E8%AF%BE%E3%80%90DOTS%E3%80%91.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/03.DOST%E6%A1%86%E6%9E%B6%E5%85%A8%E5%BA%94%E7%94%A8/01.%E5%89%8D%E5%AF%BC%E8%AF%BE%E3%80%90DOTS%E3%80%91.html</url>
      
        <content type="html"><![CDATA[<h1 id="前导课"><a class="header-anchor" href="#前导课">¶</a>前导课</h1><h1 id="一-什么是dots"><a class="header-anchor" href="#一-什么是dots">¶</a>一、什么是DOTS</h1><p>DOTS的全称是 Data-Oriented-Tech-Stack ，官方的中文释义为：<strong>多线程式数据导向型技术堆栈</strong>。从名字就能得到两个关键性信息：多线程和面向数据。对于多线程，想必已经耳熟能详，这是现代多核 CPU 架构的结果；但是，什么是面向数据？（🤔一头雾水🤔），它和面向对象又有什么区别呢？</p><h2 id="1-1-dots的组成部分"><a class="header-anchor" href="#1-1-dots的组成部分">¶</a>1.1 DOTS的组成部分</h2><p>DOTS并不是一个独立的框架，在Unity中，DOTS是由一下几个核心组件构成的，分别是：</p><ol><li>ECS架构：全称是<strong>Entity-Component-System</strong>，是一个代码框架，只需遵循该框架代码的编写方式，即可写出高性能的代码</li><li>Job System</li><li>Burst编译器</li></ol><h2 id="1-2-ecs概要"><a class="header-anchor" href="#1-2-ecs概要">¶</a>1.2 ECS概要</h2><h2 id="1-3-jobs概要"><a class="header-anchor" href="#1-3-jobs概要">¶</a>1.3 Jobs概要</h2><h2 id="1-4-burst概要"><a class="header-anchor" href="#1-4-burst概要">¶</a>1.4 Burst概要</h2><h1 id="二-dots的优点"><a class="header-anchor" href="#二-dots的优点">¶</a>二、DOTS的优点</h1><h1 id="三-如何学习和使用dots"><a class="header-anchor" href="#三-如何学习和使用dots">¶</a>三、如何学习和使用DOTS</h1>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> DOTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> DOTS </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础语法</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/01.Rust/01.Rust%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/01.Rust/01.Rust%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> Rust基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Rust </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Web开发 </tag>
            
            <tag> 操作系统开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code显示Unity依赖项</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%BE%91%E5%99%A8/VSCode%E6%98%BE%E7%A4%BA%E4%BE%9D%E8%B5%96%E9%A1%B9.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%BE%91%E5%99%A8/VSCode%E6%98%BE%E7%A4%BA%E4%BE%9D%E8%B5%96%E9%A1%B9.html</url>
      
        <content type="html"><![CDATA[<p>使用<strong>Visual Studio Code</strong>来作为Unity的脚本编辑器时，可以极大的提升开发效率。但是，有时我们希望查看依赖库中的函数，经常定位不进去，报无法导航到插入点下面的符号。</p><p>这是因为，<strong>VS Code</strong>的工程代码没有把依赖库的代码导入进来，所以定位不到函数所在的位置。</p><p>解决办法：<code>Edit-&gt; Preferences-&gt;External Tools</code>，把<code>Registry packages</code>勾选上，然后点击<code>Regenerate project files</code>。就会把我们从<code>Pakage manager</code>安装的代码都导入<strong>VS Code</strong>了。如果你的依赖库有从其他途径导入的，你要相应的勾选上选项。</p><img src="https://imageshack.yuilexi.cn/Unity3D/%E7%BC%96%E8%BE%91%E5%99%A8/VisualStudioCode%E6%98%BE%E7%A4%BAUnity%E4%BE%9D%E8%B5%96%E9%A1%B9/%E4%BE%9D%E8%B5%96%E9%A1%B9%E8%AE%BE%E7%BD%AE.png" alt="依赖项设置" style="zoom:50%" />]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 依赖项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏数据持久化系统</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%B3%BB%E7%BB%9F.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%B3%BB%E7%BB%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>此文章主要是介绍一种适用于游戏的简单<strong>数据持久化</strong>框架，以方便游戏开发和使用。</p><h1 id="一-需求分析"><a class="header-anchor" href="#一-需求分析">¶</a>一、需求分析</h1><p><strong>游戏数据持久化</strong>是一个游戏必不可少的模块，其中涉及很多的核心功能。首先，就是要对该模块进行需求分析。</p><ol><li>该框架能够将游戏中的对象提取成对应的数据，并且这些数据可以序列化。</li><li>该框架能将序列化的数据，存储到本地磁盘中，实现<strong>数据的可持续化</strong>。</li><li>该框架能够自动识别游戏存档(<code>Game Archive</code>)中的相关文件，包括数据文件和配置文件，并且能加载到游戏中</li><li>该框架能够根据所选的游戏存档，从数据文件中加载数据，并反序列化为游戏对象的数据。</li></ol><p>根据上述的需求，能够将该框架分为三个模块：</p><ol><li>游戏存档系统：能够检测、识别、加载对应的游戏存档；</li><li>游戏数据系统：能够将所有需要存储的游戏对象转化为<strong>可序列化的游戏数据</strong>，也能将<strong>可序列化的游戏数据</strong>加载为对应的游戏对象；</li><li>文件操作系统：能够将<strong>可序列化的游戏数据</strong>序列化，并且写入对应的存档文件夹中，同时也能从对应的存档文件夹中读取数据，并<strong>反序列化</strong>为游戏数据。</li></ol><blockquote><p>一个完整的游戏存档应该包括：游戏数据文件和游戏配置文件，并且可扩展游戏日志文件和控制台调试信息文件。</p></blockquote><p><img src="https://imageshack.yuilexi.cn/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%B3%BB%E7%BB%9F/%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%B3%BB%E7%BB%9F.svg" alt="游戏数据持久化系统"></p><h1 id="二-框架介绍"><a class="header-anchor" href="#二-框架介绍">¶</a>二、框架介绍</h1><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="环境配置"><a class="header-anchor" href="#环境配置">¶</a>环境配置</h2><ol><li>游戏引擎：Unity</li><li>Unity 版本：2022.3.0f1 LTS</li><li>代码编辑器：Visual Studio Code 和 Visual Studio Professional 2022</li><li>语言：C#</li></ol><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-7-17</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 功能框架 </category>
          
          <category> Csharp </category>
          
          <category> 游戏数据持久化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 功能框架 </tag>
            
            <tag> 游戏数据持久化 </tag>
            
            <tag> 游戏存档 </tag>
            
            <tag> 游戏数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广度优先算法-BFS</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>寻路算法是计算机科学中重要的算法之一，它被广泛应用于各种领域，包括游戏开发、机器人导航、路线规划等。寻路算法的目标是在给定的地图或图形结构中找到从起点到目标的最短路径。无论是追求游戏胜利，还是实现高效的路径规划，寻路算法都将成为你最可靠的导航助手。</p><p>特点：</p><ol><li>多样化的算法选择：寻路算法提供了多种不同的解决方案，包括广度优先搜索、迪杰斯特拉算法、A*算法等。每种算法都有其独特的特点和适用场景，你可以根据具体需求选择最合适的算法来解决问题。</li><li>快速、高效的路径计算：寻路算法通过智能的搜索策略，能够快速计算出最短路径。它们利用启发式信息、权重值和图形结构等因素，帮助你在最短的时间内找到目标位置。</li><li>可定制化的参数和设置：寻路算法允许你根据具体情况进行参数和设置的调整，以适应不同的需求。你可以调整地图的复杂度、路径优先级以及障碍物的影响等，来获得更符合期望的路径结果。</li><li>可视化展示与交互：寻路算法通常提供直观的可视化展示，让你清晰地看到算法是如何搜索和探索路径的过程。一些算法还支持交互操作，让你能够实时调整参数、添加障碍物，以及观察路径的变化。</li><li>广泛应用的实用性：寻路算法在游戏开发中广泛应用，能够实现 NPC 的导航、怪物追踪玩家等功能。此外，在实际生活中，它们也可以帮助规划最佳路线、优化运输路径、指导机器人移动等，提高效率和节省时间成本。</li></ol><blockquote><ul><li></li></ul></blockquote><h1 id="广度优先算法-bfs-介绍"><a class="header-anchor" href="#广度优先算法-bfs-介绍">¶</a>广度优先算法(BFS)介绍</h1><p>简介： 广度优先搜索（BFS）算法是一种经典的寻路算法。BFS 算法以一种系统的方式探索图形结构，并找到从起点到目标的最短路径。在游戏、路径规划和网络分析等领域，BFS 算法被广泛使用，它的简单直观性和可靠性使其成为一个强大的工具。</p><p>BFS 的基本思想是首先访问起始节点，然后依次访问与起始节点直接相邻的所有节点，接着访问与这些相邻节点相邻的节点，以此类推。换句话说，它按照距离起始节点的距离逐层进行搜索。</p><p>BFS 通常使用一个<strong>队列</strong>来辅助实现，通过将待访问节点加入队列尾部，再从队列头部取出节点进行访问。这种方式保证了节点的访问顺序是按照层级逐个展开的。</p><p>BFS 算法可以用于解决许多问题，如寻找图中两个节点之间的最短路径、查找图中的连通组件、生成最小生成树等。由于其特点是先广后深，因此 BFS 也常被用于无权图的最短路径搜索。</p><p><img src="https://imageshack.yuilexi.cn/Unity3D/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/BFS/DFS%E4%B8%8EBFS.gif" alt="DFS与BFS"></p><h1 id="unity-中算法实现"><a class="header-anchor" href="#unity-中算法实现">¶</a>Unity 中算法实现</h1><p>Unity 中有不同的瓦片，下面以矩形瓦片来构建。</p><h2 id="1-先构造对应的结点"><a class="header-anchor" href="#1-先构造对应的结点">¶</a>1 先构造对应的结点</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-7-9</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 经典功能实现 </category>
          
          <category> 寻路算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 脚本开发 </tag>
            
            <tag> 经典功能实现 </tag>
            
            <tag> 最短路径 </tag>
            
            <tag> 广度优先算法 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规则瓦片</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E5%BC%95%E6%93%8E/%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE/%E8%A7%84%E5%88%99%E7%93%A6%E7%89%87.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E5%BC%95%E6%93%8E/%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE/%E8%A7%84%E5%88%99%E7%93%A6%E7%89%87.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><h1 id="一-规则瓦片"><a class="header-anchor" href="#一-规则瓦片">¶</a>一、规则瓦片</h1><h2 id="1-1-什么是规则瓦片"><a class="header-anchor" href="#1-1-什么是规则瓦片">¶</a>1.1 什么是规则瓦片</h2><h2 id="1-2-规则瓦片的创建"><a class="header-anchor" href="#1-2-规则瓦片的创建">¶</a>1.2 规则瓦片的创建</h2><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE/%E8%A7%84%E5%88%99%E7%93%A6%E7%89%87/%E8%A7%84%E5%88%99%E7%93%A6%E7%89%87%E7%9A%84%E5%88%9B%E5%BB%BA.png" alt="规则瓦片的创建.png"></p><h2 id="1-3-规则瓦片详解"><a class="header-anchor" href="#1-3-规则瓦片详解">¶</a>1.3 规则瓦片详解</h2><h1 id="二-瓦片面积大小-单元格大小"><a class="header-anchor" href="#二-瓦片面积大小-单元格大小">¶</a>二、瓦片面积大小<code>&lt;=</code> 单元格大小</h1><blockquote><p>即：每个瓦片的像素点均在单个单元格内，不会超出单元格</p></blockquote><p>根据前面的计算，只考虑 <code>3*3</code> 的情况下，规则瓦片的所有情况一共有：256（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>）种 。</p><p>但是，规定<strong>瓦片面积大小<code>&lt;=</code> 单元格大小</strong>时，有些情况下，瓦片使用的图片是一样的，因此，在该情况下，需要： 种精灵图像。</p><p>再将旋转或者翻转考虑进去时，最少仅仅需要 <strong><code>15张</code></strong> 精灵贴图，就能满足 256 种不同的情况</p><h1 id="三-瓦片面积大小-单元格大小"><a class="header-anchor" href="#三-瓦片面积大小-单元格大小">¶</a>三、瓦片面积大小 <code>&gt;</code> 单元格大小</h1><blockquote><p>即：存在瓦片的像素点超出单个单元格，像素长宽大小大于单元格的长宽</p></blockquote><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-14</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Unity引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Unity引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/03.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E5%AD%A6%E4%B9%A0/01.%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6/1_HTML5/HTML5%E5%9F%BA%E7%A1%80.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/03.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E5%AD%A6%E4%B9%A0/01.%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6/1_HTML5/HTML5%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>此文章主要是介绍 HTML5 基础，包含 HTML5 的基本结构，标签，属性，以及一些常用的标签和属性的使用方法。</p><blockquote><p>快速到达</p></blockquote><h1 id="第一章-html-基础"><a class="header-anchor" href="#第一章-html-基础">¶</a>第一章 HTML 基础</h1><h2 id="1-1-html-的基本概念"><a class="header-anchor" href="#1-1-html-的基本概念">¶</a>1.1 HTML 的基本概念</h2><p>www（world wide web，万维网）是一种建立在 Internet 上的、全球性的、交互的、多平台的、分布式的信息资源网络。</p><p>WWW 有 3 个基本的组成部分，分别是：</p><ul><li>URL：统一资源定位器，也就是我们常说的网址</li><li>HTTP：超文本传输协议</li><li>HTML：标记语言</li></ul><h2 id="1-2-html-发展史与-html5"><a class="header-anchor" href="#1-2-html-发展史与-html5">¶</a>1.2 HTML 发展史与 HTML5</h2><h2 id="1-6-html-的基本结构"><a class="header-anchor" href="#1-6-html-的基本结构">¶</a>1.6 HTML 的基本结构</h2><h3 id="1-6-1-html-文件的编写方法"><a class="header-anchor" href="#1-6-1-html-文件的编写方法">¶</a>1.6.1 HTML 文件的编写方法</h3><ol><li><p>HTML 标签</p><p>一个 HTML 文件是由一系列的元素和标签组成。元素是 HTML 文件的重要组成部分，<strong>元素名不区分大小写</strong>。HTML 用标签来规定元素的属性和它在文件中的位置。</p><p>HTML 的标签分<strong>单独出现的标签</strong>和<strong>成对出现的标签</strong>两种。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名称</span>&gt;</span>要控制的元素<span class="tag">&lt;/<span class="name">标签名称</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在每个 HTML 标签，大写、小写和混写均可。</p></blockquote><p>在每个 HTML 标签中，还可以设置一些属性，控制 HTML 标签所建立的元素。这些属性将位于所建立元素的首标签，因此，首标签的基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名称</span> <span class="attr">属性1</span>=<span class="string">&quot;值1&quot;</span> <span class="attr">属性2</span>=<span class="string">&quot;值2&quot;</span> &gt;</span>要控制的元素<span class="tag">&lt;/<span class="name">标签名称</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>元素的概念</p><p>一组标签，再加上标签包含的内容，被称之为一个元素。</p></li><li><p>HTML 文件结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-6-2-文件开始标签-html"><a class="header-anchor" href="#1-6-2-文件开始标签-html">¶</a>1.6.2 文件开始标签<code> &lt;html&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  文件的全部内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第二章-html-文件基本标记"><a class="header-anchor" href="#第二章-html-文件基本标记">¶</a>第二章 HTML 文件基本标记</h1><h2 id="2-1-html-头部标记"><a class="header-anchor" href="#2-1-html-头部标记">¶</a>2.1 HTML 头部标记</h2><p>在 HTML 语言的头元素中，一般要包括标题、基地信息、元信息等。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">.....</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>一般情况下，CSS 和 JavaScript 都定义在头元素中的，而<strong>定义在 HTML 语言头部文件的内容往往不会在网页上直接显示</strong>。</p><table><thead><tr><th style="text-align:center">标记</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;base&gt;</code></td><td style="text-align:center">当前文档的 URL 全称（基地网址）</td></tr><tr><td style="text-align:center"><code>&lt;basefont&gt;</code></td><td style="text-align:center">设定基准的文字字体、字号和颜色</td></tr><tr><td style="text-align:center"><code>&lt;title&gt;</code></td><td style="text-align:center">设定显示在浏览器左上方的标题内容</td></tr><tr><td style="text-align:center"><code>&lt;isindex&gt;</code></td><td style="text-align:center">表明该文档是一个可用于检索的网关脚本，由服务器建立</td></tr><tr><td style="text-align:center"><code>&lt;meta&gt;</code></td><td style="text-align:center">有关文档本身的元信息。例如：用于查询的关键字、该文档的有效日期等</td></tr><tr><td style="text-align:center"><code>&lt;style&gt;</code></td><td style="text-align:center">设定 CSS 层叠样式表的内容</td></tr><tr><td style="text-align:center"><code>&lt;link&gt;</code></td><td style="text-align:center">设定外部文件的连接</td></tr><tr><td style="text-align:center"><code>&lt;script&gt;</code></td><td style="text-align:center">设定页面程序脚本的内容</td></tr></tbody></table><h2 id="2-2-标题标签-title"><a class="header-anchor" href="#2-2-标题标签-title">¶</a>2.2 标题标签 <code>&lt;title&gt;</code></h2><p>HTML 文件的标题信息会显示在浏览器的标题栏，用以说明文件的用途。每个 HTML 文件都应该有标题，在 HTML 文档中，标题文字位于 <code>&lt;title&gt;</code>和 <code>&lt;/title&gt;</code> 之间，并且 <code>&lt;title&gt;</code> 标签位于文档的头部。</p><p>实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是标题君<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是网页主体</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-元信息标签-meta"><a class="header-anchor" href="#2-3-元信息标签-meta">¶</a>2.3 元信息标签 <code>&lt;meta&gt;</code></h2><p>​ meta 元素提供的信息是用户不可见的，它不显示在页面中，<strong>一般用于定义页面信息的名称、关键字、作者等</strong>。在 HTML 中， meta 标签不需要设置结束标签，一个尖括号就是一个 meta 内容 ，并且一个 HTML 头部可以有多个 meta 标签。</p><ol><li><p>页面关键字</p><p>​ 设置页面关键字是为了向搜索引擎说明这一网页的关键字，从而帮助搜索引擎对该网页进行查找和分类，可以提高被搜索到的概率。<strong>一般可以设置不止一个关键字，之间用逗号隔开，但是不要设置太多</strong>。</p><p>​ 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">content</span>=<span class="string">&quot;具体的关键字，用逗号隔开&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​ 语法解释：</p><p>​ 在该语法中， name 为属性名称，这里是 keyword ，也就是说设置网页的关键字属性，而在 content 中，则定义了具体的关键字。</p><p>​ 实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">content</span>=<span class="string">&quot;html,元信息,关键字&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>元信息标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>页面描述</p><p>​ 设置页面描述也是为了便于搜索引擎的查找，它用来描述网页的主题等。</p><p>​ 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;对页面的具体描述&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​ 语法解释：</p><p>​ 在该语法中， name 为属性名称，这里是 description ，也就是说将元信息属性设置为页面描述，而在 content 中，则定义了具体的描述内容。</p><p>​ 实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyneme&quot;</span> <span class="attr">content</span>=<span class="string">&quot;html,元信息,关键字&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这是一个关于元信息的网页&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>元信息标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>设置编辑器</p><p>​ 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;编辑软件的名称&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​ 语法解释：</p><p>​ 在该语法中， name 为属性名称，这里是 generator ，也就是说将元信息属性设置为编辑器信息，而在 content 中，则定义了具体的编辑器。</p><p>​ 实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyneme&quot;</span> <span class="attr">content</span>=<span class="string">&quot;html,元信息,关键字&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这是一个关于元信息的网页&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;vscode&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>元信息标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>设置作者信息</p><p>​ 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;作者&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​ 语法解释：</p><p>​ 在该语法中， name 为属性名称，这里是 author ，也就是说将元信息属性设置为作者信息，而在 content 中，则定义了具体的作者名字。</p><p>​ 实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyneme&quot;</span> <span class="attr">content</span>=<span class="string">&quot;html,元信息,关键字&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这是一个关于元信息的网页&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;vscode&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;YuiLexi&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>元信息标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>限制搜索方式</p><p>​ 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;搜索方式&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th style="text-align:center">搜索方式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">All</td><td style="text-align:center">表示能搜到当前网页及其链接的网页</td></tr><tr><td style="text-align:center">Index</td><td style="text-align:center">表示能搜到当前网页</td></tr><tr><td style="text-align:center">Nofollow</td><td style="text-align:center">表示不能搜到与当前网页链接的网页</td></tr><tr><td style="text-align:center">Noindex</td><td style="text-align:center">表示不能搜到当前网页</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">表示不能搜到当前网页及其链接的网页</td></tr></tbody></table><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-31</p></div></div><div class='timeline-item-content'></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub入门</title>
      <link href="/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Github.html"/>
      <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Github.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>此文章主要讲解 Github 的认识和使用，不包含<strong>如何注册 Github 账号</strong>。</p><h1 id="总览"><a class="header-anchor" href="#总览">¶</a>总览</h1><p><img src="https://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Github/Github%E4%BB%93%E5%BA%93%E6%80%BB%E8%A7%88.png" alt="Github仓库总览"></p><ul><li>左上角为 Github 的用户名 + 仓库名</li><li>右上角<ul><li>眼睛图标+Watch 字样，点击这个按钮就可以 Watch 该仓库，今后该仓库的更新信息会显示在用户的公开活动中。</li><li>Star 旁边的数组表示给这个仓库添加 Star 的人数，这个数越高，代表该仓库越受关注。</li><li>Watch 与 Star 不同的地方在于，Watch 之后该仓库的相关信息会在您的个人 Notifications 中显示，让用户可以追踪仓库的内容，而 Star 更像是书签，让用户将来可以在 Star 标记的列表中找到该仓库。</li><li>另外，Star 数还是 GitHub 上判断仓库热门程度的标志之一。</li><li>fork 就是被人 copy 的次数。</li></ul></li><li>中间从左到右依次是：<ol><li>Code：显示该仓库的文件列表，以及该仓库的各种操作</li><li>Issues：关于此项目的问题讨论处，遇到的问题可以在这里谈论</li><li>Pull Request（PR）：发起 pull request 给原仓库，让他看到你修改的内容(需要先 fork 一份原仓库，然后修复里面的内容，再 pull request 给原仓库)</li><li>GitHub Discussions：是一个围绕开源或内部项目为社区提供协作沟通的论坛。 不像 GitHub Issues，讨论用于需要透明和可访问的对话，但不需要在项目板上进行跟踪，并且与代码无关。 讨论使公共论坛中能够进行流畅、公开的对话。通过连接和提供更集中的区域来连接和查找信息，讨论为更多协作对话提供了空间。</li><li>GitHub Actions：在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</li><li>Projects：GitHub 新推出的项目管理工具 Projects。协助开发者在开发流程中整合项目管理，让开发者可以直接在 GitHub 程序代码储存库中管理工作流程，而 Projects 的介面就像看板系统，能够图像化开发流程，用户可以根据团队使用需求建立工作流程架构，如“开发中”、“已完成”、“尚未开始进行”等，且能通过拖拉的方式，来调整工作流程栏位的顺序</li><li>Wiki：我们可以用它来实现项目信息管理，为项目提供更加完善的文档</li><li>Insignts：<ol><li>Pulse：显示该仓库最近的活动信息，该仓库中软件是无人问津还是在热火朝天的开发之中，从这里可以一目了然。</li><li>Graphs：以图表的形式显示该仓库的各项指标，让用户轻松了解该仓库的活动倾向。</li></ol></li></ol></li></ul><h1 id="code-页"><a class="header-anchor" href="#code-页">¶</a>Code 页</h1><p><img src="https://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Github/Github%E7%9A%84Code%E9%A1%B5_1.png" alt="Github的Code页_1"></p><p><img src="https://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Github/Github%E7%9A%84Code%E9%A1%B5_2.png" alt="Github的Code页_2"></p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-31</p></div></div><div class='timeline-item-content'><ol><li>更新了 Code 页相关内容</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-30</p></div></div><div class='timeline-item-content'><ol><li>创建文件</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
            <tag> 团队协作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity坐标系</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F/Unity%E5%9D%90%E6%A0%87%E7%B3%BB.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F/Unity%E5%9D%90%E6%A0%87%E7%B3%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>这一篇文章，主要介绍 Unity 中的各种坐标系，并且介绍如何使用 C# 脚本，实现不同坐标系之间的转换。</p><blockquote><p>快速导航</p><p><a href="https://blog.yuilexi.cn/2023/05/11/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transforms/">Unity 组件-Transform | 🪐 星空鸟 🪐 (yuilexi.cn)</a></p></blockquote><h1 id="一-世界坐标系"><a class="header-anchor" href="#一-世界坐标系">¶</a>一、世界坐标系</h1><p>在 Unity 中，世界坐标系是指一个三维空间中的坐标系，可以用来描述场景中物体的位置和方向。它是由 X 轴、Y 轴和 Z 轴组成的，其中 X 轴表示水平方向（从左向右），Y 轴表示垂直方向（从下向上），Z 轴表示深度方向（从屏幕内向外）。默认情况下，原点位于场景的中心点。</p><p>在 Unity 中，所有的对象都有它们自己的坐标系，包括世界坐标系和本地坐标系。世界坐标系是所有对象的公共坐标系，因此可以用来描述整个场景中的对象位置和方向。</p><p>如果你想在代码中使用<strong>世界坐标系</strong>，可以使用 <strong>Transform 组件的 position 属性</strong>，它表示对象在世界坐标系中的位置。</p><p>但是，<strong>Transform 组件</strong> 面板中的 Position ，确表示的是本地（局部）坐标。</p><blockquote><p>需要注意的是，Unity 中的坐标系默认使用左手坐标系。这意味着 X 轴向右，Y 轴向上，Z 轴向屏幕内。如果你想使用右手坐标系，可以在项目设置中进行修改。</p></blockquote><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%B3%BB/Unity%E5%9D%90%E6%A0%87%E7%B3%BB/%E5%B7%A6%E6%89%8B%E7%B3%BB%E5%92%8C%E5%8F%B3%E6%89%8B%E7%B3%BB.svg" alt="左手系和右手系"></p><p>在世界坐标系中，还有两个其他的描述对象空间状态的属性：旋转与缩放。这两个属性在 <code>Transform</code> 组件面板中，表示的是相对于父级的状态。如果想要获得世界坐标系中的状态，需要将每一级父对象的属性叠加（注意：这里是叠加，而不是相加）。</p><h1 id="二-本地坐标系"><a class="header-anchor" href="#二-本地坐标系">¶</a>二、本地坐标系</h1><p>在 Unity 中，本地坐标系（Local Coordinates System）或局部坐标系（Local Coordinate System）是指相对于某个物体自身的坐标系。每个物体都有其自己的本地坐标系，该坐标系以物体的位置、旋转和缩放为基准。</p><p>在 <code>Transform</code> 组件面板中的 <code>Position</code> 属性，表示的是该对象的相对于父级的本地坐标系的坐标位置。</p><blockquote><p>一个游戏对象，想要获得世界坐标系，那么就需要将所有的父级以及祖级的本地坐标系相加。如果一个游戏对象在场景中没有父级，那么它的 <code>Transform</code> 中属性值，就是世界坐标下的属性值。</p></blockquote><p><strong>旋转</strong>（Rotation）：物体的本地坐标系的旋转是基于物体的转换。例如，当一个物体绕 Y 轴旋转时，其本地坐标系的 X 和 Z 轴也会随之改变方向。</p><p><strong>缩放</strong>（Scale）：物体的本地坐标系的缩放取决于物体的缩放变换。如果一个物体被缩放了，那么其本地坐标系的轴的长度也会相应地进行缩放。</p><h1 id="三-屏幕坐标系"><a class="header-anchor" href="#三-屏幕坐标系">¶</a>三、屏幕坐标系</h1><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%B3%BB/Unity%E5%9D%90%E6%A0%87%E7%B3%BB/%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E7%B3%BB.svg" alt="屏幕坐标系"></p><p>屏幕坐标系就是把屏幕看作一个坐标系，从左下角开始计算，也就是(0,0)，而右上角则是<code>(Screen.widht-1,Screen.height-1)</code>，所以又叫做像素坐标系。可以通过下面的代码获得屏幕的分辨率。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetScreenCoordinate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;当前窗口的分辨率为：&quot;</span> + Screen.width + <span class="string">&quot;X&quot;</span> + Screen.height);</span><br><span class="line">    Debug.Log(<span class="string">&quot;当前屏幕的分辨率为：&quot;</span> + Screen.currentResolution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标位置坐标就是属于屏幕坐标系，通过屏幕坐标和世界坐标互转，可得到鼠标在 Unity3D 中的实际交互位置，然后就可以通过逻辑做出反馈。</p><p>获取鼠标的当前坐标，代码逻辑为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetMouseCoordinate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取鼠标在屏幕坐标系中的位置</span></span><br><span class="line">    Vector3 mouseScreenPosition = Input.mousePosition;</span><br><span class="line">    <span class="comment">// 输出鼠标的屏幕坐标和世界坐标</span></span><br><span class="line">    Debug.Log(<span class="string">&quot;Mouse Screen Position: &quot;</span> + mouseScreenPosition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-视口坐标系"><a class="header-anchor" href="#四-视口坐标系">¶</a>四、视口坐标系</h1><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%B3%BB/Unity%E5%9D%90%E6%A0%87%E7%B3%BB/%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87%E7%B3%BB.svg" alt="视口坐标系"></p><p>视口坐标系可以理解为单位化的屏幕坐标系，该坐标系计算方式和屏幕坐标系类似，只不过把其参数标准化了，更加适用于比例计算。左下角为 <code>(0,0)</code> 右上角为 <code>(1,1)</code> 。</p><p>将屏幕坐标单位化后，就可以挣脱分辨率不同的限制，通过相对位置来确定在屏幕中的位置。</p><h1 id="五-瓦片地图坐标系"><a class="header-anchor" href="#五-瓦片地图坐标系">¶</a>五、瓦片地图坐标系</h1><p>在 2D 游戏对象中，我们可以通过创建 <code>TileMap</code> ，轻松地搭建出不同地游戏场景地图，因此，就会存在一种特殊的坐标系——<strong>瓦片地图坐标系</strong>。</p><p>由于瓦片的网格大小可以进行设置，因此，每个瓦片在世界坐标系中位置不尽相同。但是可以确定的是，<strong>瓦片地图坐标系</strong>的坐标，是一个整型的三元数。</p><p>我们可以通过自定义一个 C# 脚本笔刷，来显示当前的瓦片坐标。在 <code>Asset/TileMap/Custom Brush Scripts/Coordinate Brush/Editor/</code> 路径下，创建一个 <code>CoordinateBrush.cs</code> 脚本，并且将下列代码粘贴复制到脚本中，然后等待 Unity 引擎编译结束，就能在 <code>Tile Palette</code> 面板中，找到该笔刷。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.Tilemaps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UnityEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CustomGridBrush(true, false, false, <span class="string">&quot;Coordinate Brush&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;New Coordinate Brush&quot;</span>, menuName = <span class="string">&quot;Brushes/Coordinate Brush&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoordinateBrush</span> : <span class="title">GridBrush</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Paint</span>(<span class="params">GridLayout grid, GameObject brushTarget, Vector3Int position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.x, position.y, z);</span><br><span class="line">            <span class="keyword">base</span>.Paint(grid, brushTarget, zPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Erase</span>(<span class="params">GridLayout grid, GameObject brushTarget, Vector3Int position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.x, position.y, z);</span><br><span class="line">            <span class="keyword">base</span>.Erase(grid, brushTarget, zPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">FloodFill</span>(<span class="params">GridLayout grid, GameObject brushTarget, Vector3Int position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.x, position.y, z);</span><br><span class="line">            <span class="keyword">base</span>.FloodFill(grid, brushTarget, zPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BoxFill</span>(<span class="params">GridLayout gridLayout, GameObject brushTarget, BoundsInt position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.x, position.y, z);</span><br><span class="line">            position.position = zPosition;</span><br><span class="line">            <span class="keyword">base</span>.BoxFill(gridLayout, brushTarget, position);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">CustomEditor(typeof(CoordinateBrush))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoordinateBrushEditor</span> : <span class="title">GridBrushEditor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> CoordinateBrush coordinateBrush &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> target <span class="keyword">as</span> CoordinateBrush; &#125; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PaintPreview</span>(<span class="params">GridLayout grid, GameObject brushTarget, Vector3Int position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.x, position.y, coordinateBrush.z);</span><br><span class="line">            <span class="keyword">base</span>.PaintPreview(grid, brushTarget, zPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPaintSceneGUI</span>(<span class="params">GridLayout grid, GameObject brushTarget, BoundsInt position, GridBrushBase.Tool tool, <span class="built_in">bool</span> executing</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnPaintSceneGUI(grid, brushTarget, position, tool, executing);</span><br><span class="line">            <span class="keyword">if</span> (coordinateBrush.z != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> zPosition = <span class="keyword">new</span> Vector3Int(position.min.x, position.min.y, coordinateBrush.z);</span><br><span class="line">                BoundsInt newPosition = <span class="keyword">new</span> BoundsInt(zPosition, position.size);</span><br><span class="line">                Vector3[] cellLocals = <span class="keyword">new</span> Vector3[]</span><br><span class="line">                &#123;</span><br><span class="line">                    grid.CellToLocal(<span class="keyword">new</span> Vector3Int(newPosition.min.x, newPosition.min.y, newPosition.min.z)),</span><br><span class="line">                    grid.CellToLocal(<span class="keyword">new</span> Vector3Int(newPosition.max.x, newPosition.min.y, newPosition.min.z)),</span><br><span class="line">                    grid.CellToLocal(<span class="keyword">new</span> Vector3Int(newPosition.max.x, newPosition.max.y, newPosition.min.z)),</span><br><span class="line">                    grid.CellToLocal(<span class="keyword">new</span> Vector3Int(newPosition.min.x, newPosition.max.y, newPosition.min.z))</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                Handles.color = Color.blue;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = cellLocals.Length - <span class="number">1</span>; i &lt; cellLocals.Length; j = i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Handles.DrawLine(cellLocals[j], cellLocals[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> labelText = <span class="string">&quot;Pos: &quot;</span> + <span class="keyword">new</span> Vector3Int(position.x, position.y, coordinateBrush.z);</span><br><span class="line">            <span class="keyword">if</span> (position.size.x &gt; <span class="number">1</span> || position.size.y &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                labelText += <span class="string">&quot; Size: &quot;</span> + <span class="keyword">new</span> Vector2Int(position.size.x, position.size.y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GUIStyle myStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">            myStyle.normal.textColor = Color.white;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Handles.Label(grid.CellToWorld(<span class="keyword">new</span> Vector3Int(position.x, position.y, coordinateBrush.z)), labelText, myStyle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%B3%BB/Unity%E5%9D%90%E6%A0%87%E7%B3%BB/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AC%94%E5%88%B7-%E6%98%BE%E7%A4%BA%E5%9D%90%E6%A0%87.png" alt="自定义笔刷-显示坐标"></p><p><img src="https://imageshack.yuilexi.cn/Unity3D/Unity%E5%BC%95%E6%93%8E/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%B3%BB/Unity%E5%9D%90%E6%A0%87%E7%B3%BB/Scene%E4%B8%AD%E6%98%BE%E7%A4%BA%E7%93%A6%E7%89%87%E7%9A%84%E5%9D%90%E6%A0%87.png" alt="Scene中显示瓦片的坐标"></p><hr><div align="center" color="red" font-weight="blod">坐标的计算与转换</div><p>以正方形的瓦片为例，单元格的大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>⋅</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">M\cdot M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> ，那么世界坐标的转换方式为：<code>（x,y,z）➗ M ，然后向下取整</code> 。</p><h1 id="六-坐标系的转换"><a class="header-anchor" href="#六-坐标系的转换">¶</a>六、坐标系的转换</h1><p>第一个启用的相机组件，标记为“主相机”（只读）。如果没有启用带有“主相机”标记的相机组件，则此属性为 null。</p><p>在内部，Unity 使用“主摄像机”标签缓存所有游戏对象。访问此属性时，Unity 会从其缓存中返回第一个有效结果。访问此属性的 CPU 开销很小，与调用 <a href="https://docs.unity3d.com/ScriptReference/GameObject.GetComponent.html">GameObject.GetComponent</a> 相当。</p><p>屏幕坐标转世界坐标：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">ScreenToWorldPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line"><span class="comment">//屏幕坐标为三元数，z = 0</span></span><br><span class="line">Vector3 Camera.ScreenToWorldPoint(<span class="keyword">new</span> Vector3(screenPos.x , screenPos.y , zInfo));</span><br><span class="line">Vector3 Camera.main.ScreenToWorldPoint(<span class="keyword">new</span> Vector3(screenPos.x , screenPos.y , zInfo));</span><br></pre></td></tr></table></figure><p>世界坐标转屏幕坐标：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">WorldToScreenPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line"><span class="comment">//世界坐标转屏幕坐标后，z = 0</span></span><br><span class="line">Vector3 Camera.WorldToScreenPoint(<span class="keyword">new</span> Vector3(worldPos.x , worldPos.y , worldPos.z));</span><br><span class="line">Vector3 Camera.main.WorldToScreenPoint(<span class="keyword">new</span> Vector3(worldPos.x , worldPos.y , worldPos.z));</span><br></pre></td></tr></table></figure><p>世界坐标转视口坐标</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">WorldToViewportPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line">Vector3 Camera.WorldToViewportPoint(Vector3 position);</span><br><span class="line">Vector3 Camera.main.WorldToViewportPoint(Vector3 position);</span><br></pre></td></tr></table></figure><p>视口坐标转世界坐标</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">ViewportToWorldPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line">Vector3 Camera.ViewportToWorldPoint(<span class="keyword">new</span> Vector3(viewPortPos.x , viewPortPos.y , zInfo));</span><br><span class="line">Vector3 Camera.main.ViewportToWorldPoint(<span class="keyword">new</span> Vector3(viewPortPos.x , viewPortPos.y , zInfo));</span><br></pre></td></tr></table></figure><p>屏幕坐标转视口坐标</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">ScreenToViewportPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line">Vector3 ScreenCoordinate = Camera.main.ScreenToViewportPoint(Vector3 Position);</span><br></pre></td></tr></table></figure><p>视口坐标转屏幕坐标</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">ViewportToScreenPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br><span class="line">Vector3 ScreenCoordinate = Camera.main.ViewportToScreenPoint(Vector3 Position);</span><br></pre></td></tr></table></figure><p>区别：</p><p>在 Unity 中，<code>Camera.ScreenToWorldPoint</code>和<code>Camera.main.ScreenToWorldPoint</code>都是用于将屏幕坐标系中的点转换为世界坐标系中的点的方法。它们的区别在于：</p><ul><li><code>Camera.ScreenToWorldPoint</code>是摄像机对象的实例方法，需要使用特定的摄像机对象来进行转换；</li><li><code>Camera.main.ScreenToWorldPoint</code>是静态方法，可以直接使用全局的主摄像机来进行转换。</li></ul><p>因此，当需要将屏幕坐标系中的点转换为世界坐标系中的点时，可以根据不同的场景需求选择使用这两个方法。</p><p>如果场景中只有一个主摄像机，并且需要频繁地进行屏幕坐标系和世界坐标系之间的转换，可以考虑使用<code>Camera.main.ScreenToWorldPoint</code>方法，以避免频繁地获取和传递摄像机对象。</p><p>如果场景中有多个摄像机对象，并且需要对不同的摄像机进行不同的转换操作，或者需要对屏幕坐标系进行自定义的转换操作，可以使用<code>Camera.ScreenToWorldPoint</code>方法，并传递相应的摄像机对象或自定义的参数。</p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-5</p></div></div><div class='timeline-item-content'><ol><li>补充了第五部分：瓦片地图坐标系</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-5</p></div></div><div class='timeline-item-content'><ol><li>完善二、三、四、六部分</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-28</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Unity引擎 </category>
          
          <category> 坐标系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Unity引擎 </tag>
            
            <tag> 坐标系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门到精通</title>
      <link href="/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git.html"/>
      <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-认识-git"><a class="header-anchor" href="#一-认识-git">¶</a>一、认识 Git</h1><h2 id="1-1-版本控制"><a class="header-anchor" href="#1-1-版本控制">¶</a>1.1 版本控制</h2><p><s>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的软件工具。版本控制系统（VCS）是一种管理源代码的软件工具，它可以追踪文件的每一次修改，以便随时恢复早期版本。</s></p><p>版本控制是一种管理和控制软件开发中版本变化的方法，通常用于跟踪代码修改和协作开发。版本控制系统（VCS）是一种通过记录和跟踪文件修改历史的软件工具，用于帮助开发人员在团队中协同工作，并保留先前的代码版本以防止代码丢失或错误。它们还可用于跟踪单个文件和整个项目中的更改，以及管理并发访问到项目文件的冲突。</p><h3 id="1-1-1-为什么要使用版本控制？"><a class="header-anchor" href="#1-1-1-为什么要使用版本控制？">¶</a>1.1.1 为什么要使用版本控制？</h3><p>如果我们在做项目的时候，可能会对项目文件不断进行修改，并且我们需要保留之前的版本文件。在没有<strong>版本控制的系统</strong>的时代，可以通过备份旧文件，来达到版本的控制，例如下面：</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E6%89%8B%E5%8A%A8%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt="手动版本控制"></p><p>但是这样的方式，不仅占用更大的存储空间，并且极为不便。每一次保存版本时，也不知道修改的内容。</p><h3 id="1-1-2-版本控制的作用"><a class="header-anchor" href="#1-1-2-版本控制的作用">¶</a>1.1.2 版本控制的作用</h3><p>版本控制在软件开发和其他领域中广泛应用。它的主要作用是<strong>帮助团队协作开发软件，并保证每个人对代码的修改都是可追溯的</strong>。</p><p>以下是版本控制的几个主要作用：</p><ol><li><strong>协作开发</strong>：版本控制允许多个开发者一起在同一个代码库中对代码进行修改和提交，并且可以随时查看彼此的修改记录。</li><li><strong>追溯历史</strong>：版本控制能够记录每一次代码修改并生成相应的历史记录，可以随时查看代码的修订历史，并恢复到任意历史版本。</li><li><strong>回退操作</strong>：在修复 bug 或者发现问题版本时，可以快速回退到之前的某个历史版本。</li><li><strong>分支与合并</strong>：版本控制允许用户创建分支，这使得用户可以在单独的分支上开发新特性，而不会影响主分支的稳定性。之后可以将分支合并到主分支中。</li><li><strong>备份与恢复</strong>：版本控制在本地或远程存储中备份代码，并可以随时恢复到以前的版本，这保证了代码在各个阶段的可靠性。</li></ol><p>总之，版本控制的作用非常重要。它可以提高开发团队的效率和协作能力，并保证了代码的质量和可追溯性。</p><h3 id="1-1-3-常用的版本控制器"><a class="header-anchor" href="#1-1-3-常用的版本控制器">¶</a>1.1.3、常用的版本控制器</h3><p>目前使用最广泛的是<strong>Git</strong>与<strong>SVN</strong>。</p><p><strong>它们主要的区别</strong>:</p><ul><li><p>SVN是<strong>集中式</strong>版本控制系统，<strong>版本库</strong>是集中放在中央服务器的。工作时，首先要从中央服务器得到最新的版本，然后编辑项目文件，之后，需要把编辑完成的项目，推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就会影响工作速度，并且如果中央服务器出现问题，所有的用户均不能正常工作。</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/SVN%E7%9A%84%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="SVN的结构图"></p></li><li><p>Git是<strong>分布式</strong>版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E7%9A%84%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="Git的结构图"></p></li></ul><h2 id="1-2-git-的历史"><a class="header-anchor" href="#1-2-git-的历史">¶</a>1.2 Git 的历史</h2><p>Linux 内核开源项目有着为数众多的参与者。在 1991-2002 年间，绝大多数的 Linux 维护工作都花在了提交补丁和保存归档的繁琐事务上。到 2002 年，整个项目组开始使用一个叫做 BitKeeper 的分布式版本控制系统，来维护和管理代码。在 Git 诞生之前，许多版本控制系统普遍存在的问题包括效率低下、容易丢失数据、难以管理分支等。特别是在 Linux 内核开发中，Linus Torvalds 对于 BitKeeper 这个专有的版本控制系统的使用遭遇了一些限制，这也促使他开始考虑自己开发一款全新的版本控制系统。</p><p>2005 年，一位 Linux 开发成员 Andrew（Samba 协议之父）写了一个可以连接 BitKeeper 仓库的外挂，因此 BitMover 公司（BitKeeper 持有者）认为他反编译了 BitKeeper。BitMover 决定中止 Linux 免费使用 BitKeeper 的授权。最终 Linux 团队与 BitMover 磋商无果，Torvalds 决定开发自己的版本管理系统。</p><p>Linus Torvalds 这位天才，仅仅用了<strong>十天</strong>时间，就诞生了目前<strong>世界最先进</strong>的版本控制系统—— Git 。</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Linux%E4%B9%8B%E7%88%B6.png" alt="Linux之父"></p><h1 id="二-git-的安装与配置"><a class="header-anchor" href="#二-git-的安装与配置">¶</a>二、Git 的安装与配置</h1><h2 id="2-1-git-安装"><a class="header-anchor" href="#2-1-git-安装">¶</a>2.1 Git 安装</h2><p>首先去到官网<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E5%AE%98%E7%BD%91.png" alt="Git官网"></p><p>选择对应系统的文件，进行安装（例如：以 Window 系统为例）</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E7%9A%84windows%E5%AE%89%E8%A3%85.png" alt="Git的windows安装"></p><p>选择对应的安装程序，之后，会出现安装程序界面，一路向下就行。</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.png" alt="Git安装程序"></p><p>安装成功后，就会出现下面的文件</p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E7%A8%8B%E5%BA%8F.png" alt="Git程序"></p><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐使用</p><p><strong>Git CMD</strong>：Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用</p><h2 id="2-2-git-配置"><a class="header-anchor" href="#2-2-git-配置">¶</a>2.2 Git 配置</h2><ol><li><strong>用户信息</strong>（必须要配置）：配置个人的用户名称和电子邮件地址：</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;galen&quot;</span></span><br><span class="line">git config --global user.email 4981292+galen_2019@user.noreply.gitee.com</span><br></pre></td></tr></table></figure><p>​如果用了 <strong>—global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，路径为 <code>&quot;C:/Users/&lt;用户名&gt;/.gitconfig&quot;</code> ，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>​如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><p>​这里的用户名以及邮箱，是为了记录修改文件的用户信息，并不是登录的账号，Git 不需要登陆账号。</p><ol start="2"><li><p><strong>查看配置信息</strong>：要检查已有的配置信息，可以使用 git config —list 命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li></ol><h1 id="三-git-理论"><a class="header-anchor" href="#三-git-理论">¶</a>三、 Git 理论</h1><h2 id="3-1-工作区域"><a class="header-anchor" href="#3-1-工作区域">¶</a>3.1、工作区域</h2><p>基本概念：</p><ul><li><strong>工作区</strong>：平时存放项目代码的地方。</li><li>**暂存区(Stage/Index)：**暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列 表信息。</li><li>**版本库：**又称本地仓库，<strong>这个不算工作区</strong>，而是 Git 的版本库，里面有你提交到所有版本的数据，一般是 <code>.git</code> 文件。</li><li><strong>远程仓库</strong>：托管代码的服务器。</li></ul><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E5%8C%BA%E5%9F%9F.png" alt="Git区域"></p><h2 id="3-2-工作流程"><a class="header-anchor" href="#3-2-工作流程">¶</a>3.2、工作流程</h2><p>一般是这样的：</p><ol><li>新建仓库或者克隆远程仓库；</li><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件<strong>提交</strong>到git仓库。</li></ol><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)。</p><h2 id="3-3-分支"><a class="header-anchor" href="#3-3-分支">¶</a>3.3 分支</h2><p>在Git中，<strong>分支</strong>是指代码库中独立存在的一个代码版本。它可以将代码库的历史分割成不同的线路，每个分支上可以进行独立的开发工作。</p><p>分支在Git中有以下作用：</p><ol><li><strong>并行开发</strong>：使用分支可以让团队成员在独立的分支上并行地进行开发工作，而不会互相干扰。每个分支可以独立地修改、提交和推送代码，不会影响其他分支上的代码。</li><li><strong>版本管理</strong>：通过创建分支，你可以在不影响主线（通常是主分支）的情况下，为特定功能、修复bug或实验性功能创建自己的代码版本。这样可以确保主线代码的稳定性，同时允许其他人在各自的分支上工作。</li><li><strong>特性开发与测试</strong>：创建新分支后，你可以专注于特定功能的开发。这使得你可以在该分支上进行实验、编写和测试代码，而不会影响其他分支上的代码。一旦特性开发完成并经过测试，可以将其合并到主线或其他适当的分支中。</li><li><strong>故障排除与修复</strong>：如果你在主线上发现了一个bug，你可以创建一个修复bug的分支，进行相关的修改和测试，然后将修复合并回主线。这样可以确保修复bug的过程不会干扰其他功能的开发。</li><li><strong>版本回退与分支合并</strong>：分支还可以用于版本回退和合并操作。如果你在某个分支上的开发出现问题，可以简单地放弃该分支并切换回之前的分支或提交。同时，当你在一个分支上完成特性开发后，可以将其合并回主线或其他适当的分支，以保持代码库的整洁和有序。</li></ol><p>总之，分支在Git中提供了一种有效的方式来组织、管理和并行开发代码，使得团队成员可以独立地工作，并将各自的工作成果整合到主线或其他分支中。</p><h2 id="3-4-ssh"><a class="header-anchor" href="#3-4-ssh">¶</a>3.4 SSH</h2><p>SSH代表Secure Shell，是一种网络协议和加密技术，用于在不安全的网络上安全地进行远程登录和数据传输。</p><p>具体来说，SSH提供了一种<strong>通过加密通道进行安全通信的方式，以防止敏感数据在传输过程中被窃听或篡改</strong>。它使用公钥加密和对称密钥加密的组合，确保数据的机密性和完整性。</p><p>SSH可以用于以下方面：</p><ol><li><strong>远程登录</strong>：通过SSH，用户可以从本地计算机安全地远程登录到远程服务器或其他计算机。这对于系统管理员和远程开发人员来说特别有用，他们可以通过SSH协议在远程计算机上执行命令和管理操作，而无需物理接触该计算机。</li><li><strong>远程文件传输</strong>：SSH还提供了安全的文件传输功能。用户可以使用SCP（Secure Copy）或SFTP（SSH File Transfer Protocol）等工具，通过SSH协议在本地计算机和远程服务器之间传输文件。这种方式比传统的FTP更安全，因为数据在传输过程中进行了加密。</li><li><strong>安全通信隧道</strong>：SSH可以创建安全的通信隧道，将其他协议（如HTTP、SMTP、数据库连接等）通过加密通道传输，以防止数据泄露或篡改。这对于通过不可信的网络连接访问敏感数据或服务的情况非常有用。</li></ol><p>总结起来，SSH是一种安全的远程登录和文件传输协议，通过加密和认证机制保护敏感数据的安全性和完整性。它在许多领域中被广泛使用，特别是在远程管理和安全通信方面。</p><p>SSH KEY 生成步骤如下：</p><ol><li><p>检查一下用户名和邮箱是否配置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure></li><li><p>生成 SSH KEY</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -c <span class="string">&quot;&lt;邮箱&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>进入文件夹 <code>C:/Users/&lt;用户名&gt;/.ssh</code> 可以看到</p><ul><li>id_rsa文件是私钥，要保存好，放在本地，私钥可以生产公钥，反之不行。</li><li>id_rsa.pub文件是公钥，可以用于发送到其他服务器，或者git上</li></ul></li><li><p>用记事本之类的软件打开id_rsa.pub文件，并且复制全部内容</p></li><li><p>进入 Github 找到 Settings，再找到 SSH keys，将复制的的内容放到 key立即可，Title随便起</p></li></ol><h1 id="四-git-基本操作"><a class="header-anchor" href="#四-git-基本操作">¶</a>四、Git 基本操作</h1><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Git工作流程"></p><p><img src="http://imageshack.yuilexi.cn/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8.png" alt="Git常用指令大全"></p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-26</p></div></div><div class='timeline-item-content'></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Git </tag>
            
            <tag> 团队协作 </tag>
            
            <tag> 分布式版本控制 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#代码规范</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/02.Csharp%E8%A7%84%E8%8C%83.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/02.Csharp%E8%A7%84%E8%8C%83.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>我们在实际的代码开发中，经常会遇到代码的命名以及规范问题。而不同的人有不同的风格，因此，这篇文章主要讲述<strong>本人 C#代码的规范</strong>，仅作个人以及愿意参与本人项目中人使用。</p><blockquote><p>注意：大可不必争论，代码的命名是否合理，选择一套自己最喜欢的风格，并将其养成习惯，才是最重要的。</p><p>C#系列教程：</p><ol><li><a href="https://blog.yuilexi.cn/2023/04/26/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">C#基础语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></li><li><a href="https://blog.yuilexi.cn/2023/04/30/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/">C#高级语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></li><li><a href="https://blog.yuilexi.cn/2023/05/19/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E8%A7%84%E8%8C%83/">C#代码规范 | 🪐 星空鸟 🪐 (yuilexi.cn)</a>⬅️ 当前的位置 °꒰๑’ꀾ’๑꒱°</li></ol></blockquote><h1 id="一-标识符规则"><a class="header-anchor" href="#一-标识符规则">¶</a>一、标识符规则</h1><ul><li><code>Pascal</code>命名规范：标志符中，所有单词的首字母均大写，其余字母小写。</li><li><code>camel</code>命名规范：标志符中，<strong>首字母小写</strong>，其余<strong>单词的首字母</strong>大写，<strong>其余字母</strong>小写。</li><li>标识符命名的字符选择：<code>[a-zA-Z0-9_]</code>中的字符任意搭配，并且不能<strong>以数字作为开头</strong></li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">命名规范</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">类： <code>class</code></td><td style="text-align:center"><code>Pascal</code></td><td style="text-align:center"><code>PlayerControl</code></td></tr><tr><td style="text-align:center">私有非静态字段</td><td style="text-align:center"><code>camel</code>，并且必须以<strong>单下划线</strong><code>_</code>开头</td><td style="text-align:center"><code>_workerQueue</code></td></tr><tr><td style="text-align:center">私有静态字段</td><td style="text-align:center"><code>camel</code>，并且必须以<code>s_</code>开头</td><td style="text-align:center"><code>s_workerQueue</code></td></tr><tr><td style="text-align:center">属性和公共字段</td><td style="text-align:center"><code>Pascal</code>，不能以<strong>下划线</strong>或者<code>s_</code>开头</td><td style="text-align:center"><code>WorkerQueue</code></td></tr><tr><td style="text-align:center">方法</td><td style="text-align:center"><code>Pascal</code></td><td style="text-align:center"><code>PascalCasing()</code></td></tr><tr><td style="text-align:center">局部变量</td><td style="text-align:center"><code>camel</code>，并且不能以<strong>下划线</strong>或者<code>s_</code>开头</td><td style="text-align:center"><code>workerQueue</code></td></tr><tr><td style="text-align:center">结构体：<code>struct</code></td><td style="text-align:center"><code>Pascal</code></td><td style="text-align:center"><code>PascalCasing</code></td></tr><tr><td style="text-align:center">接口<code>interface</code></td><td style="text-align:center"><code>Pascal</code>，并在开头加上<code>I</code></td><td style="text-align:center"><code>IWorkerQueue</code></td></tr></tbody></table><h1 id="c-语言命名空间"><a class="header-anchor" href="#c-语言命名空间">¶</a>C#语言命名空间</h1><ol><li>命名空间名称采用<code>Pascal</code>规则，且首字符大写。</li><li>命名空间名称尽量反映其内容所提供的整体功能。</li></ol><p>对于引用的命名空间：</p><ul><li>每一条命名空间的引用，独占一行</li><li>按照：<code>系统的命名空间 -&gt; 第三方库的命名空间 -&gt; 自定义的命名空间</code> 进行排序</li><li>每一大类的命名空间，<strong>按照字母排序</strong></li></ul><h1 id="三-类"><a class="header-anchor" href="#三-类">¶</a>三、类</h1><ol><li>使用<code>Pascal</code>规则命名类名，即首字母要大写。</li><li>使用能够反映类功能的名词或名词短语命名类。</li><li><strong>不要使用 “I”、“C”、“_” 等特定含义前缀</strong>。</li><li>自定义异常类应以 Exception 结尾。</li><li>文件名要能反映类的内容，最好是和类同名。</li></ol><h1 id="四-字段"><a class="header-anchor" href="#四-字段">¶</a>四、字段</h1><ol><li>用<code>camel</code>规则来命名类成员变量名称，即首单词（或单词缩写）小写。</li><li>类字段变量名前加 “_” 前缀，静态字段变量名前加 “s_” 前缀。</li><li>坚决禁止在普通变量前加“m_”（这是 VC 老命名规则）。</li><li>公共的字段采用<code>Pascal</code>规则</li></ol><h1 id="五-属性"><a class="header-anchor" href="#五-属性">¶</a>五、属性</h1><ol><li>使用名词定义属性</li><li>属性使用<code>Pascal</code>规则，首字符大写。</li><li><strong>属性和相应字段名称要关联</strong>，可以使用“重构”菜单来生成属性。</li></ol><h1 id="六-方法"><a class="header-anchor" href="#六-方法">¶</a>六、方法</h1><ol><li>方法名采用<code>Pascal</code>规则，第一个字符要大写。</li><li>方法名应使用动词或动词短语。</li><li>类中访问修饰符或功能相同的方法应该放在一起</li><li>通常情况下，类中方法的排序为：实现接口的方法 -&gt; 私有方法 -&gt; 公共方法</li></ol><h1 id="七-参数-局部变量"><a class="header-anchor" href="#七-参数-局部变量">¶</a>七、参数（局部变量）</h1><ol><li>参数采用<code>camel</code>规则命名，且首字符小写。</li><li>使用描述性参数名称，<strong>参数名称应当具有最够的说明性</strong>。</li><li>不要给参数加匈牙利语类型表示法的前缀，即不能添加 “_” 、 “s_” 等前缀。</li><li>检查方法所有输入参数的有效性，即<strong>不能定义不使用的参数</strong>。</li></ol><h1 id="八-常量"><a class="header-anchor" href="#八-常量">¶</a>八、常量</h1><ol><li>只读常量使用<code>Pascal</code>命名规则，即首字母大写。</li><li>枚举名使用<code>Pascal</code>规则命名，枚举成员本质属于常量，命名规则同上。</li><li>枚举值从小到大顺序定义。</li><li>静态字段或属性采用<code>Pascal</code>规则，即首字符大写。</li></ol><h1 id="九-接口"><a class="header-anchor" href="#九-接口">¶</a>九、接口</h1><ol><li>接口定义使用<code>Pascal</code>规则，且必须以大写“I”开头。</li><li>接口名称要有意义，中间不要有下划线“_”等字符。</li><li>如果类实现了接口，名称<strong>尽量</strong>和接口相同，只是省掉“I”字符。</li></ol><h1 id="十-委托与事件"><a class="header-anchor" href="#十-委托与事件">¶</a>十、委托与事件</h1><ol><li>委托名称采用<code>Pascal</code>规则，即首字符大写。</li><li>定义事件的委托要使用<code>EventHandler</code>后缀，且包括<code>sender</code>和<code>e</code>两个参数。</li><li>事件用到的参数类，名称要带<code>EventArgs</code>后缀。</li><li>事件建议使用<code>Event</code>后缀</li></ol><h1 id="代码规范"><a class="header-anchor" href="#代码规范">¶</a>代码规范</h1><ol><li>代码块的大括号 <code>&#123; &#125;</code> 独占一行，不要使用 <code>Java</code> 习惯</li><li>接口、类、结构体、枚举、字段、属性、方法等必须添加<strong>访问修饰符</strong></li><li><strong>不写注释是流氓，乱写注释是混蛋</strong></li></ol><h1 id="readme"><a class="header-anchor" href="#readme">¶</a>README</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-23</p></div></div><div class='timeline-item-content'><ol><li>在 “前言” 部分，增加对 ① ② 文章的引用链接</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-19</p></div></div><div class='timeline-item-content'><ol><li>创建该文档，并规范了常用的代码</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Csharp </category>
          
          <category> Unity3D基础 </category>
          
          <category> Csharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> Csharp基础 </tag>
            
            <tag> Unity3D基础 </tag>
            
            <tag> Csharp规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中数组、ArrayList和List三者的区别</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/%E6%95%B0%E7%BB%84-ArrayList-List.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/%E6%95%B0%E7%BB%84-ArrayList-List.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>此文章主要讲解，C#中数组、ArrayList 和 List 三者的区别。</p><blockquote></blockquote><h1 id="数组"><a class="header-anchor" href="#数组">¶</a>数组</h1><p>在这三者之中，数组最早出现的。数组在<strong>内存中是连续存储的</strong>，所以它的索引速度非常快，而且赋值与修改元素也很简单。</p><p>创建数组的方法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="built_in">string</span>[] str = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span>[] number = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>但是数组存在一些不足的地方。数组在声明的时候，必须指定数组的长度，数组创建后在增加长度是十分困难的。并且，在数组的两个数据间插入数据也是很麻烦的。</p><p>数组的长度过长，会造成内存浪费；数组的长度过短，无法添加更多的数据</p><p>如果在声明数组时我们不清楚数组的长度，就会变得很麻烦。</p><h1 id="arraylist-动态列表"><a class="header-anchor" href="#arraylist-动态列表">¶</a>ArrayList（动态列表）</h1><p>动态列表的使用，请参考<a href="https://blog.yuilexi.cn/2023/04/30/Programming/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/#%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%EF%BC%88ArrayList%EF%BC%89">C#高级语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></p><p><code>ArrayList</code>是属于命名空间<code>System.Collections</code>下，在使用该类时必须进行引用，同时继承了<code>IList</code>的接口，提供了数据存储和检索。</p><p><code>ArrayList</code>对象的大小是按照其中存储的数据来动态扩充与收缩的。所以，在声明<code>ArrayList</code>对象时并不需要指定它的长度。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList</span></span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据</span></span><br><span class="line">list1.Add(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">list1.Add(<span class="number">1314</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">list[<span class="number">2</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">list.Remove(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">list.Insert(<span class="number">0</span>, <span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>在<code>ArrayList</code>中，可以插入不同类型的数据。因为<code>ArrayList</code>会把所有插入其中的数据，装箱为<code>Object</code>类型来处理，在我们使用<code>ArrayList</code>处理数据时，很可能会报类型不匹配的错误，也就是<code>ArrayList</code>不是类型安全的，因此，为了正确使用数据，我们还需要进行拆箱操作。在存储或检索值类型时通常发生装箱和取消装箱操作，带来很大的性能耗损。</p><h1 id="泛型-list"><a class="header-anchor" href="#泛型-list">¶</a>泛型 List</h1><p>因为 <code>ArrayList</code> 存在不安全类型与装箱拆箱的缺点，所以出现了泛型的概念。<code>List</code> 类是 <code>ArrayList</code> 类的<strong>泛型等效类</strong>，它的大部分用法都与 <code>ArrayList</code> 相似，因为 <code>List</code> 类也继承了 <code>IList</code> 接口。最关键的区别在于，在声明 <code>List</code> 集合时，我们同时需要为其声明 <code>List</code> 集合内数据的对象类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据</span></span><br><span class="line">list.Add(<span class="number">4</span>);</span><br><span class="line">list.Add(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">list.RemoveAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h1><ol><li>数组：</li></ol><ul><li>数组是一种含有相同类型元素的集合，长度固定且不可更改。</li><li>数组直接存储在内存中，可以快速访问。</li><li>数组的元素可以通过索引访问，索引从 0 开始。</li><li>数组可以是多维的，例如二维数组，三维数组等。</li></ul><ol start="2"><li>ArrayList：</li></ol><ul><li>ArrayList 是 C#中的一个类，可以用来存储任意类型的元素。</li><li>ArrayList 的长度是可变的，可以动态地添加、删除或修改元素。</li><li><strong>ArrayList 不直接存储在内存中，而是存储对元素的引用，因此访问元素比数组慢</strong>。</li><li>ArrayList 的元素可以通过索引访问。</li></ul><ol start="3"><li>List：</li></ol><ul><li>List 是 C#中的一个泛型类，与 ArrayList 类似，也可以存储任意类型的元素。</li><li>List 的长度是可变的，可以动态地添加、删除或修改元素。</li><li>List 与 ArrayList 不同的是，List 直接存储在内存中，可以快速访问元素。</li><li>List 的元素可以通过索引访问。</li></ul><p>综上所述，数组、<code>ArrayList</code> 和 <code>List</code> 都有自己的优缺点和适用场景，具体使用时需要根据实际情况来选择。</p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-30</p></div></div><div class='timeline-item-content'><ol><li>更新文档中的 List 部分</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-19</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Csharp </category>
          
          <category> Csharp提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Csharp提升 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 动态列表 </tag>
            
            <tag> 列表 </tag>
            
            <tag> ArrayList </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中数组、ArrayList和List三者的区别</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/Csharp%E6%8F%90%E5%8D%87/%E6%95%B0%E7%BB%84-ArrayList-List.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/Csharp%E6%8F%90%E5%8D%87/%E6%95%B0%E7%BB%84-ArrayList-List.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p>此文章主要讲解，C#中数组、ArrayList 和 List 三者的区别。</p><blockquote></blockquote><h1 id="数组"><a class="header-anchor" href="#数组">¶</a>数组</h1><p>在这三者之中，数组最早出现的。数组在<strong>内存中是连续存储的</strong>，所以它的索引速度非常快，而且赋值与修改元素也很简单。</p><p>创建数组的方法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="built_in">string</span>[] str = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span>[] number = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>但是数组存在一些不足的地方。数组在声明的时候，必须指定数组的长度，数组创建后在增加长度是十分困难的。并且，在数组的两个数据间插入数据也是很麻烦的。</p><p>数组的长度过长，会造成内存浪费；数组的长度过短，无法添加更多的数据</p><p>如果在声明数组时我们不清楚数组的长度，就会变得很麻烦。</p><h1 id="arraylist-动态列表"><a class="header-anchor" href="#arraylist-动态列表">¶</a>ArrayList（动态列表）</h1><p>动态列表的使用，请参考<a href="https://blog.yuilexi.cn/2023/04/30/Programming/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/#%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%EF%BC%88ArrayList%EF%BC%89">C#高级语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></p><p><code>ArrayList</code>是属于命名空间<code>System.Collections</code>下，在使用该类时必须进行引用，同时继承了<code>IList</code>的接口，提供了数据存储和检索。</p><p><code>ArrayList</code>对象的大小是按照其中存储的数据来动态扩充与收缩的。所以，在声明<code>ArrayList</code>对象时并不需要指定它的长度。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList</span></span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据</span></span><br><span class="line">list1.Add(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">list1.Add(<span class="number">1314</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">list[<span class="number">2</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">list.Remove(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">list.Insert(<span class="number">0</span>, <span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>在<code>ArrayList</code>中，可以插入不同类型的数据。因为<code>ArrayList</code>会把所有插入其中的数据，装箱为<code>Object</code>类型来处理，在我们使用<code>ArrayList</code>处理数据时，很可能会报类型不匹配的错误，也就是<code>ArrayList</code>不是类型安全的，因此，为了正确使用数据，我们还需要进行拆箱操作。在存储或检索值类型时通常发生装箱和取消装箱操作，带来很大的性能耗损。</p><h1 id="泛型-list"><a class="header-anchor" href="#泛型-list">¶</a>泛型 List</h1><p>因为 <code>ArrayList</code> 存在不安全类型与装箱拆箱的缺点，所以出现了泛型的概念。<code>List</code> 类是 <code>ArrayList</code> 类的<strong>泛型等效类</strong>，它的大部分用法都与 <code>ArrayList</code> 相似，因为 <code>List</code> 类也继承了 <code>IList</code> 接口。最关键的区别在于，在声明 <code>List</code> 集合时，我们同时需要为其声明 <code>List</code> 集合内数据的对象类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据</span></span><br><span class="line">list.Add(<span class="number">4</span>);</span><br><span class="line">list.Add(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">list.RemoveAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h1><ol><li>数组：</li></ol><ul><li>数组是一种含有相同类型元素的集合，长度固定且不可更改。</li><li>数组直接存储在内存中，可以快速访问。</li><li>数组的元素可以通过索引访问，索引从 0 开始。</li><li>数组可以是多维的，例如二维数组，三维数组等。</li></ul><ol start="2"><li>ArrayList：</li></ol><ul><li>ArrayList 是 C#中的一个类，可以用来存储任意类型的元素。</li><li>ArrayList 的长度是可变的，可以动态地添加、删除或修改元素。</li><li><strong>ArrayList 不直接存储在内存中，而是存储对元素的引用，因此访问元素比数组慢</strong>。</li><li>ArrayList 的元素可以通过索引访问。</li></ul><ol start="3"><li>List：</li></ol><ul><li>List 是 C#中的一个泛型类，与 ArrayList 类似，也可以存储任意类型的元素。</li><li>List 的长度是可变的，可以动态地添加、删除或修改元素。</li><li>List 与 ArrayList 不同的是，List 直接存储在内存中，可以快速访问元素。</li><li>List 的元素可以通过索引访问。</li></ul><p>综上所述，数组、<code>ArrayList</code> 和 <code>List</code> 都有自己的优缺点和适用场景，具体使用时需要根据实际情况来选择。</p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-30</p></div></div><div class='timeline-item-content'><ol><li>更新文档中的 List 部分</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-19</p></div></div><div class='timeline-item-content'><ol><li>创建文档</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Csharp </category>
          
          <category> Csharp提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Csharp提升 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 动态列表 </tag>
            
            <tag> 列表 </tag>
            
            <tag> ArrayList </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity之UGUI框架(优化版)</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6-%E4%BC%98%E5%8C%96%E7%89%88.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6-%E4%BC%98%E5%8C%96%E7%89%88.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><blockquote><p>此文章主要是针对之前的 UGUI 框架，进行优化和改进。</p><ul><li><a href="https://blog.yuilexi.cn/2023/05/02/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6/">Unity 之 UGUI 框架 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></li><li><a href="https://blog.yuilexi.cn/2023/05/16/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6-%E4%BC%98%E5%8C%96%E7%89%88/">Unity 之 UGUI 框架(优化版) | 🪐 星空鸟 🪐 (yuilexi.cn)</a>🔫🧬 当前位置 🧬</li></ul></blockquote><h1 id="一-框架设计"><a class="header-anchor" href="#一-框架设计">¶</a>一、框架设计</h1><p>由于之前的 UGUI 框架，采用的 UI 模板是 <code>Panel</code> 对象，并将所有的 <code>UI</code> 置于一个 <code>Canvas</code> 下，这样会对性能的影响很大。 <code>Canvas</code> 的<a href="https://zhuanlan.zhihu.com/p/343524911">渲染模式</a>，简单说明就是， <code>Canvas</code> 会把所有子类的 <code>UI</code> 合并到一个 <code>Mesh</code> 里面去，然后再提交渲染后的 <code>UI</code> 数据，因此，当某一个子对象改变时，都要重新绘制<code>Mesh</code> ，这样会大大增加运算时间。</p><p>解决方案如下：</p><ul><li>不用的 <code>UI</code> 直接使用独立的 <code>Canvas</code> 作为面板</li><li>资源使用动态加载，并且已关闭的 <code>UI</code> 面板不缓存</li><li><code>Canvas</code> 之间，尽量避免嵌套</li></ul><p><img src="https://imageshack.yuilexi.cn/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI/%E6%96%B0%E7%89%88UI%E6%A1%86%E6%9E%B6.svg" alt="新版UI框架"></p><h1 id="二-功能实现"><a class="header-anchor" href="#二-功能实现">¶</a>二、功能实现</h1><h2 id="2-1-uitype"><a class="header-anchor" href="#2-1-uitype">¶</a>2.1 <code>UIType</code></h2><p>这是一个枚举类，用于描述所有 <code>UICanvas</code> 的类型（以 <code>UICanvas</code> 的名字作为它的类型），下面只写了两个例子。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> UIType</span><br><span class="line">&#123;</span><br><span class="line">    None,</span><br><span class="line">    MainMenuCanvas,</span><br><span class="line">    SettingsCanvas</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求：</p><ul><li>添加一个 <code>None</code> 作为空类型</li><li>必须以 <code>Canvas</code> 结尾，</li><li><code>UI</code> 资源文件命名要和该枚举中一一对应</li></ul><h2 id="2-2-uilnfo"><a class="header-anchor" href="#2-2-uilnfo">¶</a>2.2 <code>UIlnfo</code></h2><p>该脚本下，只有一个类，用于描述 <code>UICanvas</code> 的类型以及对应模板文件的路径。将该类标记为<strong>可序列化类</strong>，以方便其他解析<code>Json</code>文件方法能够使用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> UIType _type;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _path;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIInfo</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIInfo</span>(<span class="params">UIType uiType, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._type = uiType;</span><br><span class="line">        <span class="keyword">this</span>._path = path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> UIType Type &#123; <span class="keyword">get</span> =&gt; _type; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path &#123; <span class="keyword">get</span> =&gt; _path; <span class="keyword">set</span> =&gt; <span class="keyword">this</span>._path = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用属性器进行封装， <code>UICanvas</code> 的路径信息可以更新，但是其类型不可以更新。</p><h2 id="2-3-baseui"><a class="header-anchor" href="#2-3-baseui">¶</a>2.3 <code>BaseUI</code></h2><p><code>BaseUI</code>里的方法用来描述所有面板共同的一些基本行为。面板的四个行为：进入场景<code>OnEnter</code>、暂停<code>OnPause</code>、继续<code>OnResume</code>（解除暂停）、退出场景<code>OnClose</code>，也是属于这个类的四个方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseUI</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CanvasGroup _canvasGroup;</span><br><span class="line">    <span class="keyword">private</span> UIType _type;</span><br><span class="line">    <span class="keyword">public</span> UIType Type &#123; <span class="keyword">get</span> =&gt; _type;<span class="keyword">protected</span> <span class="keyword">set</span> =&gt; _type = <span class="keyword">value</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameObject.GetComponent&lt;Canvas&gt;() == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.AddComponent&lt;Canvas&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        _canvasGroup = gameObject.GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">        <span class="keyword">if</span> (_canvasGroup == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _canvasGroup = gameObject.AddComponent&lt;CanvasGroup&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-uimanager"><a class="header-anchor" href="#2-4-uimanager">¶</a>2.4 <code>UIManager</code></h2><p><code>UIManager </code>类的该 UI 框架的核心，它负责的工作如下：</p><ol><li>自动更新 <code>Json</code> 文件中记载 <code>UICanvas</code> 的 <code>UIType</code> 与路径</li><li>获取所有的 <code>UIPanel</code> 信息，并将数据加载到脚本中</li><li>使用字典储存所有 <code>UIPanel</code> 的游戏对象信息</li><li>使用栈储存场景中已加载的 <code>UIPanel</code></li></ol><h3 id="2-4-1-单例模式"><a class="header-anchor" href="#2-4-1-单例模式">¶</a>2.4.1 单例模式</h3><p>把<code>UIManager</code>做成单例模式，使其在游戏中，只有一个<code>UIManager</code>类去管理 UI 。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UIManager _instance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> UIManager Instance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">            _instance = <span class="keyword">new</span> UIManager();</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-初始化并自动更新json信息"><a class="header-anchor" href="#2-4-2-初始化并自动更新json信息">¶</a>2.4.2 初始化并自动更新<code>Json</code>信息</h3><p>这里使用<code>Litjson</code>库来解析<code>Json</code>文件，把<code>Litjson.dll</code>文件添加到<code>Plugins</code>下，并且在代码编辑器中添加对应的引用。脚本中引入命名空间，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br></pre></td></tr></table></figure><p>配置<code>UIpanel</code>预制件文件夹的路径以及<code>Json</code>文件路径，如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放 UIPanel 预制件的文件夹路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _canvasPrefabFolder = Application.dataPath + <span class="string">@&quot;/Resources/UICanvasPrefab/&quot;</span>;</span><br><span class="line"><span class="comment">//存放UIPanel信息的Json文件的路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFolderPath = Application.dataPath + <span class="string">@&quot;/Json/UIJson/&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFileName = <span class="string">&quot;UIPanelInfo.json&quot;</span>;</span><br></pre></td></tr></table></figure><p>并且使用列表，用来获取所有的 <code>UIInfo</code> 数据，其中也包括未加载到场景中的 <code>UIInfo</code> 。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;UIInfo&gt; _uIInfoList;<span class="comment">//该列表是存放所有的UIPanelInfo信息，包括未加载到游戏场景中的</span></span><br></pre></td></tr></table></figure><p>构造一个方法：传入<code>Json</code>路径和数据，就能将数据写入<code>Json</code>文件，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteToJsonFile</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName, T t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> json = JsonMapper.ToJson(t);</span><br><span class="line">    <span class="comment">//如果文件夹不存在，就创建文件夹</span></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">        Directory.CreateDirectory(folderPath);</span><br><span class="line">    <span class="comment">//如果文件不存在，就创建文件</span></span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">        File.Create(folderPath + fileName).Dispose();</span><br><span class="line">    <span class="comment">//将数据写入到文件中</span></span><br><span class="line">    File.WriteAllText(folderPath + fileName, json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个方法：传入<code>Json</code>路径，将对应路径下的<code>Json</code>文件中的数据读取到内存（脚本）中，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadFromJsonFIle</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">        Directory.CreateDirectory(folderPath);</span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">        File.WriteAllText(folderPath + fileName, <span class="string">&quot;[]&quot;</span>);</span><br><span class="line">    List&lt;T&gt; t = JsonMapper.ToObject&lt;List&lt;T&gt;&gt;(File.ReadAllText(folderPath + fileName));</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个方法：自动更新 <code>Json</code>文件，并获取全部的模板信息，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitUIInfo</span>()()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先获取当前Json文件中的UIPanelInfo数据</span></span><br><span class="line">    _uIInfoList = ReadFromJsonFIle&lt;UIInfo&gt;(_jsonFolderPath, _jsonFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UIPanel的文件夹对象</span></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(_canvasPrefabFolder))</span><br><span class="line">        Directory.CreateDirectory(_canvasPrefabFolder);</span><br><span class="line">    DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(_canvasPrefabFolder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历文件夹下的每一个prefab文件。</span></span><br><span class="line">    <span class="comment">//如果当前UIPanelInfo列表中有对应类型的模板信息，就更新路径；没有，就添加对应信息到UIPanelInfo列表</span></span><br><span class="line">    <span class="keyword">foreach</span> (FileInfo fileInfo <span class="keyword">in</span> directoryInfo.GetFiles(<span class="string">&quot;*Canvas.prefab&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将对应UIPanel模板的名字转换为UIPanel类型</span></span><br><span class="line">        <span class="comment">//UIType type = (UIType)Enum.Parse(typeof(UIType), fileInfo.Name.Replace(&quot;.prefab&quot;, &quot;&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面的代码不能处理&quot;UIType中不存在对应类型&quot;的情况，因此改为下面的代码(修改时间2023-6-23-21:58)</span></span><br><span class="line">        UIType type;</span><br><span class="line">        <span class="keyword">if</span> (!Enum.TryParse(fileInfo.Name.Replace(<span class="string">&quot;.prefab&quot;</span>, <span class="string">&quot;&quot;</span>), <span class="keyword">out</span> type))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;UIManager.InitInfo() -&gt; TryParse UIType Error!&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">@&quot;UICanvasPrefab/&quot;</span> + Convert.ToString(type); <span class="comment">//基址+对应模板文件名，组成完整地址（不要后缀）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试在列表中寻找UIpanelInfo对象，如果有，则返回对应的对象；如果没有，则返回null</span></span><br><span class="line">        UIInfo uIInfo = _uIInfoList.TrySearchUI(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uIInfo == <span class="literal">null</span>)    <span class="comment">//UIPanel不在该List中</span></span><br><span class="line">        &#123;</span><br><span class="line">            uIInfo = <span class="keyword">new</span> UIInfo(type, path);</span><br><span class="line">            _uIInfoList.Add(uIInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//UIPanel在该List中,更新path值</span></span><br><span class="line">        &#123;</span><br><span class="line">            uIInfo.Path = path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    WriteToJsonFile&lt;List&lt;UIInfo&gt;&gt;(_jsonFolderPath, _jsonFileName, _uIInfoList); <span class="comment">//将更新后的模板信息写入Json文件中去</span></span><br><span class="line">    AssetDatabase.Refresh(); <span class="comment">//刷新资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在<code>UIManager</code>的构造方法中调用<code>InitUIPanelInfo()</code>方法，以便于在该管理类创建时，就进行<code>Json</code>文件的更新。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UIManager</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitUIInfo()();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-实例化游戏canvas对象"><a class="header-anchor" href="#2-4-3-实例化游戏canvas对象">¶</a>2.4.3 实例化游戏<code>Canvas</code>对象</h3><p>首先，先获取当前场景的<code>UISysterm</code>的 <code>Transform</code>组件，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Transform _canvasTransform;<span class="comment"><span class="doctag">///</span>/存放当前场景中的所有Canvas对象的父级对象的Transform属性</span></span><br><span class="line"><span class="keyword">public</span> Transform CanvasTransform</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_canvasTransform == <span class="literal">null</span>)</span><br><span class="line">            _canvasTransform = GameObject.Find(<span class="string">&quot;UISysterm&quot;</span>).transform;</span><br><span class="line">        <span class="keyword">if</span> (_canvasTransform == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _canvasTransform = <span class="keyword">new</span> GameObject(<span class="string">&quot;UISysterm&quot;</span>).transform;</span><br><span class="line">            _canvasTransform.position = Vector3.zero;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _canvasTransform;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> =&gt; _canvasTransform = <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个方法：传入<code>UI</code>的类型，就能返回对应的<code>Canvas</code>游戏对象，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BaseUI <span class="title">GetUIPanel</span>(<span class="params">UIType type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_uIInfoList == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span> path = _uIInfoList.TrySearchUIPanel(type).Path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resources.Load(path) == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">    GameObject insUIPanel = GameObject.Instantiate(Resources.Load(path)) <span class="keyword">as</span> GameObject; <span class="comment">//创建游戏实例对象</span></span><br><span class="line">    insUIPanel.transform.SetParent(CanvasTransform, <span class="literal">false</span>); <span class="comment">//设置父级对象</span></span><br><span class="line">    <span class="keyword">return</span> insUIPanel.GetComponent&lt;BaseUI&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-保存当前场景中的-uipanel-对象"><a class="header-anchor" href="#2-4-4-保存当前场景中的-uipanel-对象">¶</a>2.4.4 保存当前场景中的 <code>UIPanel</code> 对象</h3><p>一般情况下，不同的<code>UI</code>是先打开的后关闭，后打开的先关闭，这符合<strong>栈</strong>的性质。因此使用栈来存放当前的已打开的<code>Canvas</code>对象。</p><p>首先，创建一个栈的字段，用于存放已打开的<code>Canvas</code>对象，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushUIPanel</span>(<span class="params">UIType type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前栈为空</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">        _currentUIPanels = <span class="keyword">new</span> Stack&lt;BaseUI&gt;();</span><br><span class="line">    <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel暂停</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BaseUI topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">        topUIPanel.OnPause();</span><br><span class="line">    &#125;</span><br><span class="line">    BaseUI newUIPanel = GetUIPanel(type);</span><br><span class="line">    _currentUIPanels.Push(newUIPanel);</span><br><span class="line">    newUIPanel.OnEnter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出栈算法：构造一个方法，输入顶级<code>UI</code>的类型，就能弹出对应的<code>Canvas</code>，并调用<code>OnExit</code>方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PopUIPanel</span>(<span class="params">UIType type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前栈为空，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//如果当前栈中没有UIPanel，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出栈顶的UIPanel，并调用OnExit方法</span></span><br><span class="line">    BaseUI topUIPanel = _currentUIPanels.Pop();</span><br><span class="line">    <span class="keyword">if</span> (topUIPanel.Type != type)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogError(<span class="string">&quot;弹出的UIPanel类型不匹配&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    topUIPanel.OnClose();</span><br><span class="line">    <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel恢复</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">    topUIPanel.OnResume();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-初始化并删除场景旧的uipanel"><a class="header-anchor" href="#2-4-5-初始化并删除场景旧的uipanel">¶</a>2.4.5 初始化并删除场景旧的<code>UIPanel</code></h3><p>如果场景中残留有旧的<code>Canvas</code>，那么就先删除当前场景中所有的<code>Canvas</code>，然后再加载<code>UIManager</code>，以便于向场景中添加新的<code>UI</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckUICanvasWhenGameBegin</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> CanvasTransform)</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject.DestroyImmediate(child.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在构造方法中添加这个方法，以便于在游戏运行开始就执行该方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">UIManager</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitUIPanelInfo(); <span class="comment">//初始化UIPanelInfo</span></span><br><span class="line">    CheckUICanvasWhenGameBegin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-uiloader"><a class="header-anchor" href="#2-5-uiloader">¶</a>2.5 <code>UILoader</code></h2><p>这个类负责在游戏开始的时候加载所有需要的游戏配置。在该 UI 框架里，<code>UILoader</code>负责在游戏刚开始运行时，提供给<code>Manager</code>类中的<code>Canvas</code>信息，并加载主菜单面板<code>MainMenuCanvas</code>。由于这个类需要挂在场景中的物体上，所以需要继承自<code>MonoBehaviour</code>。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UILoader</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.CanvasTransform = <span class="keyword">this</span>.transform;</span><br><span class="line">        UIManager.Instance.PushUIPanel(UIType.BackgroundCanvas);</span><br><span class="line">        UIManager.Instance.PushUIPanel(UIType.MainMenuCanvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-完善baseuipanel类"><a class="header-anchor" href="#2-6-完善baseuipanel类">¶</a>2.6 完善<code>BaseUIPanel</code>类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">false</span>;</span><br><span class="line">    _canvasGroup.alpha = <span class="number">0</span>;</span><br><span class="line">    gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    Destroy(<span class="keyword">this</span>.gameObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-拓展"><a class="header-anchor" href="#三-拓展">¶</a>三、拓展</h1><h2 id="3-1-列表操作的扩展"><a class="header-anchor" href="#3-1-列表操作的扩展">¶</a>3.1 列表操作的扩展</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ListExtesion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 尝试在列表中查找指定的元素</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelInfos&quot;&gt;</span>当前操作的列表<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span>定的元素<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果列表中由指定的元素，就返回该元素；如果没有，就返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UIInfo <span class="title">TrySearchUI</span>(<span class="params"><span class="keyword">this</span> List&lt;UIInfo&gt; uIInfos, UIType uIType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (UIInfo uIInfo <span class="keyword">in</span> uIInfos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uIInfo.Type == uIType)</span><br><span class="line">                <span class="keyword">return</span> uIInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-事件响应"><a class="header-anchor" href="#四-事件响应">¶</a>四、事件响应</h1><p>与旧版的基本一样。</p><h1 id="readme"><a class="header-anchor" href="#readme">¶</a>README</h1><h2 id="完整代码"><a class="header-anchor" href="#完整代码">¶</a>完整代码</h2><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-23</p></div></div><div class='timeline-item-content'><ol><li>在上述 2.4.2 中，“将文件名的字符串转化为对应枚举值”进行优化，能够处理“转换后的枚举值不存在”的问题</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-9</p></div></div><div class='timeline-item-content'><ol><li>在列表的扩展中，修复一个错误。</li><li>修复图片显示异常的问题</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-16</p></div></div><div class='timeline-item-content'><ol><li>完成对 UGUI 优化版的整理</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 功能框架 </category>
          
          <category> Csharp </category>
          
          <category> GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 功能框架 </tag>
            
            <tag> GUI </tag>
            
            <tag> UGUI </tag>
            
            <tag> Json </tag>
            
            <tag> Litjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity组件-Transform</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transforms.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transforms.html</url>
      
        <content type="html"><![CDATA[<h1 id="transform-组件"><a class="header-anchor" href="#transform-组件">¶</a>Transform-组件</h1><p><strong><code>Transform</code></strong> 用于存储<strong>游戏对象</strong>的位置、旋转、缩放和父级状态，因此非常重要。游戏对象将始终附加 <code>Transform</code> 组件。如果没有变换组件，则无法移除变换或创建游戏对象。</p><h2 id="transform组件"><a class="header-anchor" href="#transform组件">¶</a><code>Transform</code>组件</h2><p><code>Transform</code> 组件确定对象在场景中的<strong>位置和姿态</strong>。<strong>每个游戏对象都有一个变换</strong>。</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-TransformTransform%E7%BB%84%E4%BB%B6%E8%A7%86%E5%9B%BE.png" alt="Transform组件视图"></p><h2 id="属性"><a class="header-anchor" href="#属性">¶</a>属性</h2><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Position</strong></td><td style="text-align:left">相对于父级（本地坐标系），在 X、Y 和 Z 坐标中的位置。</td></tr><tr><td style="text-align:center"><strong>Rotation</strong></td><td style="text-align:left">相对于父级，围绕 X、Y 和 Z 轴的旋转，以度为单位。</td></tr><tr><td style="text-align:center"><strong>Scale</strong></td><td style="text-align:left">沿 X、Y 和 Z 轴的变换比例。值“1”是原始大小（导入对象的大小）。选择值旁边的链接图标以切换比例缩放。比例缩放按比例调整刻度值。</td></tr></tbody></table><blockquote><p>注意：每个<code>Transform</code>组件面板中的<strong>Position</strong>，指的是相对于父级的位置，一般游戏对象在场景中的位置是世界坐标，因此需要将子级的<strong>Position</strong>以及对应的每一级父级的<strong>Position</strong>相加，才能得到<strong>世界坐标</strong>。而脚本中的<code>Transform</code>对象下的<strong>Position</strong>属性，就是世界坐标。这一点很重要</p><p>为了说明这一点，请看下面例子。</p><p>首先设置父级坐标为 <code>(-2,0,0)</code> ，子级坐标 <code>(0,0,0)</code> ，然后打印出子级 <code>Transform</code> 脚本对象的<strong>Position</strong>属性。</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transform%E7%88%B6%E7%BA%A7%E5%9D%90%E6%A0%87.png" alt="父级坐标"></p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transform%E5%AD%90%E7%BA%A7%E5%9D%90%E6%A0%87.png" alt="子级坐标"></p><p>将下面测试脚本挂载到子级上</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="keyword">this</span>.transform.position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印的结果为：</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transform%E8%BE%93%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt="输出的结果"></p></blockquote><h2 id="编辑转换"><a class="header-anchor" href="#编辑转换">¶</a>编辑转换</h2><p><code>Transform</code> 在 X、Y 和 Z 轴的 3D 空间中或在 X 和 Y 轴的 2D 空间中进行操作。在 Unity 中，这些轴分别由红色、绿色和蓝色表示。</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transform%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png" alt="左手坐标系"></p><p>在场景中，您可以使用移动、旋转和缩放工具修改<code>Transform</code>。这些工具位于 Unity 编辑器的左上角。</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-Transform%E8%BD%AC%E6%8D%A2-%E5%B9%B3%E7%A7%BB.png" alt="转换"></p><h2 id="parenting-父级"><a class="header-anchor" href="#parenting-父级">¶</a>Parenting——父级</h2><p><code>Parenting</code> 是使用 Unity 时要了解的最重要的概念之一。当游戏对象是另一个游戏对象的<strong>父级</strong>，<strong>子游戏对象将完全按照其父游戏对象的方式移动、旋转和缩放</strong>。</p><p>可以把 <code>Parenting</code> 想象成手臂和身体之间的关系：每当你的身体移动时，你的手臂也会随之移动。子对象也可以有自己的子对象，依此类推。所以你的手可以被视为你手臂的“孩子”，然后每只手都有几根手指，等等。任何对象都可以有多个子对象，但只能有一个父对象。这些多层次的父子关系构成了转换<em>层次结构</em>。</p><p>层次结构最顶端的对象（即层次结构中唯一没有父对象的对象）称为<strong>根</strong>。</p><p>可以通过将<strong>层次结构视图中</strong>的任何游戏对象拖动到另一个游戏对象上来创建父级。这将在两个游戏对象之间创建父子关系。</p><h2 id="使用-transform-的小提示"><a class="header-anchor" href="#使用-transform-的小提示">¶</a>使用 <code>Transform</code> 的小提示</h2><ul><li>在父级转换时，在添加子级之前将父级的位置设置为 &lt;0，0，0&gt; 非常有用。这意味着子项的本地坐标将与全局坐标相同，从而更容易确保子项处于正确的位置。</li><li>如果您正在使用<strong>刚体</strong>，对于物理仿真，请务必阅读<a href="https://docs.unity3d.com/Manual/class-Rigidbody.html">刚体</a>组件参考页面上的 Scale 属性。</li><li>您可以从首选项（<strong>菜单：Unity &gt;首选项</strong>）更改变换轴（和其他 UI 元素）的颜色，然后选择<strong>颜色和键</strong>面板）。</li><li>更改比例会影响子变换的位置。例如，将父项缩放为 （0，0，0） 会将所有子项定位为相对于父项的 （0，0，0）。</li></ul><h1 id="transform-脚本"><a class="header-anchor" href="#transform-脚本">¶</a>Transform——脚本</h1><h3 id="描述"><a class="header-anchor" href="#描述">¶</a>描述</h3><p>对象的位置、旋转和缩放。场景中的每个对象都有一个变换。 它用于存储和操作对象的位置，旋转和缩放。 每个变换都可以有一个父级，它允许您分层应用位置、旋转和缩放。这是在“层次结构”窗格中看到的层次结构。 它们还支持<strong>枚举器</strong>，因此您可以使用以下方法循环遍历子项：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Transform transform = gameObject.GetComponent&lt;Transform&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> transform)</span><br><span class="line">        &#123;</span><br><span class="line">            child.position += Vector3.up * <span class="number">10.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用属性"><a class="header-anchor" href="#常用属性">¶</a>常用属性</h2><p>下面只罗列在游戏开发中，最常用的属性，完整属性列表请参看<a href="https://docs.unity3d.com/ScriptReference/Transform.html">Unity - Scripting API: Transform (unity3d.com)</a>官方文档</p><table><thead><tr><th><a href="https://docs.unity3d.com/ScriptReference/Transform-childCount.html">childCount</a></th><th>父级 <code>Transform</code> 有的子级数。（注意：这里是一级子级数）。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-localPosition.html">localPosition</a></td><td>相对于父级的位置。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-localRotation.html">localRotation</a></td><td>相对于父级的旋转。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-localScale.html">localScale</a></td><td>相对于父级的缩放。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-parent.html">parent</a></td><td>当前 <code>Transform</code> 的父级的 <code>Transform</code> 对象。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-position.html">position</a></td><td>世界坐标空间位置。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform-rotation.html">rotation</a></td><td>一个四元数，用于存储在世界空间中的旋转。</td></tr></tbody></table><h2 id="常用公共方法"><a class="header-anchor" href="#常用公共方法">¶</a>常用公共方法</h2><p>下面只罗列在游戏开发中，最常用的公共方法，完整公共方法列表请参看<a href="https://docs.unity3d.com/ScriptReference/Transform.html">Unity - Scripting API: Transform (unity3d.com)</a>官方文档</p><table><thead><tr><th><a href="https://docs.unity3d.com/ScriptReference/Transform.DetachChildren.html">DetachChildren</a></th><th>取消所有孩子的父母。如果要在不销毁子层次结构的情况下销毁层次结构的根，则很有用。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.Find.html">Find</a></td><td><strong>按名称查找</strong>子项并将其返回。注意：只会在一级子级中查找。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.GetChild.html">GetChild</a></td><td>按索引返回转换子项。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.IsChildOf.html">IsChildOf</a></td><td>返回一个布尔值，该值指示转换是否为给定转换的子级。 如果此转换是子转换，则为真，深度子项（子项的子项）或与此转换相同，否则为假。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.Rotate.html">Rotate</a></td><td>使用 Transform.Rotate 以多种方式旋转游戏对象。旋转通常以欧拉角而不是四元数的形式提供。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.RotateAround.html">RotateAround</a></td><td>围绕在世界坐标中通过点的轴按角度旋转变换。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.SetParent.html"><strong>SetParent</strong></a></td><td><strong>设置转换的父级</strong>。</td></tr><tr><td><a href="https://docs.unity3d.com/ScriptReference/Transform.Translate.html">Translate</a></td><td>沿平移方向和距离移动变换。（世界坐标的封装）</td></tr></tbody></table><h3 id="find-方法"><a class="header-anchor" href="#find-方法">¶</a><code>Find()</code> 方法</h3><p>下面进行测试：</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-TransformFind%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95-1.png" alt="Find方法测试-1"></p><p>挂载的脚本如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Transform transform = gameObject.GetComponent&lt;Transform&gt;();</span><br><span class="line">        Transform transform1 = transform.Find(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (transform1 == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(transform1.gameObject.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的控制台输出的结果为：</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/Unity%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6-TransformFind%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95-%E7%BB%93%E6%9E%9C.png" alt="Find方法测试-结果"></p><blockquote><p>总结：上面的结果可以看出， <code>Find()</code> 方法，并不能找到二级子级</p></blockquote><h3 id="setparent-方法"><a class="header-anchor" href="#setparent-方法">¶</a><code>SetParent（）</code> 方法</h3><p>声明</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParent</span>(<span class="params">Transform parent</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParent</span>(<span class="params">Transform parent, <span class="built_in">bool</span> worldPositionStays</span>)</span>;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>parent</code> ：要使用的父转换。</li><li><code>worldPositionStays</code><ul><li><code> true</code> ：修改相对于父级的位置、缩放和旋转，<strong>以使对象保持与以前相同的世界空间位置、旋转和缩放</strong>。</li><li><code>false</code> ：设置相对于父级的位置、缩放和旋转，为默认值。（此举可能会改变世界坐标系空间的状态）</li></ul></li></ul><h1 id="readme"><a class="header-anchor" href="#readme">¶</a>README</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-12</p></div></div><div class='timeline-item-content'><ol><li>添加了 <code>Find()</code> 方法的测试</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-11</p></div></div><div class='timeline-item-content'><ol><li>创建文档，介绍 Transform 组件的使用</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Unity组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Unity组件 </tag>
            
            <tag> Transform变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity之UGUI框架</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI%E6%A1%86%E6%9E%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><p><code>UI</code>是一个游戏必不可少的一部分。对于一个游戏系统而言，它的<code>UI</code>也是多种多样的。经常地，因为要满足不同的需求，当前场景中的<code>UI</code>也会频繁切换。因此，为了更方便的管理这些<code>UI</code>的状态和行为，开发一个基于<code>UGUI</code>系统的**<code>UI</code>管理框架**。</p><h1 id="一-需求分析"><a class="header-anchor" href="#一-需求分析">¶</a>一、需求分析</h1><ol><li>进入游戏时，首先会加载**主 UI **，**主 UI **随着游戏的进入和退出而加载和销毁。</li><li>通过一些按钮，我们可以打开其他的 UI 界面，同时主 UI 不会消失</li><li>当前场景可以同时存在多级 UI ，只有处于顶级的 UI 才能被选中并进行操作</li><li>除了主 UI 外的其他 UI 均可以在游戏场景未关闭下，手动关闭</li></ol><h1 id="二-框架设计"><a class="header-anchor" href="#二-框架设计">¶</a>二、框架设计</h1><p><img src="http://imageshack.yuilexi.cn/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI/UIFramework.svg" alt="UIFramework"></p><h1 id="三-功能实现"><a class="header-anchor" href="#三-功能实现">¶</a>三、功能实现</h1><h2 id="3-1-uipanel"><a class="header-anchor" href="#3-1-uipanel">¶</a>3.1 <code>UIPanel</code></h2><p>这一部分是用于描述 UI 面板属性的一些脚本。</p><h3 id="3-1-1-uipaneltype脚本"><a class="header-anchor" href="#3-1-1-uipaneltype脚本">¶</a>3.1.1 <code>UIPanelType</code>脚本</h3><p>这是一个枚举类，用于描述所有<code>UIPanel</code>的类型（以<code>UIPanel</code>的名字作为它的类型），下面只写了两个例子。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> UIPanelType</span><br><span class="line">&#123;</span><br><span class="line">    MainMenuUIPanel,</span><br><span class="line">    SettingUIPanel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-uipanelinfo脚本"><a class="header-anchor" href="#3-1-2-uipanelinfo脚本">¶</a>3.1.2 <code>UIPanelInfo</code>脚本</h3><p>该脚本下，只有一个类，用于描述<code>UIPanel</code>的类型以及对应模板文件的路径，并且使用属性器进行封装。将该类标记为<strong>可序列化类</strong>，以方便其他解析<code>Json</code>文件方法能够使用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIPanelInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> UIPanelType _type;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _path;       <span class="comment">//注意，脚本使用Rescources.load()动态加载，这里的文件路径不需要后缀</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIPanelInfo</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIPanelInfo</span>(<span class="params">UIPanelType type, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _type = type;</span><br><span class="line">        _path = path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> UIPanelType Type</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _type; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _type = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _path; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _path = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-baseuipanel脚本"><a class="header-anchor" href="#3-1-3-baseuipanel脚本">¶</a>3.1.3 <code>BaseUIPanel</code>脚本</h3><p><s>由于<code>BaseUIPanel</code>脚本需要挂载到所有面板对象上，因此需要继承<code>MonoBehaviour</code> 。</s> <code>BasePanel</code>里的方法用来描述所有面板共同的一些基本行为，面板的四个状态：进入场景<code>OnEnter</code>、暂停<code>OnPause</code>、继续<code>OnResume</code>（解除暂停）、退出场景<code>OnExit</code>，也是属于这个类的四个方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseUIPanel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-manager"><a class="header-anchor" href="#3-2-manager">¶</a>3.2 <code>Manager</code></h2><p><code>UIManager</code>类的该 UI 框架的核心，它负责的工作如下：</p><ol><li>自动更新<code>Json</code>文件中记载<code>UIPanel</code>的<code>UIPanelType</code>与路径</li><li>获取所有的<code>UIPanel</code>信息，并将数据加载到脚本中</li><li>使用字典储存所有<code>UIPanel</code>的游戏对象信息</li><li>使用栈储存场景中已加载的<code>UIPanel</code></li></ol><h3 id="3-2-1-单例模式"><a class="header-anchor" href="#3-2-1-单例模式">¶</a>3.2.1 单例模式</h3><p>把<code>UIManager</code>做成单例模式，使其在游戏中，只有一个<code>UIManager</code>类去管理 UI 。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UIManager s_instance;</span><br><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> UIManager Instance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s_instance == <span class="literal">null</span>)</span><br><span class="line">            s_instance = <span class="keyword">new</span> UIManager();</span><br><span class="line">        <span class="keyword">return</span> s_instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-初始化并自动更新json信息"><a class="header-anchor" href="#3-2-2-初始化并自动更新json信息">¶</a>3.2.2 初始化并自动更新<code>Json</code>信息</h3><p>这里使用<code>Litjson</code>库来解析<code>Json</code>文件，把<code>Litjson.dll</code>文件添加到对应路径下，并且在代码编辑器中添加对应的引用。脚本中引入命名空间，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br></pre></td></tr></table></figure><p>配置<code>UIpanel</code>预制件文件夹的路径以及<code>Json</code>文件路径，如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放 UIPanel 预制件的文件夹路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _basePahtUIPanelPrefabFolder = Application.dataPath + <span class="string">@&quot;/Resources/UIPanelPrefab/&quot;</span>;</span><br><span class="line"><span class="comment">//存放UIPanel信息的Json文件的路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFolderPath = Application.dataPath + <span class="string">@&quot;/Json/UIJson/&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFileName = <span class="string">&quot;UIPanelInfo.json&quot;</span>;</span><br></pre></td></tr></table></figure><p>并且创建一个列表，用来获取所有的<code>UIPanelInfo</code>数据，其中也包括未加载到场景中的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;UIPanelInfo&gt; _uIPanelInfos;<span class="comment">//该列表是存放所有的UIPanelInfo信息，包括未加载到游戏场景中的</span></span><br></pre></td></tr></table></figure><p>构造一个方法：传入<code>Json</code>路径和数据，并且将数据写入<code>Json</code>文件，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteToJsonFile</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName, T t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> json = JsonMapper.ToJson(t);</span><br><span class="line">    <span class="comment">//如果文件夹不存在，就创建文件夹</span></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">        Directory.CreateDirectory(folderPath);</span><br><span class="line">    <span class="comment">//如果文件不存在，就创建文件</span></span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">        File.Create(folderPath + fileName).Dispose();</span><br><span class="line">    <span class="comment">//将数据写入到文件中</span></span><br><span class="line">    File.WriteAllText(folderPath + fileName, json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个方法：传入<code>Json</code>路径，将对应路径下的<code>Json</code>文件中的数据读取到内存（脚本）中，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadFromJsonFIle</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">        Directory.CreateDirectory(folderPath);</span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">        File.WriteAllText(folderPath + fileName, <span class="string">&quot;[]&quot;</span>);</span><br><span class="line">    List&lt;T&gt; t = JsonMapper.ToObject&lt;List&lt;T&gt;&gt;(File.ReadAllText(folderPath + fileName));</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个方法：自动更新 <code>Json</code>文件，并获取全部的模板信息，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitUIPanelInfo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先获取当前Json文件中的UIPanelInfo数据</span></span><br><span class="line">    _uIPanelInfos = ReadFromJsonFIle&lt;UIPanelInfo&gt;(_jsonFolderPath, _jsonFileName);</span><br><span class="line">    <span class="comment">//创建UIPanel的文件夹对象</span></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(_basePahtUIPanelPrefabFolder))</span><br><span class="line">        Directory.CreateDirectory(_basePahtUIPanelPrefabFolder);</span><br><span class="line">    DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(_basePahtUIPanelPrefabFolder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历文件夹下的每一个prefab文件。</span></span><br><span class="line">    <span class="comment">//如果当前UIPanelInfo列表中有对应类型的模板信息，就更新路径；没有，就添加对应信息到UIPanelInfo列表</span></span><br><span class="line">    <span class="keyword">foreach</span> (FileInfo fileInfo <span class="keyword">in</span> directoryInfo.GetFiles(<span class="string">&quot;*prefab&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将对应UIPanel模板的名字转换为UIPanel类型</span></span><br><span class="line">        UIPanelType type = (UIPanelType)Enum.Parse(<span class="keyword">typeof</span>(UIPanelType), fileInfo.Name.Replace(<span class="string">&quot;.prefab&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">@&quot;UIPanelPrefab/&quot;</span> + Convert.ToString(type); <span class="comment">//基址+对应模板文件名，组成完整地址（不要后缀）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试在列表中寻找UIpanelInfo对象，如果有，则返回对应的对象；如果没有，则返回null</span></span><br><span class="line">        UIPanelInfo uIPanelInfo = _uIPanelInfos.TrySearchUIPanel(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uIPanelInfo == <span class="literal">null</span>)    <span class="comment">//UIPanel不在该List中</span></span><br><span class="line">        &#123;</span><br><span class="line">            uIPanelInfo = <span class="keyword">new</span> UIPanelInfo(type, path);</span><br><span class="line">            _uIPanelInfos.Add(uIPanelInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//UIPanel在该List中,更新path值</span></span><br><span class="line">        &#123;</span><br><span class="line">            uIPanelInfo.Path = path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    WriteToJsonFile&lt;List&lt;UIPanelInfo&gt;&gt;(_jsonFolderPath, _jsonFileName, _uIPanelInfos); <span class="comment">//将更新后的模板信息写入Json文件中去</span></span><br><span class="line">    AssetDatabase.Refresh(); <span class="comment">//刷新资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在<code>UIManager</code>的构造方法中调用<code>InitUIPanelInfo()</code>方法，以便于在该管理类创建时，就进行<code>Json</code>文件的更新。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UIManager</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitUIPanelInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-实例化游戏uipanel对象"><a class="header-anchor" href="#3-2-3-实例化游戏uipanel对象">¶</a>3.2.3 实例化游戏<code>UIPanel</code>对象</h3><p>首先，先获取当前场景的<code>Canvas</code>的 <code>Transform</code>组件，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Transform _canvasTransform;<span class="comment">//存放当前场景中的Canvas对象的Transform属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Transform</span></span><br><span class="line"><span class="keyword">public</span> Transform CanvasTransform</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_canvasTransform == <span class="literal">null</span>)</span><br><span class="line">            _canvasTransform = GameObject.Find(<span class="string">&quot;Canvas&quot;</span>).transform;</span><br><span class="line">        <span class="keyword">return</span> _canvasTransform;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; _canvasTransform = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上述存在一个问题，使用<code>GameObject.Find(&quot;Canvas&quot;)</code>方法，性能很低，会占用更多的时间。改进方法中包含<code>set&#123;&#125;</code>部分，后续会讲解原因。</p><p>构造一个方法：传入<code>UIPanel</code>的类型，就能返回对应的<code>Panel</code>游戏对象，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BaseUIPanel <span class="title">GetUIPanel</span>(<span class="params">UIPanelType uIPanelType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_uIPanelInfos == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> path = _uIPanelInfos.TrySearchUIPanel(uIPanelType).Path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resources.Load(path) == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">    GameObject insUIPanel = GameObject.Instantiate(Resources.Load(path)) <span class="keyword">as</span> GameObject; <span class="comment">//创建游戏实例对象</span></span><br><span class="line">    insUIPanel.transform.SetParent(CanvasTransform, <span class="literal">false</span>); <span class="comment">//设置父级对象</span></span><br><span class="line">    <span class="keyword">return</span> insUIPanel.GetComponent&lt;BaseUIPanel&gt;(); <span class="comment">//返回BaseUIPanel脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-保存当前场景中的-uipanel-对象"><a class="header-anchor" href="#3-2-4-保存当前场景中的-uipanel-对象">¶</a>3.2.4 保存当前场景中的 UIPanel 对象</h3><p>一般情况下，不同的<code>UI</code>是先打开的后关闭，后打开的先关闭，这符合<strong>栈</strong>的性质。因此使用栈来存放当前的已打开的<code>UIPanel</code>对象。</p><p>首先，创建一个栈的字段，用于存放已打开的<code>UIPanel</code>对象，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Stack&lt;BaseUIPanel&gt; _currentUIPanels;<span class="comment">//存放当前场景中已加载的UIPanel对象</span></span><br></pre></td></tr></table></figure><p>入栈算法：构造一个方法，将对应的<code>UIPanel</code>压入栈中，并调用<code>OnEnter</code>方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushUIPanel</span>(<span class="params">UIPanelType uIPanelType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前栈为空</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">        _currentUIPanels = <span class="keyword">new</span> Stack&lt;BaseUIPanel&gt;();</span><br><span class="line">    <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel暂停</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BaseUIPanel topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">        topUIPanel.OnPause();</span><br><span class="line">    &#125;</span><br><span class="line">    BaseUIPanel newUIPanel = GetUIPanel(uIPanelType);</span><br><span class="line">    _currentUIPanels.Push(newUIPanel);</span><br><span class="line">    newUIPanel.OnEnter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出栈算法：构造一个方法，输入顶级<code>UIPanel</code>的类型，就能弹出对应的<code>UIPanel</code>，并调用<code>OnExit</code>方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PopUIPanel</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果当前栈为空，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//如果当前栈中没有UIPanel，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出栈顶的UIPanel，并调用OnExit方法</span></span><br><span class="line">    BaseUIPanel topUIPanel = _currentUIPanels.Pop();</span><br><span class="line">    topUIPanel.OnEixt();</span><br><span class="line">    <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel恢复</span></span><br><span class="line">    <span class="keyword">if</span> (_currentUIPanels.Count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">    topUIPanel.OnResume();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-初始化并删除场景已存在的uipanel"><a class="header-anchor" href="#3-2-5-初始化并删除场景已存在的uipanel">¶</a>3.2.5 初始化并删除场景已存在的<code>UIPanel</code></h3><p>如果场景中残留有旧的<code>UIPanel</code>，那么就先删除当前场景中所有的<code>UIPanel</code>，然后再加载<code>UIManager</code>，以便于向场景中添加新的<code>UI</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckUIPanelWhenGameBegin</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;CanvasTransform.childCount&gt; i;)</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject.DestroyImmediate(CanvasTransform.GetChild(i).gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：上述方法中，for 循环并没有将循环因子<code>i</code>进行自增处理，这是由于<code>CanvasTransform.childCount</code>是在动态变化的，因此我们判断的条件是<code>CanvasTransform.childCount&lt;=0</code>，终止循环。</p></blockquote><p>并在构造方法中添加这个方法，以便于在游戏运行开始就执行该方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">UIManager</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitUIPanelInfo(); <span class="comment">//初始化UIPanelInfo</span></span><br><span class="line">    CheckUIPanelWhenGameBegin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-uimanagerloader脚本"><a class="header-anchor" href="#3-3-uimanagerloader脚本">¶</a>3.3 <code>UIManagerLoader</code>脚本</h2><p>这个类负责在游戏开始的时候加载所有需要的游戏配置。在该 UI 框架里，<code>UIManagerLoader</code>负责在游戏刚开始运行时，提供给<code>Manager</code>类中的<code>Canvas</code>信息，并加载主菜单面板<code>MainMenuPanel</code>。由于这个类需要挂在场景中的物体上，所以需要继承自<code>MonoBehaviour</code>。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先把当前场景中的Canvas对象的Transform属性赋值给UIManager的CanvasTransform属性</span></span><br><span class="line"><span class="comment">//游戏一开始就加载MainMenuUIPanel</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    UIManager.Instance.CanvasTransform = <span class="keyword">this</span>.transform;</span><br><span class="line">    UIManager.Instance.PushUIPanel(UIPanelType.MainMenuUIPanel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="#3-2-3-%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%B8%B8%E6%88%8FUIPanel%E5%AF%B9%E8%B1%A1">3.2.3 实例化游戏<code>UIPanel</code>对象</a>中，我们提到了使用<code>GameObject.Find(&quot;Canvas&quot;)</code>方法寻找到当前的 UI 画布，但是<code>GameObject.Find(&quot;&quot;)</code>的性能较低，可能会占用较长的时间。因此，改进方法中包含<code>set&#123;&#125;</code>部分，那么可以在<code>UIManagerLoader</code>脚本中，向<code>Manager</code>类传入对应的画布对象，能更快的获取到<code>Canvas</code>对象，此举需要将该脚本挂载到 <code>Canvas</code> 游戏对象上。</p><h2 id="3-4-完善baseuipanel类"><a class="header-anchor" href="#3-4-完善baseuipanel类">¶</a>3.4 完善<code>BaseUIPanel</code>类</h2><h3 id="3-4-1-获取canvasgroup"><a class="header-anchor" href="#3-4-1-获取canvasgroup">¶</a>3.4.1 获取<code>CanvasGroup</code></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CanvasGroup _canvasGroup;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup = GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">    <span class="keyword">if</span> (_canvasGroup == <span class="literal">null</span>)</span><br><span class="line">        _canvasGroup = gameObject.AddComponent&lt;CanvasGroup&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后完善四个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打开时需要执行的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">    _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 暂停时需要执行的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">false</span>;</span><br><span class="line">    _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重新启动时需要执行的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">    _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">    _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭时需要执行的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    Destroy(<span class="keyword">this</span>.gameObject, <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-扩展"><a class="header-anchor" href="#3-5-扩展">¶</a>3.5 扩展</h2><h3 id="3-5-1-列表操作的扩展"><a class="header-anchor" href="#3-5-1-列表操作的扩展">¶</a>3.5.1 列表操作的扩展</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ListExtesion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 尝试在列表中查找指定的元素</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelInfos&quot;&gt;</span>当前操作的列表<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span>定的元素<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果列表中由指定的元素，就返回该元素；如果没有，就返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UIPanelInfo <span class="title">TrySearchUIPanel</span>(<span class="params"><span class="keyword">this</span> List&lt;UIPanelInfo&gt; uIPanelInfos, UIPanelType uIPanelType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (UIPanelInfo uIPanelInfo <span class="keyword">in</span> uIPanelInfos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uIPanelInfo.Type == uIPanelType)</span><br><span class="line">                <span class="keyword">return</span> uIPanelInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-事件响应"><a class="header-anchor" href="#四-事件响应">¶</a>四、事件响应</h1><p>首先创建新的文件夹<code>UIEvents</code>，然后再该文件夹下创建对应的脚本。例如：对于<code>MainMenuUIPanel</code>面板，创建<code>MainMenuUIPanel</code>类，并继承自<code>BaseUIPanel</code>。并对父类<code>BaseUIPanel</code>中的虚方法进行重写和调用，并构造该面板独有的事件响应函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainMenuUIPanel</span> : <span class="title">BaseUIPanel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEnter();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnEnter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnPause();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnPause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnResume();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnResume&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEixt();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnEixt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打开设置界面的按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSettingClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.PushUIPanel(UIPanelType.SettingUIPanel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将此脚本，挂载到对应的游戏对象上，然后再对应的按钮上设置点击响应事件。</p><p><img src="http://imageshack.yuilexi.cn/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI/Panel%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%9C%AC.png" alt="Panel添加脚本"></p><p><img src="http://imageshack.yuilexi.cn/Unity3D/%E5%8A%9F%E8%83%BD%E6%A1%86%E6%9E%B6/UGUI/%E6%B7%BB%E5%8A%A0%E5%93%8D%E5%BA%94%E4%BA%8B%E4%BB%B6.png" alt="添加响应事件"></p><h1 id="readme"><a class="header-anchor" href="#readme">¶</a>README</h1><h2 id="完整代码"><a class="header-anchor" href="#完整代码">¶</a>完整代码</h2><details class="folding-tag" ><summary> 完整代码 </summary>              <div class='content'>              <ul><li><p>UIFramework</p><ul><li><p>UIPanel</p><ul><li><p>UIPanelType.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 枚举，用于标识UIPanel的类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> UIPanelType</span><br><span class="line">&#123;</span><br><span class="line">    MainMenuUIPanel,</span><br><span class="line">    SettingUIPanel,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UIPanelInfo.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 描述UIPanel的信息，包括类型和路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIPanelInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> UIPanelType _type;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _path;       <span class="comment">//注意，脚本使用Rescources.load()动态加载，这里的文件路径不需要后缀</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIPanelInfo</span>()</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIPanelInfo</span>(<span class="params">UIPanelType type, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _type = type;</span><br><span class="line">        _path = path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> UIPanelType Type</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _type; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _type = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _path; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _path = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BasePanel.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">    </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 该类需要挂载到每一个Panel的预制件上，因此继承MonoBehaviour</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseUIPanel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CanvasGroup _canvasGroup;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _canvasGroup = GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">        <span class="keyword">if</span> (_canvasGroup == <span class="literal">null</span>)</span><br><span class="line">            _canvasGroup = gameObject.AddComponent&lt;CanvasGroup&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 打开时需要执行的方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">        _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">        _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 暂停时需要执行的方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _canvasGroup.blocksRaycasts = <span class="literal">false</span>;</span><br><span class="line">        _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 重新启动时需要执行的方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">        _canvasGroup.blocksRaycasts = <span class="literal">true</span>;</span><br><span class="line">        _canvasGroup.alpha = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 关闭时需要执行的方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">        Destroy(<span class="keyword">this</span>.gameObject, <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Manager</p><ul><li><p>UIManager.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 单例模式</span></span><br><span class="line">    <span class="comment">//单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UIManager s_instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UIManager Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s_instance == <span class="literal">null</span>)</span><br><span class="line">                s_instance = <span class="keyword">new</span> UIManager();</span><br><span class="line">            <span class="keyword">return</span> s_instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> 单例模式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 文件路径</span></span><br><span class="line">    <span class="comment">//存放 UIPanel 预制件的文件夹路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _basePahtUIPanelPrefabFolder = Application.dataPath + <span class="string">@&quot;/Resources/UIPanelPrefab/&quot;</span>;</span><br><span class="line">    <span class="comment">//存放UIPanel信息的Json文件的路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFolderPath = Application.dataPath + <span class="string">@&quot;/Json/UIJson/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _jsonFileName = <span class="string">&quot;UIPanelInfo.json&quot;</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> 文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UIPanelInfo&gt; _uIPanelInfos;   <span class="comment">//该列表是存放所有的UIPanelInfo信息，包括未加载到游戏场景中的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Transform _canvasTransform; <span class="comment">//存放当前场景中的Canvas对象的Transform属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;BaseUIPanel&gt; _currentUIPanels; <span class="comment">//使用栈，存放当前场景中的所有UIPanel</span></span><br><span class="line">      <span class="comment">//获取Transform</span></span><br><span class="line">      <span class="keyword">public</span> Transform CanvasTransform</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (_canvasTransform == <span class="literal">null</span>)</span><br><span class="line">                  _canvasTransform = GameObject.Find(<span class="string">&quot;Canvas&quot;</span>).transform;</span><br><span class="line">              <span class="keyword">return</span> _canvasTransform;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">set</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">value</span>.name == <span class="string">&quot;Canvas&quot;</span>)</span><br><span class="line">                  _canvasTransform = <span class="keyword">value</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">UIManager</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          InitUIPanelInfo(); <span class="comment">//初始化UIPanelInfo</span></span><br><span class="line">          CheckUIPanelWhenGameBegin();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 传入路径和对应的数据，把该数据写入到对应路径的Json文件里</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;folderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileName&quot;&gt;</span>文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;t&quot;&gt;</span>写入的数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>数据类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteToJsonFile</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName, T t</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">string</span> json = JsonMapper.ToJson(t);</span><br><span class="line">          <span class="comment">//如果文件夹不存在，就创建文件夹</span></span><br><span class="line">          <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">              Directory.CreateDirectory(folderPath);</span><br><span class="line">          <span class="comment">//如果文件不存在，就创建文件</span></span><br><span class="line">          <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">              File.Create(folderPath + fileName).Dispose();</span><br><span class="line">          <span class="comment">//将数据写入到文件中</span></span><br><span class="line">          File.WriteAllText(folderPath + fileName, json);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 传入文件的路径，就能读取到该文件的数据</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;folderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileName&quot;&gt;</span>文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ReadFromJsonFIle</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> folderPath, <span class="built_in">string</span> fileName</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (!Directory.Exists(folderPath))</span><br><span class="line">              Directory.CreateDirectory(folderPath);</span><br><span class="line">          <span class="keyword">if</span> (!File.Exists(folderPath + fileName))</span><br><span class="line">              File.WriteAllText(folderPath + fileName, <span class="string">&quot;[]&quot;</span>);</span><br><span class="line">          List&lt;T&gt; t = JsonMapper.ToObject&lt;List&lt;T&gt;&gt;(File.ReadAllText(folderPath + fileName));</span><br><span class="line">          <span class="keyword">return</span> t;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 自动更新Json文件，并获取到所有的UIPanelInfo数据</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitUIPanelInfo</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//先获取当前Json文件中的UIPanelInfo数据</span></span><br><span class="line">          _uIPanelInfos = ReadFromJsonFIle&lt;UIPanelInfo&gt;(_jsonFolderPath, _jsonFileName);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//创建UIPanel的文件夹对象</span></span><br><span class="line">          <span class="keyword">if</span> (!Directory.Exists(_basePahtUIPanelPrefabFolder))</span><br><span class="line">              Directory.CreateDirectory(_basePahtUIPanelPrefabFolder);</span><br><span class="line">          DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(_basePahtUIPanelPrefabFolder);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//遍历文件夹下的每一个prefab文件。</span></span><br><span class="line">          <span class="comment">//如果当前UIPanelInfo列表中有对应类型的模板信息，就更新路径；没有，就添加对应信息到UIPanelInfo列表</span></span><br><span class="line">          <span class="keyword">foreach</span> (FileInfo fileInfo <span class="keyword">in</span> directoryInfo.GetFiles(<span class="string">&quot;*.prefab&quot;</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//将对应UIPanel模板的名字转换为UIPanel类型</span></span><br><span class="line">              UIPanelType type = (UIPanelType)Enum.Parse(<span class="keyword">typeof</span>(UIPanelType), fileInfo.Name.Replace(<span class="string">&quot;.prefab&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">              <span class="built_in">string</span> path = <span class="string">@&quot;UIPanelPrefab\&quot;</span> + Convert.ToString(type); <span class="comment">//基址+对应模板文件名，组成完整地址（不要后缀）</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">//尝试在列表中寻找UIpanelInfo对象，如果有，则返回对应的对象；如果没有，则返回null</span></span><br><span class="line">              UIPanelInfo uIPanelInfo = _uIPanelInfos.TrySearchUIPanel(type);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (uIPanelInfo == <span class="literal">null</span>)    <span class="comment">//UIPanel不在该List中</span></span><br><span class="line">              &#123;</span><br><span class="line">                  uIPanelInfo = <span class="keyword">new</span> UIPanelInfo(type, path);</span><br><span class="line">                  _uIPanelInfos.Add(uIPanelInfo);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="comment">//UIPanel在该List中,更新path值</span></span><br><span class="line">              &#123;</span><br><span class="line">                  uIPanelInfo.Path = path;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          WriteToJsonFile&lt;List&lt;UIPanelInfo&gt;&gt;(_jsonFolderPath, _jsonFileName, _uIPanelInfos); <span class="comment">//将更新后的模板信息写入Json文件中去</span></span><br><span class="line">          AssetDatabase.Refresh(); <span class="comment">//刷新资源</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 根据对应的UIPanel类型，创建游戏实例对象，并返回该对象的BaseUIPanel脚本</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span>UIPanlel的类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;Exception&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> BaseUIPanel <span class="title">GetUIPanel</span>(<span class="params">UIPanelType uIPanelType</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (_uIPanelInfos == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">string</span> path = _uIPanelInfos.TrySearchUIPanel(uIPanelType).Path;</span><br><span class="line"></span><br><span class="line">          <span class="meta">#<span class="keyword">region</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (Resources.Load(path) == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;找不到该UIPanelType的Prefab&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="meta">#<span class="keyword">endregion</span> 可能会出现的错误，实际开发时，可不用添加这块代码</span></span><br><span class="line"></span><br><span class="line">          GameObject insUIPanel = GameObject.Instantiate(Resources.Load(path)) <span class="keyword">as</span> GameObject; <span class="comment">//创建游戏实例对象</span></span><br><span class="line">          insUIPanel.transform.SetParent(CanvasTransform, <span class="literal">false</span>); <span class="comment">//设置父对象</span></span><br><span class="line">          <span class="keyword">return</span> insUIPanel.GetComponent&lt;BaseUIPanel&gt;(); <span class="comment">//返回BaseUIPanel脚本</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 将对应的UIPanel压入栈中，并调用OnEnter方法</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushUIPanel</span>(<span class="params">UIPanelType uIPanelType</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//如果当前栈为空</span></span><br><span class="line">          <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">              _currentUIPanels = <span class="keyword">new</span> Stack&lt;BaseUIPanel&gt;();</span><br><span class="line">          <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel暂停</span></span><br><span class="line">          <span class="keyword">if</span> (_currentUIPanels.Count &gt; <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              BaseUIPanel topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">              topUIPanel.OnPause();</span><br><span class="line">          &#125;</span><br><span class="line">          BaseUIPanel newUIPanel = GetUIPanel(uIPanelType);</span><br><span class="line">          _currentUIPanels.Push(newUIPanel);</span><br><span class="line">          newUIPanel.OnEnter();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 输入顶级UIPanel的类型，就能弹出对应的UIPanel，并调用OnExit方法</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PopUIPanel</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//如果当前栈为空，就返回</span></span><br><span class="line">          <span class="keyword">if</span> (_currentUIPanels == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          <span class="comment">//如果当前栈中没有UIPanel，就返回</span></span><br><span class="line">          <span class="keyword">if</span> (_currentUIPanels.Count &lt;= <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//弹出栈顶的UIPanel，并调用OnExit方法</span></span><br><span class="line">          BaseUIPanel topUIPanel = _currentUIPanels.Pop();</span><br><span class="line">          topUIPanel.OnEixt();</span><br><span class="line">          <span class="comment">//如果当前栈不为空，就把栈顶的UIPanel恢复</span></span><br><span class="line">          <span class="keyword">if</span> (_currentUIPanels.Count == <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          topUIPanel = _currentUIPanels.Peek();</span><br><span class="line">          topUIPanel.OnResume();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 摧毁场景中原来已经存在的UIPanel</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckUIPanelWhenGameBegin</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; CanvasTransform.childCount &gt; i;)</span><br><span class="line">          &#123;</span><br><span class="line">              GameObject.DestroyImmediate(CanvasTransform.GetChild(i).gameObject);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>UIManagerLoader.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManagerLoader</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先把当前场景中的Canvas对象的Transform属性赋值给UIManager的CanvasTransform属性</span></span><br><span class="line">    <span class="comment">//游戏一开始就加载MainMenuUIPanel</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.CanvasTransform = <span class="keyword">this</span>.transform;</span><br><span class="line">        UIManager.Instance.PushUIPanel(UIPanelType.MainMenuUIPanel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Extension</p><ul><li><p>ListExtension.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ListExtesion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 尝试在列表中查找指定的元素</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelInfos&quot;&gt;</span>当前操作的列表<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uIPanelType&quot;&gt;</span>定的元素<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果列表中由指定的元素，就返回该元素；如果没有，就返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UIPanelInfo <span class="title">TrySearchUIPanel</span>(<span class="params"><span class="keyword">this</span> List&lt;UIPanelInfo&gt; uIPanelInfos, UIPanelType uIPanelType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (UIPanelInfo uIPanelInfo <span class="keyword">in</span> uIPanelInfos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uIPanelInfo.Type == uIPanelType)</span><br><span class="line">                <span class="keyword">return</span> uIPanelInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>UIEvents</p><ul><li><p>MainMenuUIPanel.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainMenuUIPanel</span> : <span class="title">BaseUIPanel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEnter();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnEnter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnPause();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnPause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnResume();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnResume&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEixt();</span><br><span class="line">        Debug.Log(<span class="string">&quot;MainMenuUIPanel OnEixt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSettingClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.PushUIPanel(UIPanelType.SettingUIPanel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>SettingUIPanel.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SettingUIPanel</span> : <span class="title">BaseUIPanel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEnter();</span><br><span class="line">        Debug.Log(<span class="string">&quot;SettingUIPanel OnEnter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPause</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnPause();</span><br><span class="line">        Debug.Log(<span class="string">&quot;SettingUIPanel OnPause&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResume</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnResume();</span><br><span class="line">        Debug.Log(<span class="string">&quot;SettingUIPanel OnResume&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEixt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnEixt();</span><br><span class="line">        Debug.Log(<span class="string">&quot;SettingUIPanel OnEixt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCloseClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.PopUIPanel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>              </div>            </details><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-8</p></div></div><div class='timeline-item-content'><ol><li>添加了<strong>事件响应</strong>功能，以及将<code>BaseUIPanel</code>类调整为抽象类，因此<code>UIPanel</code>上将会挂载<code>BaseUIPanel</code>的子类，而不是<code>BaseUIPanel</code>。</li><li>更新了 <strong>框架设计</strong> 部分的图示。</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 功能框架 </category>
          
          <category> Csharp </category>
          
          <category> GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 功能框架 </tag>
            
            <tag> GUI </tag>
            
            <tag> UGUI </tag>
            
            <tag> Json </tag>
            
            <tag> Litjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏对象的移动以及碰撞基础（2D）</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E7%A7%BB%E5%8A%A8%E5%8F%8A%E7%A2%B0%E6%92%9E2D.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E7%A7%BB%E5%8A%A8%E5%8F%8A%E7%A2%B0%E6%92%9E2D.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><blockquote><p>此文将主要讲解有关 unity 游戏对象的移动，包含相关的 Unity 设置与 C# 脚本代码。</p></blockquote><h1 id="一-2d-对象移动"><a class="header-anchor" href="#一-2d-对象移动">¶</a>一、2D 对象移动</h1><h2 id="1-1-相关的组件以及内置代码介绍"><a class="header-anchor" href="#1-1-相关的组件以及内置代码介绍">¶</a>1.1 相关的组件以及内置代码介绍</h2><h3 id="1-1-1-transform-组件-转换"><a class="header-anchor" href="#1-1-1-transform-组件-转换">¶</a>1.1.1 Transform 组件（转换）</h3><p><strong><code>Transform</code></strong> ：用于存储一个游戏对象的位置、旋转、比例和父级状态。一个 <code>GameObject</code> 将始终附加一个**<code>Transform</code> 组件**，不可能删除一个 <code>Transform</code> 或创建一个没有 Transform 的 <code>GameObject</code>。</p><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">Function</th></tr></thead><tbody><tr><td style="text-align:left">Position</td><td style="text-align:left">在 X、Y 和 Z 坐标中的位置。（此坐标是游戏坐标，且子对象以父对象为基准）</td></tr><tr><td style="text-align:left">Rotation</td><td style="text-align:left">围绕 X、Y 和 Z 轴的旋转，以度为单位</td></tr><tr><td style="text-align:left">Scale</td><td style="text-align:left">沿 X、Y 和 Z 轴的比例。值“1”是原始大小（导入对象的大小）。如果任何刻度值为零，它将变灰并且在启用比例刻度时不会自动调整。</td></tr></tbody></table><h3 id="1-1-2-rigidbody-2d-组件-刚体"><a class="header-anchor" href="#1-1-2-rigidbody-2d-组件-刚体">¶</a>1.1.2 <code>Rigidbody 2D</code> 组件（刚体）</h3><p><a href="https://docs.unity3d.com/Manual/class-Rigidbody2D.html">官方手册</a></p><h3 id="1-1-3-time-deltetime-参数"><a class="header-anchor" href="#1-1-3-time-deltetime-参数">¶</a>1.1.3<code> Time.delteTime</code> 参数</h3><p>公共静态浮动<strong>增量时间</strong>。</p><p>描述：从上一帧到当前帧的间隔（以秒为单位）（只读）。</p><p>详细说明：<a href="https://docs.unity3d.com/ScriptReference/Time-deltaTime.html"><code>Time.delteTime</code></a> 。</p><h2 id="1-2-对象移动功能实现"><a class="header-anchor" href="#1-2-对象移动功能实现">¶</a>1.2 对象移动功能实现</h2><h3 id="1-2-1-方法-ⅰ：直接改变世界坐标"><a class="header-anchor" href="#1-2-1-方法-ⅰ：直接改变世界坐标">¶</a>1.2.1 方法 Ⅰ：直接改变世界坐标</h3><p>游戏对象在场景中的世界坐标，是 <code>Transform</code> 组件中的 <code>Position</code> 属性来记录的。通过改变<code>Position</code>属性的值，<strong>强制</strong>改变对象的世界坐标，以达到游戏对象移动的目的。在 Unity 中，对象的 Transform 组件的 Position 属性在 c# 脚本中是一个<font color='red'>三元数</font>。</p><p>优点：</p><ul><li>使用该方法简单</li></ul><p>缺点：</p><ul><li>对象移动不平滑（实际 Unity 对移动进行平滑调整）</li><li>对于有碰撞体积的对象，如果移动速度过快，会穿过碰撞体积</li><li>每执行一次代码，就会改变一次坐标，对于 <code>Updata()</code> 函数来说，帧数的改变会影响移动速度；对 <code>FixedUpdate()</code> 函数没有影响。</li></ul><p>具体的代码如下：</p><ol><li><p>类型 Ⅰ ：</p><p><code>Position</code> 属性可以通过以下方式进行设置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.Position = newPosition</span><br></pre></td></tr></table></figure></li><li><p>类型 Ⅱ：</p><p>除了直接赋值外，<code>Position</code> 属性还可以进行增量设置，即将当前位置增加一个向量值，例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 distance = <span class="keyword">new</span> Vertor3(<span class="number">0.01f</span>,<span class="number">0f</span>,<span class="number">0f</span>);<span class="comment">//创建移动向量的三元数</span></span><br><span class="line">transform.Position += distance;<span class="comment">//当前坐标加上移动移动向量，得到移动后的坐标</span></span><br></pre></td></tr></table></figure></li><li><p>类型 Ⅲ：</p><p>官方推荐使用下面的函数用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 distance = <span class="keyword">new</span> Vertor3(<span class="number">0.01f</span>,<span class="number">0f</span>,<span class="number">0f</span>);<span class="comment">//创建移动向量的三元数</span></span><br><span class="line">transform.Translate(distance);<span class="comment">//这个函数其实是对类型Ⅱ代码的封装</span></span><br></pre></td></tr></table></figure></li><li><p>类型 Ⅳ：移动速度单位时间化，与帧数无关</p><p>其中，<code>velocity</code> 是一个 Vector3 类型的速度向量，<code>Time.deltaTime</code> 表示上一帧的时间间隔，这里使用它是为了使运动平滑。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.position += velocity * Time.deltaTime;</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，<code>Position</code> 属性所表示的是游戏对象在世界坐标系中的位置，而不是相对于它的父级对象或本地坐标系的位置。因此，在进行赋值或增量设置时，应该考虑该游戏对象的当前所处位置，而不是相对位置。</p><p>同时，需要注意的是，在游戏对象使用物理引擎进行运动时，应该使用 <code>Rigidbody</code> 组件来控制它的运动，而不是直接修改 <code>Position</code> 属性。</p><h3 id="1-2-2-固定速度到达某位置"><a class="header-anchor" href="#1-2-2-固定速度到达某位置">¶</a>1.2.2 固定速度到达某位置</h3><p><code>Vector3.MoveTowards()</code> 是 Unity 引擎中一个用于控制向量移动的函数，该函数会返回从一个位置开始朝着目标位置移动一定距离的向量。这个函数通常用于实现许多游戏中的效果，如角色寻路、平滑移动、相机跟随等。函数的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">MoveTowards</span>(<span class="params">Vector3 current, Vector3 target, <span class="built_in">float</span> maxDistanceDelta</span>)</span>;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>current</code> 表示当前位置，</li><li><code>target</code> 表示目标位置，</li><li><code>maxDistanceDelta</code> 表示最大的距离变化量。</li></ul><p>函数会沿着从 <code>current</code> 到 <code>target</code> 的方向移动一个距离，该距离不会超过 <code>maxDistanceDelta</code>。</p><p>因此在 Unity 中，可以设置好目标位置以及移动速度（移动距离单位时间化），并且不<strong>断运行该函数同时，不断刷新对象的当前位置为函数的初位置</strong>。具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.Position = Vertor3.MoveTowards(transform.Position,targetPosition,speed*Time.delteTime);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>初位置：因为对象不断进行移动，所以初位置就设置当前位置</li><li>末位置：要移动的目标位置</li><li>移动距离：速度 X 时间 = 每次移动的距离</li></ul><blockquote><p>上述函数为了能重复执行，直到对象移动到目标位置，需要把该函数放在 <code>Updata()</code> 函数或 <code>FixedUpdata()</code> 中</p></blockquote><p>例如下面的具体代码实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerMovement</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed = <span class="number">5f</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 targetPos;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            targetPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);</span><br><span class="line">            targetPos.z = transform.position.z;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        transform.position = Vector3.MoveTowards(transform.position, targetPos, moveSpeed * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们用 <code>Input.GetMouseButton(0)</code> 来检测玩家是否点击了鼠标左键。如果是，则将 <code>targetPos</code> 的位置设置为鼠标点击位置。然后，我们将对象的当前位置和目标位置作为参数来调用 <code>Vector3.MoveTowards()</code> 函数来实现平滑移动。</p><h3 id="1-2-3-平滑移动"><a class="header-anchor" href="#1-2-3-平滑移动">¶</a>1.2.3 平滑移动</h3><p><code>Vector3.SmoothDamp()</code> 是 Unity 引擎中用于平滑移动物体的函数，与 <code>Vector3.MoveTowards()</code> 不同，它可以模拟物理动力学，使得移动更加平滑自然，同时可以避免突变和振荡等不良效果。该函数通常用于实现角色控制、相机跟随、特效等等。</p><p><code>Vector3.SmoothDamp()</code> 函数的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">SmoothDamp</span>(<span class="params">Vector3 current, Vector3 target, <span class="keyword">ref</span> Vector3 currentVelocity, <span class="built_in">float</span> smoothTime, <span class="built_in">float</span> maxSpeed = Mathf.Infinity, <span class="built_in">float</span> deltaTime = Time.deltaTime</span>)</span>;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>current</code> 表示当前位置；</li><li><code>target</code> 表示目标位置；</li><li><code>currentVelocity</code> 是一个引用参数，表示当前速度；</li><li><code>smoothTime</code> 表示平滑时间。该值越小，平滑速度越快；</li><li><code>maxSpeed</code> 表示最大速度限制；</li><li><code>deltaTime</code> 是可选参数，表示时间增量；</li></ul><p>在使用 <code>Vector3.SmoothDamp()</code> 函数时，需要特别注意以下几点：</p><ul><li>该函数可以模拟物理动力学，提供了平滑运动的效果，但没有进行碰撞检测。如果需要避免障碍物，应该使用其他算法，例如 A* 算法等。</li><li><code>smoothTime</code> 的值越小，平滑速度越快；反之，平滑速度越慢，过渡时间也会越长。</li><li><code>maxSpeed</code> 设置最大速度可以有效地避免移动速度过快，但过快的移动速度也可能会导致震荡和不稳定的效果。</li><li><code>currentVelocity</code> 参数是一个引用参数，需要在每一帧中传入函数进行更新。</li></ul><p>下面是一个简单的示例，演示如何使用 <code>Vector3.SmoothDamp()</code> 函数实现相机的平滑跟随：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraFollow</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform target;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> smoothTime = <span class="number">0.3f</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 currentVelocity = Vector3.zero;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> targetPos = target.position;</span><br><span class="line">            targetPos.z = transform.position.z;</span><br><span class="line">            transform.position = Vector3.SmoothDamp(transform.position, targetPos, <span class="keyword">ref</span> currentVelocity, smoothTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将摄像机的位置设置为玩家的位置。我们将 <code>targetPos</code> 的位置设置为玩家的位置，然后使用 <code>Vector3.SmoothDamp()</code> 函数来实现平滑跟随。我们使用 <code>LateUpdate()</code> 来确保摄像机移动在对象移动后更新。</p><h3 id="1-2-4-固定时间到达某位置"><a class="header-anchor" href="#1-2-4-固定时间到达某位置">¶</a>1.2.4 固定时间到达某位置</h3><p><code>Vector3.Lerp()</code> 函数是 Unity 引擎中的一个线性插值函数。它可以在两个 <code>Vector3</code> 之间进行插值，并返回一个介于它们之间的值。函数定义如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">Lerp</span>(<span class="params">Vector3 a, Vector3 b, <span class="built_in">float</span> t</span>)</span>;</span><br></pre></td></tr></table></figure><p>其中，<code>a</code> 和 <code>b</code> 是两个 <code>Vector3</code>，<code>t</code> 是表示插值系数的 <code>float</code> 值。<code>t</code> 的取值范围是 0 到 1，插值的结果为 <code>a</code> 和 <code>b</code> 的线性组合。当 <code>t</code> 为 0 时，结果为 <code>a</code>；当 <code>t</code> 为 1 时，结果为 <code>b</code>；当 <code>t</code> 为 0.5 时，结果为 <code>a</code> 和 <code>b</code> 的平均值。</p><p>例如下面简单实现了游戏中的以固定时间进行移动：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TMP</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 _start;</span><br><span class="line">    <span class="keyword">public</span> Vector3 _end;</span><br><span class="line">    <span class="keyword">public</span> Transform _cube;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> _time = <span class="number">3.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _timer = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 valueToLerp;</span><br><span class="line">        _timer += Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span>(_timer &lt; _time)</span><br><span class="line">        &#123;</span><br><span class="line">            valueToLerp = Vector3.Lerp(_start, _end, _timer / _time);</span><br><span class="line">            _cube.position = valueToLerp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _timer = <span class="number">0.0f</span>;</span><br><span class="line">            valueToLerp = _start;</span><br><span class="line">            _start = _end;</span><br><span class="line">            _end = valueToLerp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Vector3.Lerp()</code> 函数在游戏开发中非常实用，常用于实现平滑移动、颜色渐变、相机跟随等效果。</p><h3 id="1-2-5-增加力迫使对象移动"><a class="header-anchor" href="#1-2-5-增加力迫使对象移动">¶</a>1.2.5 增加力迫使对象移动</h3><p>前三种移动方式，都是直接改变对象的坐标来进行移动。但是在 unity 引擎下，可能会出现以下情况：移动速度过快，穿过碰撞体积；刚体的移动没有物理规则（如：有重力的情况）；对于需要进行移动碰撞检测时，会出现先移动到碰撞体积内部，然后被碰撞体积弹开，如次反复，就会导致一直碰撞的对象产生剧烈抖动。</p><p>因此，为了使碰撞合乎真实物理，那么使用刚体的移动属性。使用刚体，必须先获取到游戏对象的刚体组件。</p><p>可以用于给刚体物体施加一个力或者瞬间的加速度。如果您想要给人物模型施加一个力，可以将 <code>Rigidbody</code> 组件添加到人物模型上，并使用 <code>AddForce()</code> 函数进行使用。下面是一个简单的示例，演示如何使用 <code>AddForce()</code> 函数使人物模型跳跃：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> jumpForce = <span class="number">10f</span>;</span><br><span class="line">    <span class="keyword">private</span> Rigidbody rb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">&quot;Jump&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先在 <code>Start()</code> 函数中获取 <code>Rigidbody</code> 组件，并将其保存在 <code>rb</code> 变量中。在 <code>Update()</code> 函数中检测玩家是否按下了跳跃键（默认为空格键），如果按下了，我们就使用 <code>AddForce()</code> 函数给人物模型施加一个向上的力，使其跳跃。我们使用 <code>ForceMode.Impulse</code> 参数来表示施加瞬时的力。</p><p>需要注意的是，当我们使用 <code>Rigidbody</code> 组件时，需要注意以下几点：</p><ul><li><code>Rigidbody</code> 组件只能添加到物体上，而不能添加到空的游戏对象上。</li><li>需要在物体的初始位置上添加一个刚体物理效果。</li><li>由于是物理效果，所以需要在 <code>FixedUpdate()</code> 中调用 <code>AddForce()</code> 函数；而不是在 <code>Update()</code> 中调用。具体原因可以参考<a href="https://blog.yuilexi.cn/2023/05/03/Unity3D/Unity%E5%BC%95%E6%93%8E/Unity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Unity 生命周期 | 🪐 星空鸟 🪐 (yuilexi.cn)</a>这篇文章</li></ul><h3 id="1-2-6-改变刚体的速度向量"><a class="header-anchor" href="#1-2-6-改变刚体的速度向量">¶</a>1.2.6 改变刚体的速度向量</h3><p>游戏对象中刚体组件的速度属性，在 C# 脚本中，用一组三元数进行表示。具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Rigidbody _rb;<span class="comment">//存放刚体组件</span></span><br><span class="line">    <span class="keyword">public</span> Vector3 _direction;<span class="comment">//方向</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> _speed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _rb = GetComponent&lt;Rigidbody&gt;();<span class="comment">//获取刚体组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _rb.velocity = _direction*_speed;<span class="comment">//改变刚体的速度向量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-7-改变刚体的位置坐标"><a class="header-anchor" href="#1-2-7-改变刚体的位置坐标">¶</a>1.2.7 改变刚体的位置坐标</h3><p>刚体有三种状态：<strong><code>Dynamic</code></strong>、 <strong><code>Kinematic</code></strong>、<strong><code>Static</code></strong>，（动态、运动学、静态）。当刚体为： <strong><code>Kinematic</code></strong> 时，刚体不受重力等因素影响，也就没有办法使用<strong>增加力或速度</strong>来使对象移动。</p><p><code>Kinematic</code> 刚体设计为<strong>在模拟下移动</strong>，但只能在非常明确的用户控制下移动。<code>Dynamic</code> 受重力和力的影响，而 <code>Kinematic</code> 则不受。因此， <code>Kinematic</code> 比 <code>Dynamic</code> 访问计算的速度更快，对系统资源的需求也更低。 <code>Kinematic</code> 旨在通过<a href="http://docs.unity3d.com/ScriptReference/Rigidbody2D.MovePosition.html">Rigidbody2D.MovePosition</a>或<a href="http://docs.unity3d.com/ScriptReference/Rigidbody2D.MoveRotation.html">Rigidbody2D.MoveRotation</a>明确重新定位。使用物理查询来检测碰撞，并使用脚本来决定 <code>Rigidbody 2D</code> 应该移动到哪里以及如何移动。</p><p>刚体中，也内置了 <code>Position</code> 属性，并且使用 <code>Rigidbody.MovePosition()</code> 方法来改变该属性。具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Rigidbody _rb;<span class="comment">//获取刚体组件</span></span><br><span class="line">    <span class="keyword">public</span> Vector3 _distance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _rb.MovePosition(transform.position+_distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该方法的使用根 Transform 相似，不过因为是刚体的属性，所以碰撞的更加自然、合乎物理。</li></ul><h1 id="二-2d-碰撞"><a class="header-anchor" href="#二-2d-碰撞">¶</a>二、2D 碰撞</h1><h2 id="2-1-移动并碰撞的过程"><a class="header-anchor" href="#2-1-移动并碰撞的过程">¶</a>2.1 移动并碰撞的过程</h2><p>首先，假设存在两个对象 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ，它们之间存在间距， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 对象移动且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 对象不移动，二者都是刚体和碰撞体。游戏每帧或一定时间，运行游戏脚本中的移动函数，下列按每帧计算处理。那么当前帧， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 对象进行位置移动计算；下一帧 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 对象才会移动到对应位置，并且计算下一帧的位置，与此同时进行碰撞检测（只是进行碰撞检测计算）；再下一帧 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 发生碰撞行为（例如弹开等）。</p><p>那么上述可能存在几种情况：</p><ol><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的碰撞体积足够大， 且移动速度适中，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的碰撞体积会重叠极小一部分再弹开，发生抖动（与 Transform 不同，因为是刚体，所以 Unity 内部优化移动，基本感受不到抖动，<strong>存在抖动但是可以忽略</strong>）</li><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 的碰撞体积很小， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的碰撞体积很大，移动速度较快时， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 移动到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的内部，并不断发生碰撞，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 无法弹出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的体内（这里有个碰撞之后弹开方向的判定，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的内部，就可以认为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 四面八方都受到力，但是相互抵消，因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 无法从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 内部弹出）</li><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的碰撞体积很小，且移动速度很快时，可能会出现<strong>移动一次</strong>的距离大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 的宽度，就会穿过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 而不发生碰撞，这与物理相悖（不存在穿墙术吧）</li></ol><h2 id="2-2-碰撞优化方案"><a class="header-anchor" href="#2-2-碰撞优化方案">¶</a>2.2 碰撞优化方案</h2><p>为了解决碰撞过程中的问题，使用以下方法：</p><ul><li><p>刚体组件的属性：<code>Collision Detection</code>（碰撞检测）</p><ul><li><p><code>Discrete</code>（离散的）：当您将 <strong><code>Collision Detection</code></strong> 设置为 <strong><code>Discrete</code></strong> 时，具有 <code>Rigidbody 2D</code> 和 <code>Collider 2D</code> 的游戏对象可以在物理更新期间<strong>相互重叠或穿过</strong>，前提是它们移动得足够快。碰撞接触仅在新位置生成。</p></li><li><p><code>Continuous</code>（连续的）：当**<code>Collision Detection</code><strong>设置为</strong><code>Continuous</code>**时，具有 <code>Rigidbody 2D</code> 和 <code>Collider 2D</code> 的 <code>GameObjects</code> 在更新期间不会相互通过。相反，Unity 计算任何 Collider 2D 的第一个撞击点，并将 <code>GameObject</code> 移动到那里。</p><blockquote><p>请注意，这比<strong>Discrete</strong>需要更多的 CPU 时间。</p></blockquote></li></ul></li><li><p>刚体组件的属性：<code>Interpolate</code>（插值）</p><ul><li><code>None</code>：不应用运动平滑。</li><li><code>Interpolate</code>（插值）：根据游戏对象在前一帧中的位置对运动进行平滑处理。</li><li><code>Extrapolate</code>（外推）：根据对下一帧中其位置的估计来平滑运动。</li></ul></li></ul><p>在不考虑 CPU 速度的情况下：首选：Continuous 和 Extrapolate。但是默认情况基本适用很多场景。</p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 经典功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 脚本开发 </tag>
            
            <tag> 经典功能实现 </tag>
            
            <tag> 2D游戏对象移动 </tag>
            
            <tag> 2D碰撞 </tag>
            
            <tag> 2D刚体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A星寻路算法</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/Astar%E5%AF%BB%E8%B7%AF.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/%E7%BB%8F%E5%85%B8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/Astar%E5%AF%BB%E8%B7%AF.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> 经典功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 脚本开发 </tag>
            
            <tag> 经典功能实现 </tag>
            
            <tag> A星寻路算法 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity单列模式</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Csharp%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/%E5%8D%95%E5%88%97%E6%A8%A1%E5%BC%8F.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Csharp%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/%E5%8D%95%E5%88%97%E6%A8%A1%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-什么是单例模式"><a class="header-anchor" href="#一-什么是单例模式">¶</a>一、什么是单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一，也同样适用于其他的语言和场景。这种类型的设计模式属于创建型模式，<strong>它提供了一种创建对象的最佳方式</strong>。23 种设计模式之一。</p><p>这种模式涉及到一个单一的类，<strong>该类负责创建自己的对象，同时确保只有单个对象被创建</strong>。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意</strong>：</p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><h1 id="二-为什么要用单列模式"><a class="header-anchor" href="#二-为什么要用单列模式">¶</a>二、为什么要用单列模式</h1><p>在 Unity 脚本开发中，有时我们希望某些游戏对象在游戏中只有一个实例，例如：玩家角色等；或者我们构造了一个对游戏的某些功能进行管理的类，例如：UI 管理类等。上述情况，我们只希望存在一个玩家角色或者由<strong>一个管理类的实例</strong>管理 UI 系统，因此，就需要使用单例模式。</p><h1 id="三-单例模式实现方法"><a class="header-anchor" href="#三-单例模式实现方法">¶</a>三、单例模式实现方法</h1><h2 id="3-1-unity-游戏对象的处理方法"><a class="header-anchor" href="#3-1-unity-游戏对象的处理方法">¶</a>3.1 Unity 游戏对象的处理方法</h2><p>由于控制 Unity 游戏对象的脚本类全部继承于 MonoBehaviour 这个父类，因此我们可以构造一个单例模式的类，该类继承于 MonoBehaviour ，而游戏对象的脚本类继承于<strong>该单例模式类</strong>，就能做到多层级继承。</p><h3 id="3-1-1-方法-①：简单方法"><a class="header-anchor" href="#3-1-1-方法-①：简单方法">¶</a>3.1.1 方法 ①：简单方法</h3><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonPatten</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonPatten _instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonPatten Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _instance = <span class="keyword">new</span> SingletonPatten();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li>首先这个类是公共类，其他脚本可以调用该类。</li><li>该类里面有一个静态成员：该类的实例化对象，使用静态成员表示该成员在内存中只有一份数据。</li><li>静态的成员：存放的是实例化对象，使用属性器进行访问，因为只有 get 模块，因此外部只能访问不能修改，</li><li>get 模块内部，就是单例模式的核心：如果当前字段中存在实例对象，那就返回这个对象；如果没有，就新创建一个实例化对象在返回。</li></ul><h3 id="3-1-2-方法-②：完整方法-构造单例基类"><a class="header-anchor" href="#3-1-2-方法-②：完整方法-构造单例基类">¶</a>3.1.2 方法 ②：完整方法——构造单例基类</h3><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">SingletonMonobehavior</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T _instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _instance; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//virtual 虚方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解读：首先把单例类定义为一个抽象类，因此该类必须被继承，不能直接实例化。该类使用了泛型的方法，可以使多个子类单独工作，降低耦合性，使其互不影响，并且提高代码利用率。然后再将 Awake() 方法定义为一个虚方法。</p><p>虚方法：</p><ul><li>必须有方法体，哪怕是一个分号</li><li>子类直接继承父类的非私有虚方法，子类可以重写(overwrite)或者选择不重写<ul><li>这与抽象方法不同，抽象方法必须重写才能使用</li><li>因此，每个单例类共同的功能——单例算法，写在虚方法 Awake() 中，并在子类中重写这个方法，并且调用父类方法</li><li>还可以在子类重写的方法中，定义子类的特有的算法代码。</li></ul></li></ul><h2 id="3-2-其他类的处理方法"><a class="header-anchor" href="#3-2-其他类的处理方法">¶</a>3.2 其他类的处理方法</h2><h3 id="3-2-1-方法-①：简单方法"><a class="header-anchor" href="#3-2-1-方法-①：简单方法">¶</a>3.2.1 方法 ①：简单方法</h3><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonPatten</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonPatten _instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonPatten Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _instance = <span class="keyword">new</span> SingletonPatten();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Csharp脚本基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单列模式 </tag>
            
            <tag> 脚本开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程-线程-协程</title>
      <link href="/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Csharp%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B.html"/>
      <url>/02_Unity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91_%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0/Csharp%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-进程"><a class="header-anchor" href="#一-进程">¶</a>一、进程</h1><h2 id="1-1-进程的概念和特征"><a class="header-anchor" href="#1-1-进程的概念和特征">¶</a>1.1 进程的概念和特征</h2><h3 id="1-1-1-进程的定义"><a class="header-anchor" href="#1-1-1-进程的定义">¶</a>1.1.1 进程的定义</h3><p>进程是程序的一次执行过程。进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</p><p>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单元。<strong>每个进程都有自己的独立内存空间</strong>，<strong>不同进程间可以进行进程间通信</strong>。进程<strong>重量级比较大</strong>，占据独立内存，上下文进程间的切换开销（栈寄存器、虚拟内存、文件句柄）比较大，但相对稳定安全。进程的上级为操作系统，有自己固定的堆栈。</p><h3 id="1-1-2-进程的特征"><a class="header-anchor" href="#1-1-2-进程的特征">¶</a>1.1.2 进程的特征</h3><p><strong>动态性</strong>：进程是程序的一次执行，它有着创建、活动、暂停、终止等过程，具有一定的生命周期，是动态地产生、变化和消亡的。<strong>动态性是进程最基本的特征</strong>。</p><p><strong>并发性</strong>：指多个进程实体同时存于内存中，能在一段时间内同时运行。并发性是进程的重要特征，同时也是操作系统的重要特征。引入进程的目的就是为了使程序能与其他进程的程序并发执行，以提高资源利用率。</p><p><strong>独立性</strong>：指进程实体是一个能独立运行、独立获得资源和独立接受调度的基本单元。凡未建立 PCB 的程序都不能作为一个独立的单元参与运行。</p><p><strong>异步性</strong>：由于进程的相互制约，使得进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进。异步性会导致执行结果的不可再现性，为此在操作系统中必须配置相应的进程同步机制。</p><p><strong>结构性</strong>：每个进程都配置一个 PCB 对其进行描述。从结构上看，进程实体是由程序段、数据段和进程控制块三部分组成的。</p><h2 id="1-2-进程的状态和转换"><a class="header-anchor" href="#1-2-进程的状态和转换">¶</a>1.2 进程的状态和转换</h2><p><strong>运行态</strong>：进程正在处理机上运行。在单机处理机环境下，每个时刻最多只有一个进程处于运行态。</p><p><strong>就绪态</strong>：进程获得了除处理机外的一切所需资源，一旦得到处理机，便可立即运行。系统中处于就绪状态的进程可能有多个，通常将他们排成一个队列，成为<strong>就绪队列</strong>。</p><p><strong>阻塞态</strong>：又称等待态。进程正在等待某一事件而暂定运行，如等待某资源为可用或等待输入/输出完成。<strong>即使处理机空闲，该进程也不能运行</strong>。</p><p><strong>创建态</strong>：进程正在被创建，尚未转到就绪态。创建进程通常需要多个步骤：首先申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，然后由系统为该进程分配运行时所必须的资源，最后把该进程转入就绪态。</p><p><strong>结束态</strong>：进程正从系统中消失，可能是进程正常结束或其他原因中断退出运行。进程需要结束运行时，系统首先必须置该进程为结束态，然后再进一步处理资源释放和回收等工作。</p><p><img src="https://imageshack.yuilexi.cn/Unity3D/Csharp-Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.svg" alt="进程的状态转换"></p><h3 id="1-3-进程的通信"><a class="header-anchor" href="#1-3-进程的通信">¶</a>1.3 进程的通信</h3><p>进程间通信通常有以下几种方式：</p><p><strong>管道（Pipe）</strong>：管道是 Unix 中最古老的进程间通信的形式，我们把从一个进程连接到另一个进程的一个数据流称为一个“管道”。其本质是内核中固定大小的缓冲区。</p><p><strong>命名管道（Named Pipes）</strong>：“命名管道”又名“命名管线”（Named Pipes），命名管道支持可靠的、单向或双向的数据通信。不同于匿名管道的是：命名管道可以在不相关的进程之间和不同计算机之间使用，服务器建立命名管道时给它指定一个名字，任何进程都可以通过该名字打开管道的另一端，根据给定的权限和服务器进程通信。</p><p><strong>消息队列（MQ，Message Quene）</strong>：消息队列用于在进程间通信的过程中将消息按照队列存储起来，常见的 MQ 有 ActiveMQ、RocketMQ、RabbitMQ、Kafka 等。</p><p><strong>信号量（Semaphore）</strong>：有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前,线程必须获取一个信号量。</p><p><strong>共享内存（Share Memory）</strong>：共享内存是三个 IPC 机制中的一个。它允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在进行的进程之间传递数据的一种非常有效的方式。</p><p><strong>套接字（Socket）</strong>：就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。</p><p>对于游戏开发者来说，最为常用的是 Socket，这是长连接网络游戏的核心。</p><h1 id="二-线程"><a class="header-anchor" href="#二-线程">¶</a>二、线程</h1><h2 id="2-1-线程的概念"><a class="header-anchor" href="#2-1-线程的概念">¶</a>2.1 线程的概念</h2><p><img src="https://imageshack.yuilexi.cn/Unity3D/Csharp-Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB.svg" alt="进程与线程的关系"></p><p>线程也被称为轻量级进程，是操作系统调度（CPU 调度）执行的最小单位，是进程的子集，是进程中实际运作单位。一个线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每个线程并行执行不同的任务。</p><p>线程本身基本不拥有资源，而是访问隶属于进程的资源，一个进程拥有至少一个或多个线程，线程间共享进程的地址空间。</p><p>由于线程是阻塞式的，如果想要同步执行 IO，每个 IO 都必须开启一个新线程，多线程开销较大，适合多任务处理，进程崩溃不影响其他进程，而线程只是一个进程的不同执行路线。</p><p>线程有自己的堆栈，却没有单独的地址空间，进程死就等于所有线程死，所以多进程要比多线程健壮。但在进程切换时，消耗资源较大，效率较差。</p><p>线程是并发的，且是阻塞式同步的，一旦资源死锁，线程将陷入混乱。在同步线程的执行过程中，线程的执行切换是由 CPU 轮转时间片的分配来决定的。</p><p><img src="https://imageshack.yuilexi.cn/Unity3D/Csharp-Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81.svg" alt="线程的运行状态"></p><h1 id="三-协程"><a class="header-anchor" href="#三-协程">¶</a>三、协程</h1><h2 id="3-1-协程的概念"><a class="header-anchor" href="#3-1-协程的概念">¶</a>3.1 协程的概念</h2><p>协程是比线程更轻量级的存在，协程不由操作系统内核所管理，而是完全由程序所控制（也就是在用户态执行）。</p><p><strong>协程的好处是性能大幅提升，不会像线程切换那样消耗资源</strong>。同一时间只能执行某个协程，开辟多个协程开销不大。适合对任务进行分时处理。</p><p>协程有自己的寄存器和上下文栈。协程调度切换时，将寄存器和上下文栈保存到其他地方，并在协程切换回来时恢复之前保存的寄存器和上下文栈。由于直接对栈进行操作，基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文切换非常快。</p><p>一个线程可以有多个协程，一个进程也可以单独拥有多个协程。线程和进程都是同步机制，而协程是异步机制，无需阻塞。协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用时的状态。多协程间对 CPU 的使用是依次进行的，每次只有一个协程工作，而其他协程处于休眠状态。</p><p><strong>实际上多个协程是在一个线程中的，只不过每个协程对 CPU 进行分时</strong>。协程可以访问和使用 Unity 的所有方法和 <code>Component </code>。</p><p>函数（子程序）的调用是通过栈实现的，一个线程就是执行一个函数，函数调用总是一个入口，一个返回，调用顺序是明确的，而协程在函数内部是可以中断的，然后转而执行其他函数，在适当的时候再返回来继续执行。</p><p>函数（子程序）的切换不是由线程切换，而是程序自身控制，因此没有线程切换开销。和多线程相比，线程越多，协程的性能优势就越明显，并且协程因为依次执行，不存在线程安全问题，变量访问不会冲突，共享资源也无需加锁，只需要判断状态即可，所以执行效率比线程高很多。</p><h2 id="3-2-协程的原理和作用"><a class="header-anchor" href="#3-2-协程的原理和作用">¶</a>3.2 协程的原理和作用</h2><p><strong>协程</strong>在<code>Unity</code>中是一个很重要的概念，我们知道，在使用<code>Unity</code>进行游戏开发时，一般（注意是一般）不考虑<strong>多线程</strong>，那么如何处理一些在主任务之外的需求呢，<code>Unity</code>给我们提供了协程这种方式。</p><blockquote><p><strong>在 Unity 中一般不考虑多线程的原因是</strong>：因为在<code>Unity</code>中，只能在主线程中获取物体的组件、方法、对象，如果脱离这些，<code>Unity</code>的很多功能无法实现，那么多线程的存在与否意义就不大了</p></blockquote><p>线程与协程有什么区别呢：</p><ul><li>对于协程而言，同一时间只能执行一个协程，而线程则是并发的，可以同时有多个线程在运行</li><li>两者在内存的使用上是相同的，共享堆，不共享栈</li></ul><p>其实对于两者最关键，最简单的区别是微观上线程是并行（对于多核 CPU）的，而协程是串行的</p><h3 id="3-2-1-关于协程"><a class="header-anchor" href="#3-2-1-关于协程">¶</a>3.2.1 关于协程</h3><p>从字面意义上理解就是协助程序的意思，我们在主任务进行的同时，需要一些分支任务配合工作来达到最终的效果。例如，在进行主任务的过程中我们需要一个对资源消耗极大的操作（比如存档）时候，如果在一帧中实现这样的操作，游戏就会变得十分卡顿，这个时候，我们就可以通过协程，在一定的帧内完成该工作的处理，同时不影响主任务的进行</p><h3 id="3-2-2-协程的原理"><a class="header-anchor" href="#3-2-2-协程的原理">¶</a>3.2.2 协程的原理</h3><p>首先需要了解协程不是线程，协程依旧是在主线程中进行。其次是，协程是通过迭代器来实现功能的，通过关键字<code> IEnumerator</code> 来定义一个迭代方法</p><blockquote><ul><li><code>IEnumerator</code>：是一个实现迭代器功能的接口</li><li><code>IEnumerable</code>：是在<code>IEnumerator</code>基础上的一个封装接口，有一个<code>GetEnumerator()</code>方法返回<code>IEnumerator</code></li></ul></blockquote><p>在迭代器中呢，最关键的是 yield 的使用，这是实现我们协程功能的主要途径，通过该关键方法，可以使得协程的运行暂停、记录下一次启动的时间与位置等。</p><h3 id="3-2-3-协程的使用"><a class="header-anchor" href="#3-2-3-协程的使用">¶</a>3.2.3 协程的使用</h3><p>首先通过一个迭代器定义一个返回值为 <code>IEnumerator</code> 的方法，然后在程序中通过 <code>StartCoroutine</code> 来开启一个协程即可：</p><p><code>StartCoroutine</code> 的两种重载方式：</p><ol><li><code>StartCoroutine(string methodName)</code>：这种是没有参数的情况，直接通过方法名（字符串形式，不加括号）来开启协程</li><li><code>StartCoroutine(string methodName，object values)</code>：带参数的通过方法名和参数进行调用</li><li><code>StartCoroutine(IEnumerator routine)</code>：通过<strong>调用方法</strong>的形式开启协程</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过迭代器定义一个方法</span></span><br><span class="line"><span class="function">IEnumerator <span class="title">First</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">Second</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在程序种调用协程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    StartCoroutine(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    StartCoroutine(<span class="string">&quot;Second&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//方法三</span></span><br><span class="line">    StartCoroutine(First());</span><br><span class="line">    StartCoroutine(Second(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个协程开始后，同样会对应一个结束协程的方法<code>StopCoroutine</code>与<code>StopAllCoroutines</code>两种方式，但是需要注意的是，两者的使用需要遵循一定的规则，在介绍规则之前，同样介绍一下关于<code>StopCoroutine</code>重载：</p><ul><li><code>StopCoroutine（string methodName）</code>：通过方法名（字符串）来进行</li><li><code>StopCoroutine（IEnumerator routine）</code>:通过方法形式来调用</li><li><code>StopCoroutine(Coroutine routine)</code>：通过指定的协程来关闭</li></ul><p>如果我们是使用<code>StartCoroutine（string methodName）</code>来开启一个协程的，那么结束协程就只能使用<code>StopCoroutine（string methodName）</code>和<code>StopCoroutine(Coroutine routine)</code>来结束协程，</p><h3 id="3-2-4-yield-关键字-🧠🧠"><a class="header-anchor" href="#3-2-4-yield-关键字-🧠🧠">¶</a>3.2.4 yield 关键字 🧠🧠</h3><p>要想理解协程，就要理解<code>yield</code>。在<code>Unity</code>的脚本的生命周期，<code>yield</code> 也是脚本生命周期的一些执行方法，不同的<code>yield</code> 的方法处于生命周期的不同位置。</p><p>在协程函数中，<code>yield</code> 之前的代码会在协程开启后一次运行完毕，而<code>yield</code> 之后的代码，需要满足特定的条件才会运行。</p><ul><li><code>yield return null</code>; 暂停协程等待下一帧继续执行</li><li><code>yield return 0或其他数字</code>; 暂停协程等待下一帧继续执行</li><li><code>yield return new WairForSeconds(时间)</code>; 等待规定时间后继续执行</li><li><code>yield return StartCoroutine(&quot;协程方法名&quot;)</code>;开启一个协程（嵌套协程）</li></ul><p>接下来看几个特殊的<code>yield</code>，他们是用在一些特殊的区域，一般不会有机会去使用，但是对于某些特殊情况的应对会很方便</p><ul><li><code>yield return GameObject</code>：当游戏对象被获取到之后执行</li><li><code>yield return new WaitForFixedUpdate()</code>：等到下一个固定帧数更新</li><li><code>yield return new WaitForEndOfFrame()</code>：等到所有相机画面被渲染完毕后更新</li><li><code>yield break</code>; 跳出协程对应方法，其后面的代码不会被执行</li></ul><p>通过上面的一些<code>yield</code>一些用法以及其在脚本生命周期中的位置，我们也可以看到关于协程不是线程的概念的具体的解释，所有的这些方法都是在主线程中进行的，只是有别于我们正常使用的<code>Update</code>与<code>LateUpdate</code>这些可视的方法</p><h3 id="3-2-5-协程的内核：迭代器-🧠🧠"><a class="header-anchor" href="#3-2-5-协程的内核：迭代器-🧠🧠">¶</a>3.2.5 协程的内核：迭代器 🧠🧠</h3><p>从程序的角度讲，协程的核心就是迭代器。</p><p>想要定义一个协程方法有两个因素，</p><ol><li>方法的返回值为 <code>IEnumerator</code></li><li>方法中有 yield 关键字。</li></ol><p>当代码满足以上两个条件时，此方法的执行就具有了迭代器的特质，其核心就是 <code>MoveNext</code> 方法。方法内的内容将会被分成两部分：yield 之前的代码和 yield 之后的代码。yield 之前的代码会在第一次执行<code>MoveNext</code>时执行， yield 之后的代码会在第二次执行<code>MoveNext</code>时执行。</p><p>在 Unity 中，<code>MoveNext</code>的执行时机是以帧为单位的，无论你是设置了延迟时间，还是通过按钮调用<code>MoveNext</code>，亦或是根本没有设置执行条件，Unity 都会在每一帧的生命周期中判断当前帧是否满足协程所定义的条件，一旦满足，当前帧就会抽出 CPU 时间执行你所定义的协程迭代器的<code>MoveNext</code>（即 yield 后面部分）。注意，只要方法中有 yield 语句，那么方法的返回值就必须是 <code>IEnumerator</code> ，不然无法通过编译。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IEnumerator _objects;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _objects = Function();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (UnityEngine.Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            _objects.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Function</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">$&quot;我是<span class="subst">&#123;i&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">3</span></span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每执行一次 <code>MoveNext()</code>方法，就会使对应的协程<strong>往下执行一步</strong>。而使用 <code>StartCoroutine()</code>函数，相当于把 <code>MoveNext()</code>的使用权，交给 <code>Unity</code>编辑器，通过 <code>yield</code> 后面的条件，来确定何时往下执行。</p><h1 id="配置说明"><a class="header-anchor" href="#配置说明">¶</a>配置说明</h1>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Csharp脚本基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> 脚本开发 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 协程 </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> 游戏优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#高级语法</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/03.Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/03.Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><blockquote><p>本文章主要包含特性、反射、属性、索引器、委托、事件、集合、泛型、匿名方法、不安全代码、多线程等 C#的高级用法。</p><p>C#系列教程：</p><ol><li><a href="https://blog.yuilexi.cn/2023/04/26/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">C#基础语法 | 🪐星空鸟🪐 (yuilexi.cn)</a></li><li><a href="https://blog.yuilexi.cn/2023/04/30/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/">C#高级语法 | 🪐星空鸟🪐 (yuilexi.cn)</a>⬅️ 当前的位置 °꒰๑’ꀾ’๑꒱°</li><li><a href="https://blog.yuilexi.cn/2023/05/19/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E8%A7%84%E8%8C%83/">C#代码规范 | 🪐星空鸟🪐 (yuilexi.cn)</a></li></ol></blockquote><h1 id="特性-attribute"><a class="header-anchor" href="#特性-attribute">¶</a>特性（Attribute）</h1><h1 id="属性-property"><a class="header-anchor" href="#属性-property">¶</a>属性（Property）</h1><p><strong>属性（Property）</strong> 是类、结构和接口的命名（named）成员。类或结构中的成员变量或方法称为 <strong>域（Field）</strong>。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用 <strong>访问器（accessors）</strong> 让私有域的值可被读写或操作。</p><p>属性（Property）不会确定存储位置。相反，它们具有可读写或计算它们值的 <strong>访问器（accessors）</strong>。</p><h2 id="访问器-accessors"><a class="header-anchor" href="#访问器-accessors">¶</a>访问器（Accessors）</h2><p><font color='red'>属性</font>的<strong>访问器</strong>包含有助于获取（读取或计算）或设置（写入）属性的可执行语句。访问器声明可包含一个 <code>get</code> 访问器、一个 <code>set</code> 访问器，或者同时包含二者。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/ 声明类型为 <span class="built_in">string</span> 的 Code 属性</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> code;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Code</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> code;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明类型为 string 的 Name 属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">     name = <span class="keyword">value</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明类型为 int 的 Age 属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">      age = <span class="keyword">value</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get</code> 访问器和<code>set</code> 访问器尽管写法奇怪，但它们实际上是两个方法。在访问属性的值时，执行的是<code>get</code> 方法；在给属性赋值时，执行的是<code>set</code> 方法。因此，我们不仅能够对属性进行访问和修改，还可以在<code>get</code> 和<code>set</code> 内部书写逻辑，以便于规范访问和修改。</p><h2 id="抽象属性-abstract-properties"><a class="header-anchor" href="#抽象属性-abstract-properties">¶</a>抽象属性（Abstract Properties）</h2><p>抽象类可拥有抽象属性，这些属性应在派生类中被实现。下面的程序说明了这点：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述抽象类中的抽象属性，必须在继承的子类中使用<code>override</code>进行重写：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _name = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _age = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="索引器-indexer"><a class="header-anchor" href="#索引器-indexer">¶</a>索引器（Indexer）</h1><p><strong>索引器（Indexer）</strong> 允许一个对象可以像数组一样使用下标的方式来访问。当您为类定义一个索引器时，该类的行为就会像一个 <strong>虚拟数组（virtual array）</strong> 一样。您可以使用数组访问运算符 <strong>[ ]</strong> 来访问该类的的成员。</p><h2 id="语法"><a class="header-anchor" href="#语法">¶</a>语法</h2><p>一维索引器的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">element-type <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// get 访问器</span></span><br><span class="line">   <span class="keyword">get</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 返回 index 指定的值</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// set 访问器</span></span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 设置 index 指定的值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引器的用途"><a class="header-anchor" href="#索引器的用途">¶</a>索引器的用途</h2><p><strong>索引器</strong>的行为的声明在某种程度上类似于<strong>属性</strong>。就像属性一样，您可使用 <strong>get</strong> 和 <strong>set</strong> 访问器来定义索引器。但是，属性返回或设置一个特定的数据成员，而索引器返回或设置对象实例的一个特定值。换句话说，它把实例数据分为更小的部分，并索引每个部分，获取或设置每个部分。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 索引器</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> _size = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>[] _name = <span class="keyword">new</span> <span class="built_in">string</span>[_size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造函数，进行初始化</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                _name[i] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//索引器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= _size)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;索引超出范围&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _name[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= _size)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;索引超出范围&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                _name[index] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主程序入口</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person persons = <span class="keyword">new</span> Person();</span><br><span class="line">            persons[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">            persons[<span class="number">1</span>] = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">            persons[<span class="number">2</span>] = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">            persons[<span class="number">3</span>] = <span class="string">&quot;赵六&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Person._size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(persons[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">赵六</span><br><span class="line">a</span><br></pre></td></tr></table></figure><h2 id="重载索引器"><a class="header-anchor" href="#重载索引器">¶</a>重载索引器</h2><p><strong>索引器</strong>可被重载。索引器声明的时候也可带有多个参数，且每个参数可以是不同的类型。C# 允许索引器可以是其他类型。例如下面的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">string</span> name]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="委托-delegate"><a class="header-anchor" href="#委托-delegate">¶</a>委托（Delegate）</h1><p>C# 中的<strong>委托</strong>类似于 C 或 C++ 中函数的指针。<strong>委托（Delegate）</strong> 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。</p><p>委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 <strong>System.Delegate</strong> 类。</p><h2 id="声明委托-delegate"><a class="header-anchor" href="#声明委托-delegate">¶</a>声明委托（Delegate）</h2><p>委托声明决定了可由该委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MyDelegate</span> (<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><p>上面的委托可被用于引用任何一个带有一个单一的 <code>string</code> 参数的方法，并返回一个 <code>string</code> 类型变量。声明委托的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="built_in">delegate</span> 返回类型 委托名([参数列表])</span><br></pre></td></tr></table></figure><h2 id="实例化委托-delegate"><a class="header-anchor" href="#实例化委托-delegate">¶</a>实例化委托（Delegate）</h2><p>一旦声明了委托类型，委托对象必须使用 <strong>new</strong> 关键字来创建，且与一个特定的方法有关。当创建委托时，传递到 <strong>new</strong> 语句的参数就像方法调用一样书写，但是不带有参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"><span class="keyword">namespace</span> 委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">First</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你输入的是&quot;</span> + str + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Second</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str + str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Third</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str + str + str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyDelegate myDelegate1 = <span class="keyword">new</span> MyDelegate(First);</span><br><span class="line">            MyDelegate myDelegate2 = <span class="keyword">new</span> MyDelegate(Second);</span><br><span class="line">            myDelegate2 += Third;</span><br><span class="line">            Console.WriteLine(myDelegate1(<span class="string">&quot;Hello World!&quot;</span>));</span><br><span class="line">            Console.WriteLine(myDelegate2(<span class="string">&quot;Hello,C#\n&quot;</span>));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到委托变量内的方法，<strong>必须和委托有相同的返回值和参数列表</strong>，同时在<code>new</code>时，必须向委托变量中传入一个方法作为参数，而且只能传入一个方法，这是因为委托这种特殊的类不含无参的构造方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是错误的语法，会报错</span></span><br><span class="line">MyDelegate myDelegate1 = <span class="keyword">new</span> MyDelegate();</span><br><span class="line"><span class="comment">//这是正确的写法</span></span><br><span class="line">MyDelegate myDelegate2 = <span class="keyword">new</span> MyDelegate(Second);</span><br></pre></td></tr></table></figure><h2 id="委托的多播-multicasting-of-a-delegate"><a class="header-anchor" href="#委托的多播-multicasting-of-a-delegate">¶</a>委托的多播（Multicasting of a Delegate）</h2><p>委托对象可使用 “+” 运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可被合并。&quot;-&quot; 运算符可用于从合并的委托中移除组件委托。</p><p>使用委托的这个有用的特点，您可以创建一个委托被调用时要调用的方法的调用列表。这被称为委托的 <strong>多播（multicasting）</strong>，也叫组播。</p><p>例如上面的代码中：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myDelegate2 += Third;</span><br></pre></td></tr></table></figure><h1 id="事件-event"><a class="header-anchor" href="#事件-event">¶</a>事件（Event）</h1><p><strong>事件（Event）</strong> 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。</p><p>C# 中使用事件机制实现线程间的通信。</p><h2 id="通过事件使用委托"><a class="header-anchor" href="#通过事件使用委托">¶</a>通过事件使用委托</h2><p><strong>事件在类中声明且生成</strong>，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong> 模型。</p><p><strong>发布器（publisher）</strong> 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。</p><p><strong>订阅器（subscriber）</strong> 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。</p><h2 id="声明事件-event"><a class="header-anchor" href="#声明事件-event">¶</a>声明事件（Event）</h2><p>在类的内部声明事件，首先必须声明该事件的委托类型。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> status</span>)</span>;</span><br></pre></td></tr></table></figure><p>然后，声明事件本身，使用 <strong>event</strong> 关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 基于上面的委托定义事件</span><br><span class="line">public event MyDelegate MyEvent;</span><br></pre></td></tr></table></figure><p>例如下面实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.Design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 事件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//发布器类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明一个整型变量，模拟当前数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">value</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明委托</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明事件</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MyDelegate MyEvent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发事件的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnMyEvent</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (MyEvent != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MyEvent(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;没有订阅者\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果值改变，就调用“触发事件的函数”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="keyword">this</span>.<span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">                OnMyEvent(<span class="string">&quot;已经修改了value的值&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅器</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show1</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小明收到了：“&#123;0&#125;”的消息&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show2</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小红收到了：“&#123;0&#125;”的消息&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show3</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小刚收到了：“&#123;0&#125;”的消息&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实例化一个发布器类的对象</span></span><br><span class="line">            EventTest eventTest = <span class="keyword">new</span> EventTest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//订阅事件</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第一次尝试&quot;</span>);</span><br><span class="line">            eventTest.MyEvent += Show1;</span><br><span class="line">            eventTest.MyEvent += Show2;</span><br><span class="line">            eventTest.SetValue(<span class="number">10</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第二次尝试&quot;</span>);</span><br><span class="line">            eventTest.SetValue(<span class="number">10</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第三次尝试&quot;</span>);</span><br><span class="line">            eventTest.MyEvent += Show3;</span><br><span class="line">            eventTest.SetValue(<span class="number">20</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第四次尝试&quot;</span>);</span><br><span class="line">            eventTest.MyEvent -= Show1;</span><br><span class="line">            eventTest.SetValue(<span class="number">30</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一次尝试</span><br><span class="line">小明收到了：“已经修改了value的值”的消息</span><br><span class="line">小红收到了：“已经修改了value的值”的消息</span><br><span class="line">第二次尝试</span><br><span class="line">第三次尝试</span><br><span class="line">小明收到了：“已经修改了value的值”的消息</span><br><span class="line">小红收到了：“已经修改了value的值”的消息</span><br><span class="line">小刚收到了：“已经修改了value的值”的消息</span><br><span class="line">第四次尝试</span><br><span class="line">小红收到了：“已经修改了value的值”的消息</span><br><span class="line">小刚收到了：“已经修改了value的值”的消息</span><br></pre></td></tr></table></figure><h1 id="集合-collection"><a class="header-anchor" href="#集合-collection">¶</a>集合（Collection）</h1><p><strong>集合类</strong>是专门用于数据存储和检索的类。这些类提供了<strong>对栈</strong>、<strong>队列</strong>、<strong>列表</strong>和<strong>哈希表</strong>的支持。大多数集合类实现了相同的接口。</p><p><strong>集合类</strong>服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建 <code>Object</code> 类的对象的集合。在 C# 中，Object 类是所有数据类型的基类。</p><h2 id="动态数组-arraylist"><a class="header-anchor" href="#动态数组-arraylist">¶</a>动态数组（ArrayList）</h2><p><strong>动态数组</strong>代表了可被单独索引的对象的有序集合。它基本上可以替代一个数组。但是，与数组不同的是，您可以使用<strong>索引</strong>在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</p><h3 id="arraylist-类的属性"><a class="header-anchor" href="#arraylist-类的属性">¶</a>ArrayList 类的属性</h3><p>下表列出了 <strong>ArrayList</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Capacity</td><td style="text-align:left">获取或设置 ArrayList 可以包含的元素个数。</td></tr><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 ArrayList 中实际包含的元素个数。</td></tr><tr><td style="text-align:left">IsFixedSize</td><td style="text-align:left">获取一个值，表示 ArrayList 是否具有固定大小。</td></tr><tr><td style="text-align:left">IsReadOnly</td><td style="text-align:left">获取一个值，表示 ArrayList 是否只读。</td></tr><tr><td style="text-align:left">IsSynchronized</td><td style="text-align:left">获取一个值，表示访问 ArrayList 是否同步（线程安全）。</td></tr><tr><td style="text-align:left">Item[Int32]</td><td style="text-align:left">获取或设置指定索引处的元素。</td></tr><tr><td style="text-align:left">SyncRoot</td><td style="text-align:left">获取一个对象用于同步访问 ArrayList。</td></tr></tbody></table><h3 id="arraylist-类的方法"><a class="header-anchor" href="#arraylist-类的方法">¶</a>ArrayList 类的方法</h3><p><strong>ArrayList</strong> 类的一些常用的 <strong>方法</strong>：详情请看<a href="https://www.runoob.com/csharp/csharp-arraylist.html">C# 动态数组（ArrayList） | 菜鸟教程 (runoob.com)</a></p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1</strong></td><td style="text-align:left"><strong>public virtual int Add( object value )</strong></td><td><strong>在 ArrayList 的末尾添加一个对象</strong></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">public virtual void AddRange( ICollection c )</td><td>在 ArrayList 的末尾添加 ICollection 的元素。</td></tr><tr><td style="text-align:center"><strong>3</strong></td><td style="text-align:left"><strong>public virtual void Clear()</strong></td><td><strong>从 ArrayList 中移除所有的元素</strong></td></tr><tr><td style="text-align:center"><strong>4</strong></td><td style="text-align:left"><strong>public virtual bool Contains( object item )</strong></td><td><strong>判断某个元素是否在 ArrayList 中</strong></td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">public virtual ArrayList GetRange( int index, int count )</td><td>返回一个 ArrayList，表示源 ArrayList 中元素的子集</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">public virtual int IndexOf(object)</td><td>返回某个值在 ArrayList 中第一次出现的索引，索引从零开始</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">public virtual void Insert( int index, object value )</td><td>在 ArrayList 的指定索引处，插入一个元素</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">public virtual void InsertRange( int index, ICollection c )</td><td>在 ArrayList 的指定索引处，插入某个集合的元素。</td></tr><tr><td style="text-align:center"><strong>9</strong></td><td style="text-align:left"><strong>public virtual void Remove( object obj )</strong></td><td><strong>从 ArrayList 中移除第一次出现的指定对象</strong></td></tr><tr><td style="text-align:center">10</td><td style="text-align:left">public virtual void RemoveAt( int index )</td><td>移除 ArrayList 的指定索引处的元素。</td></tr><tr><td style="text-align:center">11</td><td style="text-align:left">public virtual void RemoveRange( int index, int count )</td><td>从 ArrayList 中移除某个范围的元素</td></tr><tr><td style="text-align:center">12</td><td style="text-align:left">public virtual void Reverse()</td><td>逆转 ArrayList 中元素的顺序</td></tr><tr><td style="text-align:center">13</td><td style="text-align:left">public virtual void SetRange( int index, ICollection c )</td><td>复制某个集合的元素到 ArrayList 中某个范围的元素上</td></tr><tr><td style="text-align:center">14</td><td style="text-align:left">public virtual void Sort()</td><td>对 ArrayList 中的元素进行排序</td></tr><tr><td style="text-align:center">15</td><td style="text-align:left">public virtual void TrimToSize()</td><td>设置容量为 ArrayList 中元素的实际个数</td></tr></tbody></table><h2 id="哈希表-hashtable"><a class="header-anchor" href="#哈希表-hashtable">¶</a>哈希表（Hashtable）</h2><p><code>Hashtable</code> 类代表了一系列基于键的哈希代码组织起来的<strong>键/值</strong>对。它使用<strong>键</strong>来访问集合中的元素。</p><p>当您使用<strong>键</strong>访问元素时，则使用哈希表，而且您可以识别一个有用的键值。哈希表中的每一项都有一个<strong>键/值</strong>对。键用于访问集合中的项目。</p><h3 id="hashtable-类的属性"><a class="header-anchor" href="#hashtable-类的属性">¶</a>Hashtable 类的属性</h3><p>下表列出了 <strong>Hashtable</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 Hashtable 中包含的键值对个数。</td></tr><tr><td style="text-align:left">IsFixedSize</td><td style="text-align:left">获取一个值，表示 Hashtable 是否具有固定大小。</td></tr><tr><td style="text-align:left">IsReadOnly</td><td style="text-align:left">获取一个值，表示 Hashtable 是否只读。</td></tr><tr><td style="text-align:left">Item</td><td style="text-align:left">获取或设置与指定的键相关的值。</td></tr><tr><td style="text-align:left">Keys</td><td style="text-align:left">获取一个 ICollection，包含 Hashtable 中的键。</td></tr><tr><td style="text-align:left">Values</td><td style="text-align:left">获取一个 ICollection，包含 Hashtable 中的值。</td></tr></tbody></table><h3 id="hashtable-类的方法"><a class="header-anchor" href="#hashtable-类的方法">¶</a>Hashtable 类的方法</h3><p>下表列出了 <strong>Hashtable</strong> 类的一些常用的 <strong>方法</strong>：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>1</strong></td><td style="text-align:left"><strong>public virtual void Add( object key, object value )</strong></td><td><strong>向 Hashtable 添加一个带有指定的键和值的元素</strong></td></tr><tr><td style="text-align:left"><strong>2</strong></td><td style="text-align:left"><strong>public virtual void Clear()</strong></td><td><strong>从 Hashtable 中移除所有的元素</strong></td></tr><tr><td style="text-align:left"><strong>3</strong></td><td style="text-align:left"><strong>public virtual bool ContainsKey( object key )</strong></td><td><strong>判断 Hashtable 是否包含指定的键</strong></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>public virtual bool ContainsValue( object value )</strong></td><td><strong>判断 Hashtable 是否包含指定的值</strong></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>public virtual void Remove( object key )</strong></td><td><strong>从 Hashtable 中移除带有指定的键的元素</strong></td></tr></tbody></table><h2 id="排序列表-sortedlist"><a class="header-anchor" href="#排序列表-sortedlist">¶</a>排序列表（SortedList）</h2><p>SortedList 类代表了一系列按照键来排序的<strong>键/值</strong>对，这些键值对可以通过键和索引来访问。</p><p>排序列表是数组和哈希表的组合。它包含一个可使用键或索引访问各项的列表。如果您使用索引访问各项，则它是一个动态数组（ArrayList），如果您使用键访问各项，则它是一个哈希表（Hashtable）。集合中的各项总是按键值排序。</p><h3 id="sortedlist-类的属性"><a class="header-anchor" href="#sortedlist-类的属性">¶</a>SortedList 类的属性</h3><p>下表列出了 <strong>SortedList</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Capacity</td><td style="text-align:left">获取或设置 SortedList 的容量。</td></tr><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 SortedList 中的元素个数。</td></tr><tr><td style="text-align:left">IsFixedSize</td><td style="text-align:left">获取一个值，表示 SortedList 是否具有固定大小。</td></tr><tr><td style="text-align:left">IsReadOnly</td><td style="text-align:left">获取一个值，表示 SortedList 是否只读。</td></tr><tr><td style="text-align:left">Item</td><td style="text-align:left">获取或设置与 SortedList 中指定的键相关的值。</td></tr><tr><td style="text-align:left">Keys</td><td style="text-align:left">获取 SortedList 中的键。</td></tr><tr><td style="text-align:left">Values</td><td style="text-align:left">获取 SortedList 中的值。</td></tr></tbody></table><h3 id="sortedlist-类的方法"><a class="header-anchor" href="#sortedlist-类的方法">¶</a>SortedList 类的方法</h3><p>下表列出了 <strong>SortedList</strong> 类的一些常用的 <strong>方法</strong>：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>public virtual void Add( object key, object value )</strong></td><td><strong>向 SortedList 添加一个带有指定的键和值的元素</strong></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>public virtual void Clear()</strong></td><td><strong>从 SortedList 中移除所有的元素</strong></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>public virtual bool ContainsKey( object key )</strong></td><td><strong>判断 SortedList 是否包含指定的键</strong></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>public virtual bool ContainsValue( object value )</strong></td><td><strong>判断 SortedList 是否包含指定的值</strong></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">public virtual object GetByIndex( int index )</td><td>获取 SortedList 的指定索引处的值</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">public virtual object GetKey( int index )</td><td>获取 SortedList 的指定索引处的键</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">public virtual IList GetKeyList()</td><td>获取 SortedList 中的键</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">public virtual IList GetValueList()</td><td>获取 SortedList 中的值</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">public virtual int IndexOfKey( object key )</td><td>返回 SortedList 中的指定键的索引，索引从零开始</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">public virtual int IndexOfValue( object value )</td><td>返回 SortedList 中的指定值第一次出现的索引，索引从零开始</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><strong>public virtual void Remove( object key )</strong></td><td><strong>从 SortedList 中移除带有指定的键的元素</strong></td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><strong>public virtual void RemoveAt( int index )</strong></td><td><strong>移除 SortedList 的指定索引处的元素</strong></td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">public virtual void TrimToSize()</td><td>设置容量为 SortedList 中元素的实际个数</td></tr></tbody></table><h2 id="堆栈-stack"><a class="header-anchor" href="#堆栈-stack">¶</a>堆栈（Stack）</h2><p>堆栈（Stack）代表了一个<strong>后进先出</strong>的对象集合。当您需要对各项进行后进先出的访问时，则使用堆栈。当您在列表中添加一项，称为<strong>推入</strong>元素，当您从列表中移除一项时，称为<strong>弹出</strong>元素。</p><h3 id="stack-类的属性"><a class="header-anchor" href="#stack-类的属性">¶</a>Stack 类的属性</h3><p>下表列出了 <strong>Stack</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 Stack 中包含的元素个数。</td></tr></tbody></table><h3 id="stack-类的方法"><a class="header-anchor" href="#stack-类的方法">¶</a>Stack 类的方法</h3><p>下表列出了 <strong>Stack</strong> 类的一些常用的 <strong>方法</strong>：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>public virtual void Clear()</strong></td><td>** 从 Stack 中移除所有的元素**</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>public virtual bool Contains( object obj )</strong></td><td><strong>判断某个元素是否在 Stack 中</strong></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>public virtual object Peek()</strong></td><td><strong>返回在 Stack 的顶部的对象，但不移除它</strong></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>public virtual object Pop()</strong></td><td><strong>返回并移除在 Stack 的顶部的对象</strong></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>public virtual void Push( object obj )</strong></td><td><strong>向 Stack 的顶部添加一个对象</strong></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">public virtual object[] ToArray()</td><td>复制 Stack 到一个新的数组中</td></tr></tbody></table><h2 id="队列-queue"><a class="header-anchor" href="#队列-queue">¶</a>队列（Queue）</h2><p>队列（Queue）代表了一个<strong>先进先出</strong>的对象集合。当您需要对各项进行先进先出的访问时，则使用队列。当您在列表中添加一项，称为<strong>入队</strong>，当您从列表中移除一项时，称为<strong>出队</strong>。</p><h3 id="queue-类的属性"><a class="header-anchor" href="#queue-类的属性">¶</a>Queue 类的属性</h3><p>下表列出了 <strong>Queue</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 Queue 中包含的元素个数。</td></tr></tbody></table><h3 id="queue-类的方法"><a class="header-anchor" href="#queue-类的方法">¶</a>Queue 类的方法</h3><p>下表列出了 <strong>Queue</strong> 类的一些常用的 <strong>方法</strong>：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>public virtual void Clear()</strong></td><td><strong>从 Queue 中移除所有的元素</strong></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>public virtual bool Contains( object obj )</strong></td><td><strong>判断某个元素是否在 Queue 中</strong></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>public virtual object Dequeue()</strong></td><td><strong>移除并返回在 Queue 的开头的对象</strong></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>public virtual void Enqueue( object obj )</strong></td><td><strong>向 Queue 的末尾添加一个对象</strong></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">public virtual object[] ToArray()</td><td>复制 Queue 到一个新的数组中</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">public virtual void TrimToSize()</td><td>设置容量为 Queue 中元素的实际个数</td></tr></tbody></table><h2 id="点阵列-bitarray"><a class="header-anchor" href="#点阵列-bitarray">¶</a>点阵列（BitArray）</h2><p>BitArray 类管理一个紧凑型的位值数组，它使用布尔值来表示，其中 true 表示位是开启的（1），false 表示位是关闭的（0）。</p><p>当您需要存储位，但是事先不知道位数时，则使用点阵列。您可以使用<strong>整型索引</strong>从点阵列集合中访问各项，索引从零开始。</p><h3 id="bitarray-类的属性"><a class="header-anchor" href="#bitarray-类的属性">¶</a>BitArray 类的属性</h3><p>下表列出了 <strong>BitArray</strong> 类的一些常用的 <strong>属性</strong>：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Count</td><td style="text-align:left">获取 BitArray 中包含的元素个数。</td></tr><tr><td style="text-align:left">IsReadOnly</td><td style="text-align:left">获取一个值，表示 BitArray 是否只读。</td></tr><tr><td style="text-align:left">Item</td><td style="text-align:left">获取或设置 BitArray 中指定位置的位的值。</td></tr><tr><td style="text-align:left">Length</td><td style="text-align:left">获取或设置 BitArray 中的元素个数。</td></tr></tbody></table><h3 id="bitarray-类的方法"><a class="header-anchor" href="#bitarray-类的方法">¶</a>BitArray 类的方法</h3><p>下表列出了 <strong>BitArray</strong> 类的一些常用的 <strong>方法</strong>：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">方法名</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">public BitArray And( BitArray value )</td><td>对当前的 BitArray 中的元素和指定的 BitArray 中的相对应的元素执行按位与操作</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">public bool Get( int index )</td><td>获取 BitArray 中指定位置的位的值</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">public BitArray Not()</td><td>把当前的 BitArray 中的位值反转，以便设置为 true 的元素变为 false，设置为 false 的元素变为 true</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">public BitArray Or( BitArray value )</td><td>对当前的 BitArray 中的元素和指定的 BitArray 中的相对应的元素执行按位或操作</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">public void Set( int index, bool value )</td><td>把 BitArray 中指定位置的位设置为指定的值</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">public void SetAll( bool value )</td><td>把 BitArray 中的所有位设置为指定的值</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">public BitArray Xor( BitArray value )</td><td>对当前的 BitArray 中的元素和指定的 BitArray 中的相对应的元素执行按位异或操作</td></tr></tbody></table><h1 id="泛型-generic"><a class="header-anchor" href="#泛型-generic">¶</a>泛型（Generic）</h1><p><strong>泛型（Generic）</strong> 允许您延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许您编写一个可以与任何数据类型一起工作的类或方法。</p><p>例如下面例子，来说明泛型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 泛型</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Number</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> T _number1;</span><br><span class="line">        <span class="keyword">public</span> T _number2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Number&lt;<span class="built_in">int</span>&gt; number = <span class="keyword">new</span> Number&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            number._number1 = <span class="number">1</span>;</span><br><span class="line">            number._number2 = <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(number._number1 + number._number2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型-generic-的特性"><a class="header-anchor" href="#泛型-generic-的特性">¶</a>泛型（Generic）的特性</h2><p>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>它有助于您最大限度地重用代码、保护类型的安全以及提高性能。</li><li>您可以创建泛型集合类。</li><li>您可以创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托。</li><li>您可以对泛型类进行约束以访问特定数据类型的方法。</li><li>关于泛型数据类型中使用的类型的信息可在运行时通过使用反射获取。</li></ul><p>在声明泛型方法/泛型类的时候，可以给泛型加上一定的约束来满足我们特定的一些条件。泛型限定条件：</p><ul><li>T：结构（类型参数必须是值类型。可以指定除 Nullable 以外的任何值类型）</li><li>T：类 （类型参数必须是引用类型，包括任何类、接口、委托或数组类型）</li><li>T：new() （类型参数必须具有无参数的公共构造函数。当与其他约束一起使用时 new() 约束必须最后指定）</li><li>T：&lt;基类名&gt; 类型参数必须是指定的基类或派生自指定的基类</li><li>T：&lt;接口名称&gt; 类型参数必须是指定的接口或实现指定的接口。可以指定多个接口约束。约束接口也可以是泛型的。</li></ul><h1 id="匿名方法"><a class="header-anchor" href="#匿名方法">¶</a>匿名方法</h1><p>我们已经提到过，委托是用于引用与其具有相同标签的方法。换句话说，您可以使用委托对象调用可由委托引用的方法。</p><p><strong>匿名方法（Anonymous methods）</strong> 提供了一种传递代码块作为委托参数的技术。匿名方法是没有名称只有主体的方法。</p><p>在匿名方法中您不需要指定返回类型，它是从方法主体内的 return 语句推断的。</p><h2 id="编写匿名方法的语法"><a class="header-anchor" href="#编写匿名方法的语法">¶</a>编写匿名方法的语法</h2><p>匿名方法是通过使用 <strong>delegate</strong> 关键字创建委托实例来声明的。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delegate void NumberChanger(int n);</span><br><span class="line">...</span><br><span class="line">NumberChanger nc = delegate(int x)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;Anonymous Method: &#123;0&#125;&quot;, x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码块 <strong>Console.WriteLine(“Anonymous Method: {0}”, x);</strong> 是匿名方法的主体。</p><p>委托可以通过匿名方法调用，也可以通过命名方法调用，即，通过向委托对象传递方法参数。</p><blockquote><p><strong>注意:</strong> 匿名方法的主体后面需要一个 <strong><code>;</code></strong></p></blockquote><h1 id="不安全代码"><a class="header-anchor" href="#不安全代码">¶</a>不安全代码</h1><p>当一个代码块使用 <strong>unsafe</strong> 修饰符标记时，C# 允许在函数中使用指针变量。<strong>不安全代码</strong>或非托管代码是指使用了<strong>指针</strong>变量的代码块。</p><h2 id="指针变量"><a class="header-anchor" href="#指针变量">¶</a>指针变量</h2><p><strong>指针</strong> 是值为另一个变量的地址的变量，即内存位置的直接地址。就像其他变量或常量，您必须在使用指针存储其他变量地址之前声明指针。</p><p>指针变量声明的一般形式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type* var-name;</span><br></pre></td></tr></table></figure><p>下面是指针类型声明的实例：</p><table><thead><tr><th style="text-align:left">实例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>int* p</code></td><td style="text-align:left"><code>p</code> 是指向整数的指针。</td></tr><tr><td style="text-align:left"><code>double* p</code></td><td style="text-align:left"><code>p</code> 是指向双精度数的指针。</td></tr><tr><td style="text-align:left"><code>float* p</code></td><td style="text-align:left"><code>p</code> 是指向浮点数的指针。</td></tr><tr><td style="text-align:left"><code>int** p</code></td><td style="text-align:left"><code>p</code> 是指向整数的指针的指针。</td></tr><tr><td style="text-align:left"><code>int*[] p</code></td><td style="text-align:left"><code>p</code> 是指向整数的指针的一维数组。</td></tr><tr><td style="text-align:left"><code>char* p</code></td><td style="text-align:left"><code>p</code> 是指向字符的指针。</td></tr><tr><td style="text-align:left"><code>void* p</code></td><td style="text-align:left"><code>p</code> 是指向未知类型的指针。</td></tr></tbody></table><h2 id="编译不安全代码"><a class="header-anchor" href="#编译不安全代码">¶</a>编译不安全代码</h2><p>为了编译不安全代码，您必须切换到命令行编译器指定 <strong>/unsafe</strong> 命令行。</p><p>例如，为了编译包含不安全代码的名为 prog1.cs 的程序，需在命令行中输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc /unsafe prog1.cs</span><br></pre></td></tr></table></figure><h2 id="fixed-关键字"><a class="header-anchor" href="#fixed-关键字">¶</a>fixed 关键字</h2><p>由于 C#中声明的变量在内存中的存储受垃圾回收器管理；因此一个变量（例如一个大数组）有可能在运行过程中被移动到内存中的其他位置。如果一个变量的内存地址会变化，那么指针也就没有意义了。</p><p>解决方法就是使用 fixed 关键字来固定变量位置不移动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static unsafe void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">  fixed(int *ptr = int[5])  &#123;//...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stackalloc"><a class="header-anchor" href="#stackalloc">¶</a>stackalloc</h3><p>在 unsafe 不安全环境中，我们可以通过 stackalloc 在堆栈上分配内存，因为在堆栈上分配的内存不受内存管理器管理，因此其相应的指针不需要固定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static unsafe void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">  int *ptr = stackalloc int[1] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程"><a class="header-anchor" href="#多线程">¶</a>多线程</h1><p><strong>线程</strong> 被定义为程序的执行路径。每个线程都定义了一个独特的控制流。如果您的应用程序涉及到复杂的和耗时的操作，那么设置不同的线程执行路径往往是有益的，每个线程执行特定的工作。</p><p>线程是<strong>轻量级进程</strong>。一个使用线程的常见实例是现代操作系统中并行编程的实现。使用线程节省了 CPU 周期的浪费，同时提高了应用程序的效率。</p><h2 id="线程生命周期"><a class="header-anchor" href="#线程生命周期">¶</a>线程生命周期</h2><p>线程生命周期开始于 System.Threading.Thread 类的对象被创建时，结束于线程被终止或完成执行时。</p><p>下面列出了线程生命周期中的各种状态：</p><ul><li><strong>未启动状态</strong>：当线程实例被创建但 Start 方法未被调用时的状况。</li><li><strong>就绪状态</strong>：当线程准备好运行并等待 CPU 周期时的状况。</li><li>不可运行状态<ul><li>已经调用 Sleep 方法</li><li>已经调用 Wait 方法</li><li>通过 I/O 操作阻塞</li></ul></li><li><strong>死亡状态</strong>：当线程已完成执行或已中止时的状况。</li></ul><h2 id="主线程"><a class="header-anchor" href="#主线程">¶</a>主线程</h2><p>在 C# 中，<strong>System.Threading.Thread</strong> 类用于线程的工作。它允许创建并访问多线程应用程序中的单个线程。进程中第一个被执行的线程称为<strong>主线程</strong>。</p><p>当 C# 程序开始执行时，主线程自动创建。使用 <strong>Thread</strong> 类创建的线程被主线程的子线程调用。您可以使用 Thread 类的 <strong>CurrentThread</strong> 属性访问线程。</p><h1 id="readme"><a class="header-anchor" href="#readme">¶</a>README</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-23</p></div></div><div class='timeline-item-content'><ol><li>在 “前言” 部分，新增了对代码规范的链接</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-10</p></div></div><div class='timeline-item-content'><ol><li>更新了 <strong>线程</strong> 更详细的用法</li><li>在文章前面添加 <strong>前言</strong> 部分</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Csharp </category>
          
          <category> Unity3D基础 </category>
          
          <category> Csharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> Csharp </tag>
            
            <tag> Csharp基础 </tag>
            
            <tag> Unity3D基础 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> Csharp高级语法 </tag>
            
            <tag> 面型对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/03.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><h2 id="设计模式简介"><a class="header-anchor" href="#设计模式简介">¶</a>设计模式简介</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p><strong>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</strong>。<strong>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性</strong>。 毫无疑问，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h2 id="什么是-gof-四人帮-全拼-gang-of-four-？"><a class="header-anchor" href="#什么是-gof-四人帮-全拼-gang-of-four-？">¶</a>什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="设计模式的使用"><a class="header-anchor" href="#设计模式的使用">¶</a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p><ul><li><p>开发人员的共同平台</p><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p></li><li><p>最佳的实践</p><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p></li></ul><h2 id="设计模式的类型"><a class="header-anchor" href="#设计模式的类型">¶</a>设计模式的类型</h2><ol><li><p><strong>创建型模式</strong></p><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul></li><li><p><strong>结构型模式</strong></p><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul></li><li><p><strong>行为型模式</strong></p><p>这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul></li></ol><h2 id="设计模式的六大原则"><a class="header-anchor" href="#设计模式的六大原则">¶</a>设计模式的六大原则</h2><ol><li><p><strong>开闭原则（Open Close Principle）</strong></p><p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p><p>简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p></li><li><p><strong>里氏代换原则（Liskov Substitution Principle）</strong></p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，<strong>任何基类可以出现的地方，子类一定可以出现</strong>（父类变量里面装载子类对象）。</p><p>LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。</p><p>里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p></li><li><p><strong>依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，<strong>它强调降低依赖，降低耦合</strong>。</p></li><li><p><strong>迪米特法则，又称最少知道原则（Demeter Principle）</strong></p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong></p><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p></li></ol><h2 id="采用的语言"><a class="header-anchor" href="#采用的语言">¶</a>采用的语言</h2><p>设计模式是针对针对编程的一种思想和解决方法，和使用哪种语言无关。为了更直观地反映设计模式的好处与作用，此文章采用 C# 的语法进行展示。C# 的基本用法，可以参照<a href="https://blog.yuilexi.cn/2023/04/26/Programming/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">C#基础语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a>这篇文章。</p><h1 id="简单工厂模式-创造型"><a class="header-anchor" href="#简单工厂模式-创造型">¶</a>简单工厂模式（创造型）</h1><p>工厂模式是 最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式**。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。**</p><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><ol><li>**意图：**定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li><li>**主要解决：**主要解决接口选择的问题。</li><li>**何时使用：**我们明确地计划不同条件下创建不同实例时。</li><li>**如何解决：**让其子类实现工厂接口，返回的也是一个抽象的产品。</li><li>**关键代码：**创建过程在其子类执行。</li><li><strong>优点：</strong></li><li>一个调用者想创建一个对象，只要知道其名称就可以了。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li><li>**缺点：**每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</li></ol><p><img src="http://imageshack.yuilexi.cn/Programming/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.svg" alt="简单工厂模式"></p><p>当存在多个子类时，我们可以创建一个父类。每当需要子类对象时，我们都给它一个父类对象，而父类对象中具体装载哪个子类对象，就需要根据用户的需求而定。</p><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><p>下面例子将实现一个简单的工厂模式。情景想象：一个工厂可以生产三种笔记本电脑，分别是：联想、惠普和戴尔。工厂事先不知道用户要选择哪种品牌的电脑，但是无论选什么品牌，必定是“电脑”这一物品。</p><p>第一步，先创建一个接口，以便于子类能够继承这个接口。也可以使用抽象类、一般父类实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建一个接口：电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintComputer</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建三个笔记本电脑的具体品牌的子类：联想、惠普、戴尔，这三个子类继承上面的<code>IComputer</code>接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在创建三个类，分别是：联想、惠普、戴尔</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lenovo</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;联想笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HP</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;惠普笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;戴尔笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个工厂类，用于实现具体的电脑。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个简单工厂类，用来创建电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IComputer <span class="title">CreateComputer</span>(<span class="params"><span class="built_in">string</span> type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IComputer computer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Lenovo&quot;</span>:</span><br><span class="line">                computer = <span class="keyword">new</span> Lenovo();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HP&quot;</span>:</span><br><span class="line">                computer = <span class="keyword">new</span> HP();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Dell&quot;</span>:</span><br><span class="line">                computer = <span class="keyword">new</span> Dell();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，作为顾客，要去购买电脑。具体代码在主函数里面实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建电脑对象，返回一个接口实例，而接口中转载不同需求的电脑品牌</span></span><br><span class="line">        IComputer computer1 = ComputerFactory.CreateComputer(<span class="string">&quot;Lenovo&quot;</span>);</span><br><span class="line">        computer1.PrintComputer();</span><br><span class="line">        IComputer  computer2 = ComputerFactory.CreateComputer(<span class="string">&quot;HP&quot;</span>);</span><br><span class="line">        computer2.PrintComputer();</span><br><span class="line">        IComputer computer3 = ComputerFactory.CreateComputer(<span class="string">&quot;Dell&quot;</span>);</span><br><span class="line">        computer3.PrintComputer();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，不管顾客想买什么品牌的电脑，可以直接给他一个<code>电脑</code>（基类），<code>电脑</code>具体是什么品牌（基类里面装什么子类），根据顾客的需求，就能实现对应的品牌（<code>public static IComputer CreateComputer(string type)</code>实现）。这样，就能向用户隐藏内部的逻辑，因为用户接收的是一个基类，而子类的实现与装载已经封装起来。</p><h1 id="抽象工厂模式-创造型"><a class="header-anchor" href="#抽象工厂模式-创造型">¶</a>抽象工厂模式（创造型）</h1><p>抽象工厂模式是围绕一个超级工厂创建其他工厂。<strong>该超级工厂又称为其他工厂的工厂</strong>。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>**意图：**提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p>**主要解决：**主要解决接口选择的问题。</p><p>**何时使用：**系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p>**如何解决：**在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong> <strong>在一个工厂里聚合多个同类产品</strong>。</p><p>**优点：**当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p>**缺点：**产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><p><strong>使用场景：</strong> 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。</p><p>**注意事项：**产品族难扩展，产品等级易扩展。</p><p><img src="https://imageshack.yuilexi.cn/Programming/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.svg" alt="设计模式"></p><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><p>基于<a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0-1">简单工厂模式</a>进行扩展。我们不仅可以选择笔记本的品牌，还可以选择手机的品牌。笔记本和手机之间没有任何关联，都有单独的工厂。而电脑与手机的生产购买逻辑是一样的，因此先创建一个工厂，在选择是哪种工厂，最后选择该工厂的哪个产品。</p><p>基于上面的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再创建一个接口：手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPhone</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造三个手机的品牌的子类：苹果、三星、OPPO，这三个子类继承上面的<code>IPhone</code>接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建三个类，分别是：苹果、三星、OPPO</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;苹果手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Samsung</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;三星手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OPPO</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;OPPO手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着构造一个超级工厂的抽象类，用于<strong>具体的工厂的继承</strong>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个抽象的超级工厂类，用于实现某个工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IComputer <span class="title">CreateComputer</span>()</span>&#123;<span class="keyword">return</span> <span class="literal">null</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IColor <span class="title">CreateColor</span>()</span>&#123;<span class="keyword">return</span> <span class="literal">null</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着构造电脑品牌和手机品牌的两个工厂，继承于<code>AbstractFactory</code>这个抽象类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造“电脑品牌”的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerFactort</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IComputer <span class="title">CreateComputer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Lenovo&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Lenovo();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HP&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HP();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Dell&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dell();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造“手机品牌”的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhoneFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IPhone <span class="title">CreateColor</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Apple&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Samsung&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Samsung();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;OPPO&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OPPO();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着构造一个工厂生成器，通过对输入的需求信息分析，进行选择对应的工厂。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个工厂创造器/生成器类，通过传递品牌或颜色信息来获取工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryProducer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">GetFactory</span>(<span class="params"><span class="built_in">string</span> choice</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Computer&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ComputerFactort();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Phone&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PhoneFactory();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在主函数中，创建上述工厂，并获得对应的产品。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建电脑工厂</span></span><br><span class="line">        AbstractFactory factoryComputer = FactoryProducer.GetFactory(<span class="string">&quot;Computer&quot;</span>);</span><br><span class="line">        <span class="comment">//创建联想电脑</span></span><br><span class="line">        IComputer computer1 = factoryComputer.CreateComputer(<span class="string">&quot;Lenovo&quot;</span>);</span><br><span class="line">        computer1.PrintComputer();</span><br><span class="line">        <span class="comment">//创建惠普电脑</span></span><br><span class="line">        IComputer computer2 = factoryComputer.CreateComputer(<span class="string">&quot;HP&quot;</span>);</span><br><span class="line">        computer2.PrintComputer();</span><br><span class="line">        <span class="comment">//创建戴尔电脑</span></span><br><span class="line">        IComputer computer3 = factoryComputer.CreateComputer(<span class="string">&quot;Dell&quot;</span>);</span><br><span class="line">        computer3.PrintComputer();</span><br><span class="line">        <span class="comment">//创建手机工厂</span></span><br><span class="line">        AbstractFactory factoryPhone = FactoryProducer.GetFactory(<span class="string">&quot;Phone&quot;</span>);</span><br><span class="line">        <span class="comment">//创建苹果手机</span></span><br><span class="line">        IPhone phone1 = factoryPhone.CreateColor(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        phone1.PrintPhone();</span><br><span class="line">        <span class="comment">//创建三星手机</span></span><br><span class="line">        IPhone phone2 = factoryPhone.CreateColor(<span class="string">&quot;Samsung&quot;</span>);</span><br><span class="line">        phone2.PrintPhone();</span><br><span class="line">        <span class="comment">//创建OPPO手机</span></span><br><span class="line">        IPhone phone3 = factoryPhone.CreateColor(<span class="string">&quot;OPPO&quot;</span>);</span><br><span class="line">        phone3.PrintPhone();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;程序结束!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">联想笔记本</span><br><span class="line">惠普笔记本</span><br><span class="line">戴尔笔记本</span><br><span class="line">苹果手机</span><br><span class="line">三星手机</span><br><span class="line">OPPO手机</span><br><span class="line">程序结束!</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个接口：电脑品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintComputer</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再创建一个接口：手机品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPhone</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个抽象的超级工厂类，用于实现某个工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IComputer <span class="title">CreateComputer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IPhone <span class="title">CreateColor</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建电脑工厂</span></span><br><span class="line">        AbstractFactory factoryComputer = FactoryProducer.GetFactory(<span class="string">&quot;Computer&quot;</span>);</span><br><span class="line">        <span class="comment">//创建联想电脑</span></span><br><span class="line">        IComputer computer1 = factoryComputer.CreateComputer(<span class="string">&quot;Lenovo&quot;</span>);</span><br><span class="line">        computer1.PrintComputer();</span><br><span class="line">        <span class="comment">//创建惠普电脑</span></span><br><span class="line">        IComputer computer2 = factoryComputer.CreateComputer(<span class="string">&quot;HP&quot;</span>);</span><br><span class="line">        computer2.PrintComputer();</span><br><span class="line">        <span class="comment">//创建戴尔电脑</span></span><br><span class="line">        IComputer computer3 = factoryComputer.CreateComputer(<span class="string">&quot;Dell&quot;</span>);</span><br><span class="line">        computer3.PrintComputer();</span><br><span class="line">        <span class="comment">//创建手机工厂</span></span><br><span class="line">        AbstractFactory factoryPhone = FactoryProducer.GetFactory(<span class="string">&quot;Phone&quot;</span>);</span><br><span class="line">        <span class="comment">//创建苹果手机</span></span><br><span class="line">        IPhone phone1 = factoryPhone.CreateColor(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        phone1.PrintPhone();</span><br><span class="line">        <span class="comment">//创建三星手机</span></span><br><span class="line">        IPhone phone2 = factoryPhone.CreateColor(<span class="string">&quot;Samsung&quot;</span>);</span><br><span class="line">        phone2.PrintPhone();</span><br><span class="line">        <span class="comment">//创建OPPO手机</span></span><br><span class="line">        IPhone phone3 = factoryPhone.CreateColor(<span class="string">&quot;OPPO&quot;</span>);</span><br><span class="line">        phone3.PrintPhone();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;程序结束!&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在创建三个类，分别是：联想、惠普、戴尔</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lenovo</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;联想笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HP</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;惠普笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">IComputer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;戴尔笔记本&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建三个类，分别是：苹果、三星、OPPO</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;苹果手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Samsung</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;三星手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OPPO</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintPhone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;OPPO手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造“电脑品牌”的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerFactort</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IComputer <span class="title">CreateComputer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Lenovo&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Lenovo();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HP&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HP();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Dell&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dell();</span><br><span class="line"></span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IPhone <span class="title">CreateColor</span>(<span class="params"><span class="built_in">string</span> color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造“手机品牌”的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhoneFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IComputer <span class="title">CreateComputer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IPhone <span class="title">CreateColor</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Apple&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Samsung&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Samsung();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;OPPO&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OPPO();</span><br><span class="line"></span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个工厂创造器/生成器类，通过传递品牌或颜色信息来获取工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryProducer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">GetFactory</span>(<span class="params"><span class="built_in">string</span> choice</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Computer&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ComputerFactort();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Phone&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PhoneFactory();</span><br><span class="line"></span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式-创造型"><a class="header-anchor" href="#单例模式-创造型">¶</a>单例模式（创造型）</h1><p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，<strong>该类负责创建自己的对象，同时确保只有单个对象被创建</strong>。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>**意图：**保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>**主要解决：**一个全局使用的类频繁地创建与销毁。</p><p>**何时使用：**当您想控制实例数目，节省系统资源的时候。</p><p>**如何解决：**判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p>**关键代码：**构造函数是私有的。</p><p><strong>应用实例：</strong></p><ul><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ul><p><strong>优点：</strong></p><ul><li>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>2、避免对资源的多重占用（比如写文件操作）。</li></ul><p>**缺点：**没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><img src="https://imageshack.yuilexi.cn/Programming/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.svg" alt="单例模式"></p><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><h3 id="单线程-懒汉式"><a class="header-anchor" href="#单线程-懒汉式">¶</a>单线程，懒汉式</h3><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个单例类的对象，用于存放当前类的唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line">    <span class="comment">//构造函数私有化，防止外界创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用属性的访问器来生成单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果当前类的实例为空，则创建一个新的实例，否则返回当前实例</span></span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不仅可以用访问器，还可以使用方法来进行访问实例化的对象。例如将上面代码改写为下面的：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个单例类的对象，用于存放当前类的唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line">    <span class="comment">//构造函数私有化，防止外界创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前对象的方法，修饰为静态方法，以便于直接能“类名.方法”进行调用，而不是使用“对象名.方法”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断当前类的唯一实例是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果为空，则创建一个新的实例</span></span><br><span class="line">            _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不为空，则直接返回当前实例</span></span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全-加锁"><a class="header-anchor" href="#线程安全-加锁">¶</a>线程安全，加锁</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个静态变量来保存类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个标识确保线程同步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义私有构造函数，使外界不能创建该类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span></span><br><span class="line">        <span class="comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span></span><br><span class="line">        <span class="comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span></span><br><span class="line">        <span class="keyword">lock</span> (locker)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果类的实例不存在则创建，否则直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全-双重锁定"><a class="header-anchor" href="#线程安全-双重锁定">¶</a>线程安全，双重锁定</h3><p>上面代码对于每个线程都会对线程辅助对象<code>locker</code>加锁之后再判断实例是否存在，对于这个操作完全没有必要的，因为当第一个线程创建了该类的实例之后，后面的线程此时只需要直接判断（<code>uniqueInstance==null</code>）为假，此时完全没必要对线程辅助对象加锁之后再去判断，所以上面的实现方式增加了额外的开销，损失了性能。</p><p>为了改进上面实现方式的缺陷，我们只需要在<code>lock</code>语句前面加一句（<code>uniqueInstance==null</code>）的判断就可以避免锁所增加的额外开销，这种实现方式我们就叫它**<font color='red'>双重锁定</font>**</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个静态变量来保存类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">    <span class="comment">// 定义一个标识确保线程同步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="comment">// 定义私有构造函数，使外界不能创建该类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span></span><br><span class="line">        <span class="comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span></span><br><span class="line">        <span class="comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span></span><br><span class="line">        <span class="comment">// 双重锁定只需要一句判断就可以了</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (locker)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果类的实例不存在则创建，否则直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="建造者模式-创造型"><a class="header-anchor" href="#建造者模式-创造型">¶</a>建造者模式（创造型）</h1><p><strong>建造者模式</strong>使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>**意图：**将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p>**主要解决：**主要解决在软件系统中，有时候面临着&quot;一个复杂对象&quot;的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p>**何时使用：**一些基本部件不会变，而其组合经常变化的时候。</p><p>**如何解决：**将变与不变分离开。</p><p>**关键代码：**建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><p>**应用实例：**去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的&quot;套餐&quot;。</p><p><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险。</p><p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p><p><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p><p>**注意事项：**与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><p><img src="https://imageshack.yuilexi.cn/Programming/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.svg" alt="建造者模式"></p><p>情景如下：我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 <em>Item</em> 接口和实现 <em>Item</em> 接口的实体类，以及一个表示食物包装的 <em>Packing</em> 接口和实现 <em>Packing</em> 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>首先，构造两个接口，分别是包装和食物，其中食物里面包含有包装的实现。代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个食物的接口，方便后面继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line">    <span class="function">IPacking <span class="title">GetFoodPacking</span>()</span>;</span><br><span class="line">    <span class="function"><span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造一个包装的接口，方便后面继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetPackingType</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造两个具体的包装类，并继承自<code>IPacking</code>接口。具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装：纸盒</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wrapper</span> : <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetPackingType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包装：瓶子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bottle</span> : <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetPackingType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于食物有两大类：汉堡和饮料，因此，这里不直接构造具体食物的类，而是先构造两个抽象类：汉堡和冷饮，然后再构造它们的子类：素食汉堡、鸡肉汉堡、可口可乐、百事可乐。在抽象类中，会具体实现包装类型的选择，而不是在具体的某一食物类中实现选择。具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//食物：抽象汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Burger</span> : <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPacking <span class="title">GetFoodPacking</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//食物：抽象冷饮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ColdDrink</span> : <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPacking <span class="title">GetFoodPacking</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造实现四种具体的食物类：素食汉堡类、鸡肉汉堡类、可口可乐类、百事可乐类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//素食汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VegBurger</span> : <span class="title">Burger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鸡肉汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChickenBurger</span> : <span class="title">Burger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可口可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Coke</span> : <span class="title">ColdDrink</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//百事可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pepsi</span> : <span class="title">ColdDrink</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，构造一个菜单管理的类<code>Meal</code>，该类可以实现的功能有：</p><ul><li>向菜单中添加具体的食物</li><li>计算出食物的价格</li><li>打印输出当前菜单的所有情况</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个套餐类，用于组合食物</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Meal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IFood&gt; _foodList = <span class="keyword">new</span> List&lt;IFood&gt;();  <span class="comment">//创建一个列表，用于存储当前所有食物</span></span><br><span class="line">    <span class="comment">//向列表中添加食物的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddFood</span>(<span class="params">IFood food</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._foodList.Add(food);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前套餐的总价</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">GetCost</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> food <span class="keyword">in</span> <span class="keyword">this</span>._foodList)</span><br><span class="line">        &#123;</span><br><span class="line">            cost += food.GetFoodPrice();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示当前套餐的所有食物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowFood</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你的食物如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> food <span class="keyword">in</span> <span class="keyword">this</span>._foodList)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;食物: &#123;0&#125; ；&quot;</span>, food.GetFoodName());</span><br><span class="line">            Console.Write(<span class="string">&quot;包装: &#123;0&#125;；&quot;</span>, food.GetFoodPacking().GetPackingType());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;单价: &#123;0&#125;；&quot;</span>, food.GetFoodPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;总价：&#123;0&#125;&quot;</span>, GetCost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的所有过程，均由售卖方执行，而作为顾客，只需要点餐就能获得对应的食物。这一部分在函数中进行，用于最终实现点餐的过程。具体代码如下;</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Meal meal1 = <span class="keyword">new</span> Meal(); <span class="comment">//先生成一个菜单管理器实例</span></span><br><span class="line">        meal1.AddFood(<span class="keyword">new</span> VegBurger()); <span class="comment">//向菜单管理器中添加食物</span></span><br><span class="line">        meal1.AddFood(<span class="keyword">new</span> Coke()); <span class="comment">//向菜单管理器中添加食物</span></span><br><span class="line">        meal1.ShowFood();</span><br><span class="line">        Meal meal2 = <span class="keyword">new</span> Meal();</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> Pepsi());</span><br><span class="line">        meal2.ShowFood();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">你的食物如下：</span><br><span class="line">食物: Veg Burger ；包装: Wrapper；单价: <span class="number">25</span>；</span><br><span class="line">食物: Coke ；包装: Bottle；单价: <span class="number">30</span>；</span><br><span class="line">总价：<span class="number">55</span></span><br><span class="line">你的食物如下：</span><br><span class="line">食物: Chicken Burger ；包装: Wrapper；单价: <span class="number">50.5</span>；</span><br><span class="line">食物: Chicken Burger ；包装: Wrapper；单价: <span class="number">50.5</span>；</span><br><span class="line">食物: Pepsi ；包装: Bottle；单价: <span class="number">35</span>；</span><br><span class="line">总价：<span class="number">136</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Meal meal1 = <span class="keyword">new</span> Meal(); <span class="comment">//先生成一个菜单管理器实例</span></span><br><span class="line">        meal1.AddFood(<span class="keyword">new</span> VegBurger()); <span class="comment">//向菜单管理器中添加食物</span></span><br><span class="line">        meal1.AddFood(<span class="keyword">new</span> Coke()); <span class="comment">//向菜单管理器中添加食物</span></span><br><span class="line">        meal1.ShowFood();</span><br><span class="line">        Meal meal2 = <span class="keyword">new</span> Meal();</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">        meal2.AddFood(<span class="keyword">new</span> Pepsi());</span><br><span class="line">        meal2.ShowFood();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个食物的接口，方便后面继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IPacking <span class="title">GetFoodPacking</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个包装的接口，方便后面继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetPackingType</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个套餐类，用于组合食物</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Meal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IFood&gt; _foodList = <span class="keyword">new</span> List&lt;IFood&gt;();  <span class="comment">//创建一个列表，用于存储当前所有食物</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//像列表中添加食物的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddFood</span>(<span class="params">IFood food</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._foodList.Add(food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前套餐的总价</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">GetCost</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> food <span class="keyword">in</span> <span class="keyword">this</span>._foodList)</span><br><span class="line">        &#123;</span><br><span class="line">            cost += food.GetFoodPrice();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示当前套餐的所有食物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowFood</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你的食物如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> food <span class="keyword">in</span> <span class="keyword">this</span>._foodList)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;食物: &#123;0&#125; ；&quot;</span>, food.GetFoodName());</span><br><span class="line">            Console.Write(<span class="string">&quot;包装: &#123;0&#125;；&quot;</span>, food.GetFoodPacking().GetPackingType());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;单价: &#123;0&#125;；&quot;</span>, food.GetFoodPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;总价：&#123;0&#125;&quot;</span>, GetCost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 构造两个具体的包装类，并继承自`IPacking`接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包装：纸盒</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wrapper</span> : <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetPackingType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包装：瓶子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bottle</span> : <span class="title">IPacking</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetPackingType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span> 构造两个具体的包装类，并继承自`IPacking`接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 构造两个抽象的食物类，并继承自`IFood`接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//食物：抽象汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Burger</span> : <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPacking <span class="title">GetFoodPacking</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//食物：抽象冷饮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ColdDrink</span> : <span class="title">IFood</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPacking <span class="title">GetFoodPacking</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span> 构造两个抽象的食物类，并继承自`IFood`接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 具体的食物类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//素食汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VegBurger</span> : <span class="title">Burger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸡肉汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChickenBurger</span> : <span class="title">Burger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可口可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Coke</span> : <span class="title">ColdDrink</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//百事可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pepsi</span> : <span class="title">ColdDrink</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">GetFoodName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetFoodPrice</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span> 具体的食物类</span></span><br></pre></td></tr></table></figure><h1 id="原型模式-创造型"><a class="header-anchor" href="#原型模式-创造型">¶</a>原型模式（创造型）</h1><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>原型模式是一种创建型设计模式，<strong>它允许我们通过复制现有对象来创建新的对象，而不必从头开始编写代码</strong>。在原型模式中，我们使用一个现有的对象作为原型，并通过克隆该对象来创建新的对象。</p><ol><li>意图：用<strong>原型实例</strong>指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li><li>主要解决：在运行期建立和删除原型。</li><li>如何解决：利用已有的一个原型对象，快速地生成和原型对象一样的实例。</li><li>关键代码：<ol><li>实现克隆操作。</li><li>原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些&quot;易变类&quot;拥有稳定的接口。</li></ol></li><li>优点： 性能提高，逃避构造函数的约束。</li><li>缺点：<ol><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。</li><li>必须实现 Cloneable 接口。</li><li>逃避构造函数的约束。</li></ol></li></ol><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><p><img src="https://imageshack.yuilexi.cn/Programming/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.svg" alt="原型模式"></p><p>首先定义一个可以克隆的接口 <code>ICloneable</code>，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">object</span> <span class="title">Clone</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个具体的原型类 <code>Prototype</code> ，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个具体的原型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Prototype</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prototype</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现ICloneable接口的Clone方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Prototype(Id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后测试原型，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试原型模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个原型对象</span></span><br><span class="line">        <span class="keyword">var</span> prototype = <span class="keyword">new</span> Prototype(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆原型对象</span></span><br><span class="line">        <span class="keyword">var</span> clone = (Prototype)prototype.Clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较两个对象的Id属性</span></span><br><span class="line">        Console.WriteLine(prototype.Id == clone.Id); <span class="comment">// 输出 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们首先定义了一个 <code>ICloneable</code> 接口，然后创建了一个具体的原型类 <code>Prototype</code> 。该类实现了<code> ICloneable</code> 接口，并在 <code>Clone()</code> 方法中返回一个新的 <code>Prototype</code> 对象，该对象与当前对象具有相同的 <code>Id</code> 属性。</p><p>接下来，我们在 <code>Main()</code> 方法中创建了一个原型对象，然后克隆了它，最后比较了两个对象的 Id 属性。由于克隆对象是从原型对象复制而来的，因此它们的 Id 属性是相同的。</p><p>这就是原型模式的基本实现方式。通过使用 <code>ICloneable</code> 接口和 <code>Clone()</code> 方法，我们可以轻松地实现对象的克隆，从而避免了从头开始编写代码的麻烦。</p><h1 id="适配器模式-结构型"><a class="header-anchor" href="#适配器模式-结构型">¶</a>适配器模式（结构型）</h1><p>适配器模式是一种结构型设计模式，<strong>它允许我们将不兼容的对象包装在一个适配器中，以便它们可以相互协作</strong>。适配器模式<strong>通常用于将现有类的接口转换为另一个接口，以便它们可以在不修改原始代码的情况下协同工作</strong>。</p><p>适配器模式由三个主要组件组成：客户端、适配器和适配者。</p><ul><li>客户端是使用适配器的对象，</li><li>适配器是将适配者转换为所需接口的对象，</li><li>适配者是要转换的对象。</li></ul><p>适配器通过实现目标接口并包装适配者来实现适配。</p><h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2><p>**意图：**将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p>**主要解决：**主要解决在软件系统中，常常要将一些&quot;现存的对象&quot;放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p>**如何解决：**继承或依赖（推荐）。</p><p>**优点：**可以让任何两个没有关联的类一起运行。提高了类的复用。增加了类的透明度。灵活性好。</p><p><strong>缺点：</strong> 过多地使用适配器，会让系统非常零乱，不易整体进行把握。</p><h2 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h2><p>我们有一个音频播放的接口 <code>IMediaPlayer</code> ，并且还有一个实现了上述接口的类 <code>AudioPlayer</code> 。默认情况下，<code>AudioPlayer</code> 只能播放 mp3 格式的音频文件。</p><p>现在，我们需要让 <code>AudioPlayer</code> （目标/客户端）支持 vlc 和 mp4 格式的文件。</p><p>因此，我们先定义一个新的音频播放的<s>接口 <code>INewMediaPlayer</code></s> <strong>抽象类</strong> <code>NewMediaPlayer</code> ，并且还有两个实现了上述<s>接口</s><strong>抽象类</strong>的类： <code>VlcPlayer</code> 和 <code>Mp4Player</code></p><p>我们想要让 <code>AudioPlayer</code> 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 <code>IMediaPlayer</code> 接口的适配器类 <code>MediaAdapter</code>，并使用 <code>NewMediaPlayer</code> 的子对象（适配者）来播放所需的格式。</p><p><code>AudioPlayer</code>（目标/客户端） 使用适配器类 <code>MediaAdapter</code> 传递所需的音频类型，不需要知道能播放所需格式音频的实际类。</p><p>首先定义出上述的接口<code>IMediaPlayer</code> 代码如下：</p><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-31</p></div></div><div class='timeline-item-content'><ol><li>添加原型模式</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Csharp </category>
          
          <category> 设计模式 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客使用MathJax公式并解决Markdown渲染冲突问题</title>
      <link href="/Hexo/Trouble/%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98.html"/>
      <url>/Hexo/Trouble/%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h1 id="利用mathjax来渲染latex数学公式"><a class="header-anchor" href="#利用mathjax来渲染latex数学公式">¶</a>利用MathJax来渲染LaTeX数学公式</h1><p><code>hexo</code>主题<code>Next</code>中已经集成了对<code>mathjax</code>的支持。在<strong>主题配置文件</strong>中，找到下面配置片段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启MathJax渲染</span></span><br><span class="line">  <span class="comment"># 是否再每一页进行MathJax渲染。</span></span><br><span class="line">  <span class="comment"># false:将会对在YAML front matters中添加 mathjax:true 的MD文件进行渲染</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后可以安装一个Mathjax的渲染引擎。在当前项目路径下，打开终端，并输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo<span class="literal">-renderer-marked</span> <span class="literal">--save</span> //如果之前按安装其他的渲染插件，先删除</span><br><span class="line">npm install hexo<span class="literal">-renderer-kramed</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>这样就能渲染出数学公式。例如下面效果：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//行内公式（或者叫内联公式）</span><br><span class="line"><span class="built_in">$</span>a <span class="keyword">\parallel</span> c,b <span class="keyword">\parallel</span> c <span class="keyword">\Rightarrow</span> a <span class="keyword">\parallel</span> b <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line">//多行公式（或者加公式块）</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;  </span><br><span class="line">  <span class="keyword">\nabla</span> <span class="keyword">\cdot</span> <span class="keyword">\mathbf</span>&#123;E&#125; =<span class="keyword">\cfrac</span>&#123;<span class="keyword">\rho</span>&#125;&#123;<span class="keyword">\varepsilon</span> <span class="built_in">_</span>0&#125;  <span class="keyword">\\</span>  </span><br><span class="line">  <span class="keyword">\nabla</span> <span class="keyword">\cdot</span> <span class="keyword">\mathbf</span>&#123;B&#125; = 0 <span class="keyword">\\</span>  </span><br><span class="line">  <span class="keyword">\nabla</span> <span class="keyword">\times</span>  <span class="keyword">\mathbf</span>&#123;E&#125; = -<span class="keyword">\cfrac</span>&#123;<span class="keyword">\partial</span> <span class="keyword">\mathbf</span>&#123;B&#125;&#125;&#123;<span class="keyword">\partial</span> t &#125;  <span class="keyword">\\</span>  </span><br><span class="line">  <span class="keyword">\nabla</span> <span class="keyword">\times</span>  <span class="keyword">\mathbf</span>&#123;B&#125; = <span class="keyword">\mu</span> <span class="built_in">_</span>0<span class="keyword">\mathbf</span>&#123;J&#125; + <span class="keyword">\mu</span> <span class="built_in">_</span>0<span class="keyword">\varepsilon</span><span class="built_in">_</span>0 <span class="keyword">\cfrac</span>&#123;<span class="keyword">\partial</span> <span class="keyword">\mathbf</span>&#123;E&#125;&#125;&#123;<span class="keyword">\partial</span> t &#125;   </span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125; </span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><ul><li><p>内联公式：$a \parallel c,b \parallel c \Rightarrow a \parallel b $</p></li><li><p>公式块</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p></li></ul><h2 id="问题描述"><a class="header-anchor" href="#问题描述">¶</a>问题描述</h2><p>例如下面的<code>Latex</code>语法：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>E<span class="built_in">_</span>&#123;1&#125;  = E<span class="built_in">_</span>&#123;2&#125; <span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>正确的显示应该是： $E_{1}  = E_{2} $ ，而<code>hexo</code>确把它渲染为：$E*{1}  = E*{2}$ 。</p><p>我们不难发现，本应该显示公式，但是却出现源码，并且部分变为斜体。原因是<code>hexo</code>先用<code>marked.js</code>渲染，然后再交给<code>MathJax</code>渲染。在<code>marked.js</code>渲染的时候下划线<code>_</code>是被替换掉，并且换成了<code>&lt;em&gt;</code>标签，即斜体字，另外LaTeX中的<code>\\</code>也会被转义成一个<code>\</code>，这样会导致<code>MathJax</code>渲染时不认为它是一个换行符了。</p><h2 id="解决方案"><a class="header-anchor" href="#解决方案">¶</a>解决方案</h2><p>通过修改<code>Hexo</code>渲染的源码来解决。</p><ol><li><p>首先进入<code>[Blog-name]\node_modules\kramed\lib\rules\inline.js</code>文件内，找到下面代码并且替换掉。这样就能解决<strong>换行</strong>冲突的问题。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到下面代码，并且注释掉</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//将下面代码添加到刚刚注释的地方</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><code>[Blog-name]\node_modules\kramed\lib\rules\inline.js</code>文件内，找到下面代码并且替换掉。这样就能解决<strong>斜体</strong>冲突的问题。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到下面代码，并且注释掉</span></span><br><span class="line"><span class="attr">em</span>: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br><span class="line"><span class="comment">//将下面代码添加到刚刚注释的地方</span></span><br><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>保存文件，并且重启项目，刷新网页。</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo s</span><br><span class="line">hexo cl</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这种方法意在解决<code>Hexo</code>的数学公式渲染问题，因此不需要对<code>Markdown</code>文件进行修改，就能正确显示数学公式</p></blockquote><h1 id="内联公式的样式调整"><a class="header-anchor" href="#内联公式的样式调整">¶</a>内联公式的样式调整</h1><p>在使用<code>Mathjax</code>公式时，内联公式的位置并不是垂直居中显示，并且还会偶尔出现横向滚动条。因此，为了改善数学公式的观看体验，下面将对上述问题进行解决。</p><p>首先来到<code>[hexo-project]\source\css\custom.css</code>文件（这是自定义的文件，如果没有就先创建）内，添加下面内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数学内联公式水平居中显示 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.mathjax-overflow</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数学内联公式取消横向滚动条 */</span></span><br><span class="line"><span class="selector-class">.mathjax-overflow</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再到主题配置文件<code>_config.butterfly.yml</code>内，找到下面位置，并添加对上述<code>CSS</code>文件的引用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/personal.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br></pre></td></tr></table></figure><p>然后重启项目并且刷新网页：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl;hexo s</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="文章配置说明"><a class="header-anchor" href="#文章配置说明">¶</a>文章配置说明</h1><h2 id="参考目录："><a class="header-anchor" href="#参考目录：">¶</a>参考目录：</h2><ul><li>文章引用<ol><li><a href="https://segmentfault.com/a/1190000007261752">Hexo下mathjax的转义问题</a></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> MathJax </tag>
            
            <tag> 公式渲染 </tag>
            
            <tag> 渲染冲突 </tag>
            
            <tag> latex </tag>
            
            <tag> 数学公式 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/02.C%E8%AF%AD%E8%A8%80/01.C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/02.C%E8%AF%AD%E8%A8%80/01.C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-认识-c-语言"><a class="header-anchor" href="#第一章-认识-c-语言">¶</a>第一章 认识 C 语言</h1><p>C 语言是一种通用的、面向过程式的计算机程序设计语言。</p><h2 id="1-1-c-语言的历史"><a class="header-anchor" href="#1-1-c-语言的历史">¶</a>1.1 C 语言的历史</h2><p>C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。C 语言最开始是于 1972 年在 DEC PDP-11 计算机上被首次实现。</p><p>在 1978 年，布莱恩·柯林汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）制作了 C 的第一个公开可用的描述，现在被称为 K&amp;R 标准。</p><p>UNIX 操作系统，C 编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p><ul><li>易于学习。</li><li>结构化语言。</li><li>它产生高效率的程序。</li><li>它可以处理底层的活动。</li><li>它可以在多种计算机平台上编译。</li></ul><h2 id="1-2-c-语言的作用"><a class="header-anchor" href="#1-2-c-语言的作用">¶</a>1.2 C 语言的作用</h2><p>语言最初是用于系统开发工作，特别是组成操作系统的程序。由于 C 语言所产生的代码运行速度与汇编语言编写的代码运行速度几乎一样，所以采用 C 语言作为系统开发语言。下面列举几个使用 C 的实例：</p><ul><li>操作系统</li><li>语言编译器</li><li>汇编器</li><li>文本编辑器</li><li>打印机</li><li>网络驱动器</li><li>现代程序</li><li>数据库</li><li>语言解释器</li><li>实体工具</li></ul><h2 id="1-3-环境设置"><a class="header-anchor" href="#1-3-环境设置">¶</a>1.3 环境设置</h2><p>如果您想要设置 C 语言环境，您需要确保电脑上有以下两款可用的软件：文本编辑器和 C 编译器。</p><h2 id="1-4-算法"><a class="header-anchor" href="#1-4-算法">¶</a>1.4 算法</h2><p>程序 = 数据结构 + 算法</p><h1 id="第二章-c-语言基础"><a class="header-anchor" href="#第二章-c-语言基础">¶</a>第二章 C 语言基础</h1><h2 id="2-1-c-语言程序结构"><a class="header-anchor" href="#2-1-c-语言程序结构">¶</a>2.1 C 语言程序结构</h2><p>一个完整的 C 语言代码文件，至少包含两部分：头文件和主函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello , world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>头文件：里面定义了 C 语言常用的常量，以及一些函数；</li><li>主函数：是 C 语言代码文件的入口，主程序所运行的源文件必须包含主函数。</li></ul><p>例如，下面完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预处理命令，（1）导入头文件；（2）宏定义；</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;XXX.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> datetype int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义函数区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-注释"><a class="header-anchor" href="#2-2-注释">¶</a>2.2 注释</h2><p>在代码中添加的标注行文字，从而帮助程序员更好的阅读代码。注释的内容将被编译器忽略，并不会在执行结果种体现出来。</p><p>在 C 语言中，主要有两种注释方式：单行注释和多行注释。</p><ol><li><p>单行注释</p><p>语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我是注释君</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><p>语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我是注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在限定符之间的所有内容均是注释。</p></li></ol><h2 id="2-3-头文件和宏定义"><a class="header-anchor" href="#2-3-头文件和宏定义">¶</a>2.3 头文件和宏定义</h2><h3 id="2-3-1-头文件"><a class="header-anchor" href="#2-3-1-头文件">¶</a>2.3.1 头文件</h3><p>头文件是扩展名为 <strong>.h</strong> 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。</p><p>在程序中要使用头文件，需要使用 C 预处理指令 <strong>#include</strong> 来引用它。前面我们已经看过 <strong>stdio.h</strong> 头文件，它是编译器自带的头文件。</p><p>引用头文件有两种方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#including<span class="string">&lt;file&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;file&quot;</span></span></span><br></pre></td></tr></table></figure><p>上述两种引用头文件的方式用法不同。</p><ul><li>使用 &lt;&gt; ：程序会从标准头文件目录中，搜索对应的头文件。因此，一般引用系统头文件，采用这种方式</li><li>使用引号：程序先从当前目录中，搜索对应的头文件。因此，自定义的头文件会采用这种方式。</li></ul><h3 id="2-3-2-宏定义"><a class="header-anchor" href="#2-3-2-宏定义">¶</a>2.3.2 宏定义</h3><p>宏定义又称为宏替换、宏代换，简称“宏”，是 C 提供的三种预处理功能的其中一种。其主要目的是为程序员在编程时提供一定的方便，并能在一定程度上提高程序的运行效率。</p><p>#define 命令是 C 语言中的一个宏定义命令，它用来讲一个标识符定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。该命令有两种格式：一种是简单的宏定义（不带参数的宏定义），另一种是带参数的宏定义。</p><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="string">&lt;宏名/标识符&gt;</span> <span class="string">&lt;字符串&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="string">&lt;宏名&gt;</span>(<span class="string">&lt;参数表&gt;</span>) <span class="string">&lt;字符串&gt;</span></span></span><br></pre></td></tr></table></figure><p>无参的宏定义：</p><ul><li>宏名一般用大写，宏定义末尾<strong>不加分号</strong>；</li><li>可以用 #undef 命令终止宏定义的作用域；</li><li>宏定义可以嵌套，&lt;内容&gt;中永远不要包含宏；</li><li>宏替换在编译前进行，不分配内存，变量定义分配内存，函数调用在编译后程序运行时进行，并且分配内存；</li><li>预处理是在编译之前的处理，而编译工作的任务之一就是语法检查，预处理不做语法检查；</li><li>使用宏可提高程序的通用性和易读性，减少不一致性，减少输入错误和便于修改。例如：数组大小常用宏定义。</li></ul><p>有参的宏定义：</p><ul><li>实参如果是表达式容易出问题</li><li>宏名和参数的括号间不能有空格</li><li>宏替换之作替换不做计算，不做表达式求解</li><li>宏的哑实结合不存在类型，也没有类型转换</li><li>宏展开不占用运行时间，只占用编译时间，函数调用占运行时间（分配内存、保留现场、值传递、返回值）</li></ul><h2 id="2-4-关键字和标识符"><a class="header-anchor" href="#2-4-关键字和标识符">¶</a>2.4 关键字和标识符</h2><h3 id="2-4-1-关键字"><a class="header-anchor" href="#2-4-1-关键字">¶</a>2.4.1 关键字</h3><p>关键字是 C 语言中已经被赋予特定含义的一些单词，开发程序时，不可以把这些保留字作为变量、函数、类、模块和其他对象的名称来使用。</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:left">说明</th><th style="text-align:center">关键字</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">auto</td><td style="text-align:left">声明自动变量</td><td style="text-align:center">int</td><td style="text-align:left">声明整型变量或函数</td></tr><tr><td style="text-align:center">break</td><td style="text-align:left">跳出当前循环</td><td style="text-align:center">long</td><td style="text-align:left">声明长整型变量或函数返回值类型</td></tr><tr><td style="text-align:center">case</td><td style="text-align:left">开关语句分支</td><td style="text-align:center">register</td><td style="text-align:left">声明寄存器变量</td></tr><tr><td style="text-align:center">char</td><td style="text-align:left">声明字符型变量或函数返回值类型</td><td style="text-align:center">return</td><td style="text-align:left">子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td style="text-align:center">const</td><td style="text-align:left">定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td><td style="text-align:center">short</td><td style="text-align:left">声明短整型变量或函数</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:left">结束当前循环，开始下一轮循环</td><td style="text-align:center">signed</td><td style="text-align:left">声明有符号类型变量或函数</td></tr><tr><td style="text-align:center">default</td><td style="text-align:left">开关语句中的&quot;其它&quot;分支</td><td style="text-align:center">sizeof</td><td style="text-align:left">计算数据类型或变量长度（即所占字节数）</td></tr><tr><td style="text-align:center">do</td><td style="text-align:left">循环语句的循环体</td><td style="text-align:center">static</td><td style="text-align:left">声明静态变量</td></tr><tr><td style="text-align:center">double</td><td style="text-align:left">声明双精度浮点型变量或函数返回值类型</td><td style="text-align:center">struct</td><td style="text-align:left">声明结构体类型</td></tr><tr><td style="text-align:center">else</td><td style="text-align:left">条件语句否定分支（与 if 连用）</td><td style="text-align:center">switch</td><td style="text-align:left">用于开关语句</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:left">声明枚举类型</td><td style="text-align:center">typedef</td><td style="text-align:left">用以给数据类型取别名</td></tr><tr><td style="text-align:center">extern</td><td style="text-align:left">声明变量或函数是在其它文件或本文件的其他位置定义</td><td style="text-align:center">unsigned</td><td style="text-align:left">声明无符号类型变量或函数</td></tr><tr><td style="text-align:center">float</td><td style="text-align:left">声明浮点型变量或函数返回值类型</td><td style="text-align:center">union</td><td style="text-align:left">声明共用体类型</td></tr><tr><td style="text-align:center">for</td><td style="text-align:left">一种循环语句</td><td style="text-align:center">void</td><td style="text-align:left">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td style="text-align:center">goto</td><td style="text-align:left">无条件跳转语句</td><td style="text-align:center">volatile</td><td style="text-align:left">说明变量在程序执行中可被隐含地改变</td></tr><tr><td style="text-align:center">if</td><td style="text-align:left">条件语句</td><td style="text-align:center">while</td><td style="text-align:left">循环语句的循环条件</td></tr></tbody></table><p>C99 新增关键字：</p><table><thead><tr><th>_Bool</th><th>_Complex</th><th>_Imaginary</th><th>inline</th><th>restrict</th></tr></thead><tbody></tbody></table><p>C11 新增关键字：</p><table><thead><tr><th>_Alignas</th><th>_Alignof</th><th>_Atomic</th><th>_Generic</th><th>_Noreturn</th></tr></thead><tbody><tr><td>_Static_assert</td><td>_Thread_local</td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-4-2-标识符"><a class="header-anchor" href="#2-4-2-标识符">¶</a>2.4.2 标识符</h3><p>标识符：标识符简单理解为一个名字</p><p>C 语言的标识符命名规则如下：</p><ul><li>由字母、下划线和数字组成，并且不能以数字开</li><li>不能使用关键字</li></ul><h2 id="2-5-基础数据类型"><a class="header-anchor" href="#2-5-基础数据类型">¶</a>2.5 基础数据类型</h2><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><p>C 中的类型可分为以下几种：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">基本数据类型</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">枚举类型</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">void 类型</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">派生类型</td></tr></tbody></table><h3 id="2-5-1-整型"><a class="header-anchor" href="#2-5-1-整型">¶</a>2.5.1 整型</h3><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left">unsigned char</td><td style="text-align:left">1 字节</td><td style="text-align:left">0 到 255</td></tr><tr><td style="text-align:left">signed char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">2 字节</td><td style="text-align:left">-32,768 到 32,767</td></tr><tr><td style="text-align:left">unsigned short</td><td style="text-align:left">2 字节</td><td style="text-align:left">0 到 65,535</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">4 字节</td><td style="text-align:left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned long</td><td style="text-align:left">4 字节</td><td style="text-align:left">0 到 4,294,967,295</td></tr></tbody></table><blockquote><p>注意：各种类型的存储大小与系统位数有关，但目前通用的以 64 位系统为主。</p></blockquote><p>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-浮点型"><a class="header-anchor" href="#2-5-2-浮点型">¶</a>2.5.2 浮点型</h3><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th><th>精度</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:left">4 字节</td><td style="text-align:left">1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">8 字节</td><td style="text-align:left">2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">16 字节</td><td style="text-align:left">3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h3 id="2-5-3-类型转换"><a class="header-anchor" href="#2-5-3-类型转换">¶</a>2.5.3 类型转换</h3><p>类型转换是将一个数据类型的值转换为另一种数据类型的值。C 语言中有两种类型转换：</p><ul><li><p>**隐式类型转换：**隐式类型转换是在表达式中自动发生的，无需进行任何明确的指令或函数调用。它通常是将一种较小的类型自动转换为较大的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> d = i + f; <span class="comment">// 隐式将int类型转换为double类型</span></span><br></pre></td></tr></table></figure></li><li><p>**显式类型转换：**显式类型转换需要使用强制类型转换运算符（type casting operator），它可以将一个数据类型的值强制转换为另一种数据类型的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">int</span> i = (<span class="type">int</span>)d; <span class="comment">// 显式将double类型转换为int类型</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-6-运算符"><a class="header-anchor" href="#2-6-运算符">¶</a>2.6 运算符</h2><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。</p><h3 id="2-6-1-算术运算符"><a class="header-anchor" href="#2-6-1-算术运算符">¶</a>2.6.1 算术运算符</h3><p>下表显示了 C 语言支持的所有算术运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">把两个操作数相加</td><td style="text-align:left">A + B 将得到 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">从第一个操作数中减去第二个操作数</td><td style="text-align:left">A - B 将得到 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">把两个操作数相乘</td><td style="text-align:left">A * B 将得到 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">分子除以分母</td><td style="text-align:left">B / A 将得到 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模运算符，整除后的余数</td><td style="text-align:left">B % A 将得到 0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增运算符，整数值增加 1</td><td style="text-align:left">A++ 将得到 11</td></tr><tr><td style="text-align:left">–</td><td style="text-align:left">自减运算符，整数值减少 1</td><td style="text-align:left">A-- 将得到 9</td></tr></tbody></table><h3 id="2-6-2-关系运算符"><a class="header-anchor" href="#2-6-2-关系运算符">¶</a>2.6.2 关系运算符</h3><p>下表显示了 C 语言支持的所有关系运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">(A == B) 为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt; B) 为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt; B) 为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt;= B) 为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt;= B) 为真。</td></tr></tbody></table><h3 id="2-6-3-逻辑运算符"><a class="header-anchor" href="#2-6-3-逻辑运算符">¶</a>2.6.3 逻辑运算符</h3><p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量 <strong>A</strong> 的值为 1，变量 <strong>B</strong> 的值为 0，则：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:left">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:center">|</td><td style="text-align:left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td style="text-align:left">(A|B) 为真。</td></tr><tr><td style="text-align:center">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table><h3 id="2-6-4-位运算符"><a class="header-anchor" href="#2-6-4-位运算符">¶</a>2.6.4 位运算符</h3><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th style="text-align:left">p</th><th style="text-align:left">q</th><th style="text-align:left">p &amp; q</th><th style="text-align:left">p|q</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr></tbody></table><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:left">按位与操作，按二进制位进行&quot;与&quot;运算。</td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span></td><td style="text-align:left">按位或运算符，按二进制位进行&quot;或&quot;运算。</td><td style="text-align:left">(A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span>B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">异或运算符，按二进制位进行&quot;异或&quot;运算。</td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:center">~</td><td style="text-align:left">取反运算符，按二进制位进行&quot;取反&quot;运算。</td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><h3 id="1-6-5-赋值运算符"><a class="header-anchor" href="#1-6-5-赋值运算符">¶</a>1.6.5 赋值运算符</h3><p>下表列出了 C 语言支持的赋值运算符：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C _= A 相当于 C = C _ A</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:left">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:left">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:left">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:left">|=</td><td style="text-align:left">按位或且赋值运算符</td><td style="text-align:left">C |= 2 等同于 C = C <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span> 2</td></tr></tbody></table><h3 id="1-6-6-杂项运算符"><a class="header-anchor" href="#1-6-6-杂项运算符">¶</a>1.6.6 杂项运算符</h3><p>下表列出了 C 语言支持的其他一些重要的运算符，包括 <strong>sizeof</strong> 和 <strong>? :</strong>。</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">sizeof()</td><td style="text-align:left">返回变量的大小。</td><td style="text-align:left">sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&amp;a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">指向一个变量。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:center">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table><h3 id="1-6-7-运算优先级"><a class="header-anchor" href="#1-6-7-运算优先级">¶</a>1.6.7 运算优先级</h3><p>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p><table><thead><tr><th style="text-align:left">类别</th><th style="text-align:left">运算符</th><th style="text-align:left">结合性</th></tr></thead><tbody><tr><td style="text-align:left">后缀</td><td style="text-align:left">() [] -&gt; . ++ - -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">一元</td><td style="text-align:left">+ - ! ~ ++ - - (type) * &amp; sizeof</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">乘除</td><td style="text-align:left">* / %</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">加减</td><td style="text-align:left">+ -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">移位</td><td style="text-align:left">&lt;&lt; &gt;&gt;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">关系</td><td style="text-align:left">&lt; &lt;= &gt; &gt;=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">相等</td><td style="text-align:left">== !=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位与 AND</td><td style="text-align:left">&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位异或 XOR</td><td style="text-align:left">^</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位或 OR</td><td style="text-align:left">|</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑与 AND</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑或 OR</td><td style="text-align:left">||</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">条件</td><td style="text-align:left">?:</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">赋值</td><td style="text-align:left">= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">逗号</td><td style="text-align:left">,</td><td style="text-align:left">从左到右</td></tr></tbody></table><h2 id="1-7-变量与常量"><a class="header-anchor" href="#1-7-变量与常量">¶</a>1.7 变量与常量</h2><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><p>变量的名称可以由字母、数字和下划线字符组成。</p><h3 id="1-7-1-变量定义"><a class="header-anchor" href="#1-7-1-变量定义">¶</a>1.7.1 变量定义</h3><p>变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type variable_list;</span><br></pre></td></tr></table></figure><h3 id="1-7-2-变量声明"><a class="header-anchor" href="#1-7-2-变量声明">¶</a>1.7.2 变量声明</h3><p>变量的声明有两种情况：</p><ol><li>需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</li><li>不需要建立存储空间的，通过使用 extern 关键字声明变量名而不定义它。</li><li>除非有 extern 关键字，否则都是变量的定义。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extern int i; //声明，不是定义</span><br><span class="line">int i; //声明，也是定义</span><br></pre></td></tr></table></figure><h3 id="1-7-3-常量"><a class="header-anchor" href="#1-7-3-常量">¶</a>1.7.3 常量</h3><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用 <strong>#define</strong> 预处理器。</li><li>使用 <strong>const</strong> 关键字。</li></ol><p>下面是使用 #define 预处理器定义常量的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define identifier value</span><br></pre></td></tr></table></figure><p>您可以使用 <strong>const</strong> 前缀声明指定类型的常量，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const type variable = value;</span><br></pre></td></tr></table></figure><h2 id="1-8-输入和输出"><a class="header-anchor" href="#1-8-输入和输出">¶</a>1.8 输入和输出</h2><p>当我们提到<strong>输入</strong>时，这意味着要向程序填充一些数据。输入可以是以文件的形式或从命令行中进行。</p><p>当我们提到<strong>输出</strong>时，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。</p><h3 id="1-8-1-scanf-和-printf-函数"><a class="header-anchor" href="#1-8-1-scanf-和-printf-函数">¶</a>1.8.1 scanf() 和 printf() 函数</h3><p><code>int scanf(const char \*format, ...) </code>函数从标准输入流 <code>stdin</code> 读取输入，并根据提供的 <code>format</code> 来浏览输入。</p><p><code>int printf(const char \*format, ...)</code> 函数把输出写入到标准输出流 <code>stdout</code> ，并根据提供的格式产生输出。</p><p><code>format</code> 可以是一个简单的常量字符串，但是您可以分别指定 <code>%s、%d、%c、%f </code>等来输出或读取字符串、整数、字符或浮点数。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, str, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nYou entered: %s %d &quot;</span>, str, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-getchar-和-putchar-函数"><a class="header-anchor" href="#1-8-2-getchar-和-putchar-函数">¶</a>1.8.2 getchar() 和 putchar() 函数</h3><p><strong><code>int getchar(void)</code></strong> 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。您可以在循环内使用这个方法，以便从屏幕上读取多个字符。</p><p><strong><code>int putchar(int c)</code></strong> 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。您可以在循环内使用这个方法，以便在屏幕上输出多个字符。</p><h3 id="1-8-3-gets-和-puts-函数"><a class="header-anchor" href="#1-8-3-gets-和-puts-函数">¶</a>1.8.3 gets() 和 puts() 函数</h3><p><strong><code>char \*gets(char \*s)</code></strong> 函数从 <strong><code>stdin</code></strong> 读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。</p><p><strong><code>int puts(const char \*s)</code></strong> 函数把字符串 s 和一个尾随的换行符写入到 <strong><code>stdout</code></strong>。</p><h1 id="第三章-流程控制语句"><a class="header-anchor" href="#第三章-流程控制语句">¶</a>第三章 流程控制语句</h1><h2 id="3-1-顺序结构"><a class="header-anchor" href="#3-1-顺序结构">¶</a>3.1 顺序结构</h2><h2 id="3-2-选择结构"><a class="header-anchor" href="#3-2-选择结构">¶</a>3.2 选择结构</h2><p>选择结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p><h3 id="3-2-1-if-语句"><a class="header-anchor" href="#3-2-1-if-语句">¶</a>3.2.1 if 语句</h3><p>单个 if 的语句，当表达式 1 为真时，执行代码块 1。基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    代码块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if…else 语句：当表达式 1 为真时，执行代码块 1；反之，执行代码块 2。基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    代码块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环之间可以相互嵌套</p></blockquote><h3 id="3-2-2-switch-语句"><a class="header-anchor" href="#3-2-2-switch-语句">¶</a>3.2.2 switch 语句</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(value)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>A<span class="number">&#x27;</span>:a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;B</span><span class="number">&#x27;</span>:a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入的值 value 为 A 时，“a = 0”代码，其余同理。</p><h3 id="3-2-3-三元运算符"><a class="header-anchor" href="#3-2-3-三元运算符">¶</a>3.2.3 三元运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&gt;b? max = a: max = b;<span class="comment">//如果a&gt;b为真，则执行max = a;反之，则执行max = b;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-循环结构"><a class="header-anchor" href="#3-3-循环结构">¶</a>3.3 循环结构</h2><h3 id="3-3-1-while-循环"><a class="header-anchor" href="#3-3-1-while-循环">¶</a>3.3.1 while 循环</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)</span><br><span class="line">&#123;</span><br><span class="line">    xxx;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-do-while-循环"><a class="header-anchor" href="#3-3-2-do-while-循环">¶</a>3.3.2 do-while 循环</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure><p>与 while 的区别是，该循环是：先执行，后判断；而 while 是：先判断，后执行。</p><h3 id="3-3-3-for-循环"><a class="header-anchor" href="#3-3-3-for-循环">¶</a>3.3.3 for 循环</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-循环控制语句"><a class="header-anchor" href="#3-3-4-循环控制语句">¶</a>3.3.4 循环控制语句</h3><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td style="text-align:left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td style="text-align:left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td style="text-align:left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table><h1 id="第四章-复杂数据类型"><a class="header-anchor" href="#第四章-复杂数据类型">¶</a>第四章 复杂数据类型</h1><h2 id="4-1-数组"><a class="header-anchor" href="#4-1-数组">¶</a>4.1 数组</h2><p>C 语言支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p><p>数组中的元素的地址是连续的。</p><h3 id="4-1-1-声明数组"><a class="header-anchor" href="#4-1-1-声明数组">¶</a>4.1.1 声明数组</h3><p>在 C 中要声明一个数组，需要指定元素的类型和元素的数量。基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型名 变量名[常量表达式]</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>定义数组时，需指明数组长度</li><li>中括号 [ ] 里为常量，不能为变量</li></ul><h3 id="4-1-2-初始化数组"><a class="header-anchor" href="#4-1-2-初始化数组">¶</a>4.1.2 初始化数组</h3><p>在声明时进行初始化。基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部赋值</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以部分赋值，未赋值的默认为0</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>还可以对数组中的单个元素进行赋值。例如;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">num[<span class="number">6</span>] = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-访问数组元素"><a class="header-anchor" href="#4-1-3-访问数组元素">¶</a>4.1.3 访问数组元素</h3><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组名[下标]</span></span><br><span class="line"><span class="comment">//下标的范围0-max</span></span><br><span class="line">num[<span class="number">0</span>];</span><br><span class="line">num[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="4-1-4-二维数组"><a class="header-anchor" href="#4-1-4-二维数组">¶</a>4.1.4 二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型名 变量名[常量表达式][常量表达式]</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名[下标][下标]</span></span><br><span class="line"><span class="comment">//下标的范围0-max</span></span><br><span class="line">num[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">num[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> number[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">    &#123;<span class="number">12</span>,<span class="number">32</span>,<span class="number">23</span>,<span class="number">321</span>&#125;</span><br><span class="line">    &#123;<span class="number">23</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">32</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> number[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">321</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">3</span>,<span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-字符数组-字符串"><a class="header-anchor" href="#4-2-字符数组-字符串">¶</a>4.2 字符数组-字符串</h2><p>在 C 语言中，<strong>字符串</strong>实际上是使用空字符 <strong>\0</strong> 结尾的一维字符数组。因此，<strong>\0</strong> 是用于标记字符串的结束。</p><p><img src="https://raw.githubusercontent.com/YuiLexi/Imageshack/main/E-books/Programming/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E6%A8%A1%E5%9E%8B.png" alt="C/C++ 中的字符串表示"></p><h3 id="4-2-1-字符数组的声明和初始化"><a class="header-anchor" href="#4-2-1-字符数组的声明和初始化">¶</a>4.2.1 字符数组的声明和初始化</h3><p>语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;!&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-字符数组的输出"><a class="header-anchor" href="#4-2-2-字符数组的输出">¶</a>4.2.2 字符数组的输出</h3><p>使用 printf() 函数，对字符数组进行输出。语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c[] = &#123;<span class="string">&quot;China&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,c);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>输出的字符中不包含结束符’\0’</li><li>如果数组长度大于字符串的实际长度，也只输出遇到’\0’</li><li>如果一个字符数组中包含一个以上的’\0’，则遇到第一个时输出就结束</li><li>可以用<strong>scanf_s</strong>输入一个字符串</li></ul><h3 id="4-2-2-操作字符数组"><a class="header-anchor" href="#4-2-2-操作字符数组">¶</a>4.2.2 操作字符数组</h3><p>C 中有大量操作字符串的函数：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数 &amp; 目的</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table><h2 id="4-3-结构体"><a class="header-anchor" href="#4-3-结构体">¶</a>4.3 结构体</h2><p><strong>结构</strong>是 C 编程中一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。结构体中的数据成员可以是基本数据类型（如 int、float、char 等），也可以是其他结构体类型、指针类型等。</p><h3 id="4-3-1-结构体的定义"><a class="header-anchor" href="#4-3-1-结构体的定义">¶</a>4.3.1 结构体的定义</h3><p>结构体定义由关键字 struct 和结构体名组成，结构体名可以根据需要自行定义。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span></span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    member-<span class="built_in">list</span></span><br><span class="line">    ...</span><br><span class="line">&#125; variable-<span class="built_in">list</span> ;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Struct 结构体名</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">结构体成员列表;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-结构体变量初始化"><a class="header-anchor" href="#4-3-2-结构体变量初始化">¶</a>4.3.2 结构体变量初始化</h3><p>和其它类型变量一样，对结构体变量可以在定义时指定初始值。例如，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;</span><br><span class="line">&#125; book = &#123;<span class="string">&quot;C 语言&quot;</span>, <span class="string">&quot;RUNOOB&quot;</span>, <span class="string">&quot;编程语言&quot;</span>, <span class="number">123456</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;</span>, book.title, book.author, book.subject, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-访问结构体成员"><a class="header-anchor" href="#4-3-3-访问结构体成员">¶</a>4.3.3 访问结构体成员</h3><p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。您可以使用 <strong>struct</strong> 关键字来定义结构类型的变量。下面的实例演示了结构的用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">char</span> str[];</span><br><span class="line">&#125;Tom = &#123;<span class="number">9</span>,<span class="number">10.56</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line"><span class="keyword">struct</span> Student *pt;</span><br><span class="line">pt = &amp;Tom</span><br><span class="line"><span class="comment">//方法一：结构体变量名.结构体成员</span></span><br><span class="line">Tom.str;</span><br><span class="line"><span class="comment">//方法二：（*结构体指针变量).结构体成员</span></span><br><span class="line">(*pt).str;</span><br><span class="line"><span class="comment">//方法三：结构体指针变量-&gt;结构体成员</span></span><br><span class="line">pt-&gt;str</span><br></pre></td></tr></table></figure><h3 id="4-3-4-结构作为函数参数"><a class="header-anchor" href="#4-3-4-结构作为函数参数">¶</a>4.3.4 结构作为函数参数</h3><p>您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构变量：</p><h2 id="4-4-共用体"><a class="header-anchor" href="#4-4-共用体">¶</a>4.4 共用体</h2><p><strong>共用体</strong>是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。</p><h3 id="4-4-1-定义共用体"><a class="header-anchor" href="#4-4-1-定义共用体">¶</a>4.4.1 定义共用体</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">tag</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125; [one or more <span class="class"><span class="keyword">union</span> <span class="title">variables</span>];</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-访问共用体成员"><a class="header-anchor" href="#4-4-2-访问共用体成员">¶</a>4.4.2 访问共用体成员</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name.element</span><br></pre></td></tr></table></figure><h3 id="4-4-3-共用体类型的特点"><a class="header-anchor" href="#4-4-3-共用体类型的特点">¶</a>4.4.3 共用体类型的特点</h3><ol><li>同一段内存能存放不不同类型成员，但是在每一瞬间只能存放某一种类型成员</li><li>可以进行初始化，但是初始化表中只能有一个常量</li><li>共用体变量起作用的成员是最后一次被赋值的成员，每一次赋值后，原有变量存储单元中的值就被取代</li><li>共用体变量的地址和它各成员的地址都是同一地址</li><li>不能对共用体变量名赋值也不能引用变量名来获取一个值</li><li>C99 允许共用体变量作为函数参数</li></ol><h2 id="4-5-枚举"><a class="header-anchor" href="#4-5-枚举">¶</a>4.5 枚举</h2><h1 id="第五章-函数"><a class="header-anchor" href="#第五章-函数">¶</a>第五章 函数</h1><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p><p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><h2 id="5-1-函数的使用"><a class="header-anchor" href="#5-1-函数的使用">¶</a>5.1 函数的使用</h2><h3 id="5-1-1-定义函数"><a class="header-anchor" href="#5-1-1-定义函数">¶</a>5.1.1 定义函数</h3><p>C 语言中的函数定义的一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型名 函数名(参数)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">函数体</span></span><br><span class="line"><span class="comment">返回值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>**返回类型：**一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li><li>**函数名称：**这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li><li>**参数：**参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li><li>**函数主体：**函数主体包含一组定义函数执行任务的语句。</li></ul><h3 id="5-1-2-函数声明"><a class="header-anchor" href="#5-1-2-函数声明">¶</a>5.1.2 函数声明</h3><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数声明包括以下几个部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span>;</span><br></pre></td></tr></table></figure><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>;</span><br></pre></td></tr></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br></pre></td></tr></table></figure><p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><h3 id="5-1-3-调用函数"><a class="header-anchor" href="#5-1-3-调用函数">¶</a>5.1.3 调用函数</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数列表);</span><br></pre></td></tr></table></figure><h2 id="5-2-参数传递"><a class="header-anchor" href="#5-2-参数传递">¶</a>5.2 参数传递</h2><ul><li>形式参数：定义函数时括号里面的参数</li><li>实际参数：调用函数时括号里面的参数</li></ul><h3 id="5-2-1-传值调用"><a class="header-anchor" href="#5-2-1-传值调用">¶</a>5.2.1 传值调用</h3><p>该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</p><p>默认情况下，C 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。</p><h3 id="5-2-2-引用调用"><a class="header-anchor" href="#5-2-2-引用调用">¶</a>5.2.2 引用调用</h3><p>通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</p><h2 id="5-3-函数的递归"><a class="header-anchor" href="#5-3-函数的递归">¶</a>5.3 函数的递归</h2><p>在调用函数的过程中又出现<strong>直接或间接调用该函数本身</strong>，称为<font color='red'>函数的递归</font>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">name</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> y,z;</span><br><span class="line">    z = name(y);</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，打印任意乘法表。具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> <span class="title function_">chengfabiao</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要打印的乘法表的阶数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">chengfabiao(number);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">chengfabiao</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">chengfabiao(n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d X %d = %d ,  &quot;</span>, n, i, n * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章-指针"><a class="header-anchor" href="#第六章-指针">¶</a>第六章 指针</h1><p>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用 <strong>&amp;</strong> 运算符访问的地址，它表示了在内存中的一个地址。</p><p><strong>指针也就是内存地址，指针变量是用来存放内存地址的变量</strong>。</p><h2 id="6-1-指针变量"><a class="header-anchor" href="#6-1-指针变量">¶</a>6.1 指针变量</h2><h3 id="6-1-1-指针变量的定义"><a class="header-anchor" href="#6-1-1-指针变量的定义">¶</a>6.1.1 指针变量的定义</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type *var_name;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-指针的使用"><a class="header-anchor" href="#6-1-2-指针的使用">¶</a>6.1.2 指针的使用</h3><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 <strong>*</strong> 来返回位于操作数所指定地址的变量的值。例如，下面代码;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//定义整型变量 a</span></span><br><span class="line"><span class="type">int</span>* ap;<span class="comment">//定义整型指针变量 ap</span></span><br><span class="line">ap = &amp;a;<span class="comment">//让指针 ap 指向 a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址是：%d\n&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址是：%d\n&quot;</span>, ap);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的值是：%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的值是：%d\n&quot;</span>, *ap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-null-指针"><a class="header-anchor" href="#6-2-null-指针">¶</a>6.2 NULL 指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>NULL 指针是一个定义在标准库中的值为零的常量。在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。</p><h2 id="6-3-指针详解"><a class="header-anchor" href="#6-3-指针详解">¶</a>6.3 指针详解</h2><h3 id="6-3-1-指针的算数运算"><a class="header-anchor" href="#6-3-1-指针的算数运算">¶</a>6.3.1 指针的算数运算</h3><p>指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、–、+、- 。</p><p>假设 <strong>ptr</strong> 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptr++;</span><br></pre></td></tr></table></figure><p>在执行完上述的运算之后，<strong>ptr</strong> 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即当前位置往后移 4 字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。如果 <strong>ptr</strong> 指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。</p><p>我们概括一下：</p><ul><li>指针的每一次递增，它其实会指向下一个元素的存储单元。</li><li>指针的每一次递减，它都会指向前一个元素的存储单元。</li><li>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</li></ul><h3 id="6-3-2-指针数组"><a class="header-anchor" href="#6-3-2-指针数组">¶</a>6.3.2 指针数组</h3><h3 id="6-3-3-多重指针"><a class="header-anchor" href="#6-3-3-多重指针">¶</a>6.3.3 多重指针</h3><h2 id="6-4-通过指针引用数组"><a class="header-anchor" href="#6-4-通过指针引用数组">¶</a>6.4 通过指针引用数组</h2><h3 id="6-4-1-数组元素的指针"><a class="header-anchor" href="#6-4-1-数组元素的指针">¶</a>6.4.1 数组元素的指针</h3><p><strong>所谓数组元素的指针就是数组元素的地址</strong>。</p><p>引用数组元素可以用下标法，也可用指针法。使用指针法能使目标程序质量高（占内存少，运算快）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = &amp;a[<span class="number">0</span>];</span><br><span class="line">p = a;</span><br></pre></td></tr></table></figure><p>注意：数组名不代表整个数组，只代表数组首元素的我地址。</p><h3 id="6-4-2-在引用数组元素时的指针运算"><a class="header-anchor" href="#6-4-2-在引用数组元素时的指针运算">¶</a>6.4.2 在引用数组元素时的指针运算</h3><p>在指针以指向一个数组元素时，可以对指针进行一下运算：</p><ul><li>p + 1;</li><li>p - 1;</li><li>p++,++p;</li><li>p–,--p;</li></ul><h3 id="6-4-3-指针引用数组元素"><a class="header-anchor" href="#6-4-3-指针引用数组元素">¶</a>6.4.3 指针引用数组元素</h3><ol><li><p>下标法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">b = a[<span class="number">4</span>];<span class="comment">//b == 5</span></span><br></pre></td></tr></table></figure></li><li><p>指针法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">p = &amp;a[<span class="number">0</span>];<span class="comment">//或者 p=a; 将数组a的初地址赋给p指针</span></span><br><span class="line">b = *(p+<span class="number">4</span>);<span class="comment">//b==5</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="第七章-动态内存和链表"><a class="header-anchor" href="#第七章-动态内存和链表">¶</a>第七章 动态内存和链表</h1><h2 id="7-1-建立动态内存的方式"><a class="header-anchor" href="#7-1-建立动态内存的方式">¶</a>7.1 建立动态内存的方式</h2><h3 id="7-1-1-开辟动态存储区-malloc-函数"><a class="header-anchor" href="#7-1-1-开辟动态存储区-malloc-函数">¶</a>7.1.1 开辟动态存储区 malloc() 函数</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br></pre></td></tr></table></figure><ul><li>在内存的动态存储区中分配一个长度为 size 的连续空间。</li><li>函数返回值为内存第一个字节的地址</li><li>未能成功执行（例如：内存空间不足），则返回 NULL</li></ul><h3 id="7-1-2-开辟动态存储区-calloc-函数"><a class="header-anchor" href="#7-1-2-开辟动态存储区-calloc-函数">¶</a>7.1.2 开辟动态存储区 calloc() 函数</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">calloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n,<span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br></pre></td></tr></table></figure><ul><li>在内存的动态存储区中分配 n 个长度为 size 的连续空间。</li><li>函数返回值为内存第一个字节的地址</li><li>未能成功执行（例如：内存空间不足），则返回 NULL</li></ul><h3 id="7-1-3-重新分配动态存储区-realloc-函数"><a class="header-anchor" href="#7-1-3-重新分配动态存储区-realloc-函数">¶</a>7.1.3 重新分配动态存储区 realloc() 函数</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *p,<span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br></pre></td></tr></table></figure><ul><li>能够重新分配 malloc 或 calloc 函数开辟的动态空间</li><li>realloch 函数将 p 所指向的动态空间的大小改变为 size 。</li><li>p 的值不变</li><li>未能成功执行，则返回 NULL</li></ul><h3 id="7-1-4-释放动态存储区-free-函数"><a class="header-anchor" href="#7-1-4-释放动态存储区-free-函数">¶</a>7.1.4 释放动态存储区 free() 函数</h3><p>基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="built_in">free</span>（<span class="type">void</span> *p;</span><br></pre></td></tr></table></figure><h2 id="7-2-链表"><a class="header-anchor" href="#7-2-链表">¶</a>7.2 链表</h2><h3 id="7-2-1-静态链表"><a class="header-anchor" href="#7-2-1-静态链表">¶</a>7.2.1 静态链表</h3><p>建立简单的静态链表。具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxSize 6</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">&#125;component;</span><br><span class="line"><span class="comment">//将结构体数组中所有分量链接到备用链表中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reserveArr</span><span class="params">(component *<span class="built_in">array</span>)</span>;</span><br><span class="line"><span class="comment">//初始化静态链表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">initArr</span><span class="params">(component *<span class="built_in">array</span>)</span>;</span><br><span class="line"><span class="comment">//输出函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayArr</span><span class="params">(component * <span class="built_in">array</span>, <span class="type">int</span> body)</span>;</span><br><span class="line"><span class="comment">//从备用链表上摘下空闲节点的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mallocArr</span><span class="params">(component * <span class="built_in">array</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    component <span class="built_in">array</span>[maxSize];</span><br><span class="line">    <span class="type">int</span> body = initArr(<span class="built_in">array</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;静态链表为：\n&quot;</span>);</span><br><span class="line">    displayArr(<span class="built_in">array</span>, body);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建备用链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reserveArr</span><span class="params">(component *<span class="built_in">array</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i].cur = i + <span class="number">1</span>;<span class="comment">//将每个数组分量链接到一起</span></span><br><span class="line">        <span class="built_in">array</span>[i].data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>[maxSize - <span class="number">1</span>].cur = <span class="number">0</span>;<span class="comment">//链表最后一个结点的游标值为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提取分配空间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mallocArr</span><span class="params">(component * <span class="built_in">array</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//若备用链表非空，则返回分配的结点下标，否则返回 0（当分配最后一个结点时，该结点的游标值为 0）</span></span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">array</span>[<span class="number">0</span>].cur;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>[<span class="number">0</span>].cur) &#123;</span><br><span class="line">        <span class="built_in">array</span>[<span class="number">0</span>].cur = <span class="built_in">array</span>[i].cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化静态链表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">initArr</span><span class="params">(component *<span class="built_in">array</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> tempBody = <span class="number">0</span>, body = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    reserveArr(<span class="built_in">array</span>);</span><br><span class="line">    body = mallocArr(<span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">//建立首元结点</span></span><br><span class="line">    <span class="built_in">array</span>[body].data = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">array</span>[body].cur = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//声明一个变量，把它当指针使，指向链表的最后的一个结点，当前和首元结点重合</span></span><br><span class="line">    tempBody = body;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = mallocArr(<span class="built_in">array</span>); <span class="comment">//从备用链表中拿出空闲的分量</span></span><br><span class="line">        <span class="built_in">array</span>[j].data = i;      <span class="comment">//初始化新得到的空间结点</span></span><br><span class="line">        <span class="built_in">array</span>[tempBody].cur = j; <span class="comment">//将新得到的结点链接到数据链表的尾部</span></span><br><span class="line">        tempBody = j;             <span class="comment">//将指向链表最后一个结点的指针后移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>[tempBody].cur = <span class="number">0</span>;<span class="comment">//新的链表最后一个结点的指针设置为0</span></span><br><span class="line">    <span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">displayArr</span><span class="params">(component * <span class="built_in">array</span>, <span class="type">int</span> body)</span> &#123;</span><br><span class="line">    <span class="type">int</span> tempBody = body;<span class="comment">//tempBody准备做遍历使用</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">array</span>[tempBody].cur) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, <span class="built_in">array</span>[tempBody].data, <span class="built_in">array</span>[tempBody].cur);</span><br><span class="line">        tempBody = <span class="built_in">array</span>[tempBody].cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, <span class="built_in">array</span>[tempBody].data, <span class="built_in">array</span>[tempBody].cur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-动态链表"><a class="header-anchor" href="#7-2-2-动态链表">¶</a>7.2.2 动态链表</h3><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span>* <span class="title">Bp</span>;</span></span><br><span class="line">&#125;Books;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Books* <span class="title function_">init</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(Books * fbp)</span>;</span><br><span class="line">Books* p;</span><br><span class="line">p = init(<span class="number">10</span>);</span><br><span class="line">print(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 生成对应结点数链表</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;n&quot;&gt;链表的结点数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;返回表头指针&lt;/returns&gt;</span></span><br><span class="line">Books* <span class="title function_">init</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">Books* fBp = <span class="literal">NULL</span>;</span><br><span class="line">Books* tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">fBp = (Books*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Books));</span><br><span class="line"></span><br><span class="line">tmp = fBp;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; n; a++)</span><br><span class="line">&#123;</span><br><span class="line">(*tmp).id = a;</span><br><span class="line">(*tmp).Bp = (Books*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Books));</span><br><span class="line">tmp = (*tmp).Bp;</span><br><span class="line">(*tmp).Bp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fBp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 将链表的内容输出出来（正序和倒序）</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;fbp&quot;&gt;指向表头的指针&lt;/param&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(Books* fbp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*fbp).Bp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*fbp).id);</span><br><span class="line">print((*fbp).Bp);</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, (*fbp).id);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第八章-对文件的输入输出"><a class="header-anchor" href="#第八章-对文件的输入输出">¶</a>第八章 对文件的输入输出</h1><h2 id="8-1-c-文件的有关知识"><a class="header-anchor" href="#8-1-c-文件的有关知识">¶</a>8.1 C 文件的有关知识</h2><h3 id="8-1-1-什么是文件"><a class="header-anchor" href="#8-1-1-什么是文件">¶</a>8.1.1 什么是文件</h3><p>程序文件</p><p>数据文件</p><h3 id="8-1-2-文件类型指针"><a class="header-anchor" href="#8-1-2-文件类型指针">¶</a>8.1.2 文件类型指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE f1;</span><br><span class="line">FILE * f1;</span><br></pre></td></tr></table></figure><h2 id="8-2-打开与关闭文件"><a class="header-anchor" href="#8-2-打开与关闭文件">¶</a>8.2 打开与关闭文件</h2><table><thead><tr><th style="text-align:center">mode</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">以只读方式打开文件，该文件必须存在</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">以可读写方式打开文件，该文件必须存在</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">读写打开一个二进制文件，允许读数据</td></tr><tr><td style="text-align:center">rw+</td><td style="text-align:center">读写打开一个文本文件，允许读和写</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开只写文件，若文件存在则文件长度清为 0，即该文件内容会消失。若文件不存在则建立该文件</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留（EOF 符保留）</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留（原来的 EOF 符不保留）</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">只写打开或新建一个二进制文件；只允许写数据</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">读写打开或建立一个二进制文件，允许读和写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">读写打开一个二进制文件，允许读或在文件末追加数据</td></tr></tbody></table><h3 id="8-2-1-用-fopen-函数打开数据文件"><a class="header-anchor" href="#8-2-1-用-fopen-函数打开数据文件">¶</a>8.2.1 用 fopen 函数打开数据文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fopen(<span class="string">&quot;文件名&quot;</span>,<span class="string">&quot;操作文件方式&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="8-2-2-用-fclose-函数关闭数据文件"><a class="header-anchor" href="#8-2-2-用-fclose-函数关闭数据文件">¶</a>8.2.2 用 fclose 函数关闭数据文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(文件指针);</span><br></pre></td></tr></table></figure><h2 id="8-3-顺序读写数据文件"><a class="header-anchor" href="#8-3-顺序读写数据文件">¶</a>8.3 顺序读写数据文件</h2><h3 id="8-3-1-向文件读写字符"><a class="header-anchor" href="#8-3-1-向文件读写字符">¶</a>8.3.1 向文件读写字符</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">调用形式</th><th style="text-align:center">功能</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">getc()</td><td style="text-align:center">getc(fp)</td><td style="text-align:center">从 fp 所指向的输入文件中读取一个字符</td><td style="text-align:center">返回值是读取的字符，如果发生错误则返回<strong>EOF = -1</strong></td></tr><tr><td style="text-align:center">fputc()</td><td style="text-align:center">fputc(ch,fp)</td><td style="text-align:center">字符 ch 写入到 fp 所指向的输出流中</td><td style="text-align:center">如果写入成功，它会返回写入的字符，如果发生错误，则会返回 <strong>EOF = -1</strong></td></tr></tbody></table><h3 id="8-3-2-向文件读写字符串"><a class="header-anchor" href="#8-3-2-向文件读写字符串">¶</a>8.3.2 向文件读写字符串</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">调用形式</th><th style="text-align:center">功能</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">gets()</td><td style="text-align:center">gets(str,n,fp)</td><td style="text-align:center">从 fp 所指向的输入流中读取 n - 1 个字符</td><td style="text-align:center">返回值是地址 str，如果发生错误则返回<strong>NULL</strong></td></tr><tr><td style="text-align:center">fputs()</td><td style="text-align:center">fputs(str,fp)</td><td style="text-align:center">字符串 <strong>s</strong> 写入到 fp 所指向的输出流中</td><td style="text-align:center">如果写入成功，它会返回 0，如果发生错误，则会返回 <strong>非 0 值</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言基础 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础语法</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/01.Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/03.CSharp/01.Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h1><blockquote><p>此文章是 C#基础语法部分，涵盖了注释、变量类型、基础数据类型、运算符、流程控制语句、复杂数据类型、方法、面向对象程序设计等内容。</p><p>C#系列教程：</p><ol><li><a href="https://blog.yuilexi.cn/2023/04/26/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">C#基础语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a>⬅️ 当前的位置 °꒰๑’ꀾ’๑꒱°</li><li><a href="https://blog.yuilexi.cn/2023/04/30/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/">C#高级语法 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></li><li><a href="https://blog.yuilexi.cn/2023/05/19/%E7%BC%96%E7%A8%8B/Csharp%E7%9F%A5%E8%AF%86%E5%BA%93/Csharp%E5%9F%BA%E7%A1%80/Csharp%E8%A7%84%E8%8C%83/">C#代码规范 | 🪐 星空鸟 🪐 (yuilexi.cn)</a></li></ol></blockquote><h1 id="一-认识-c"><a class="header-anchor" href="#一-认识-c">¶</a>一、认识 C#</h1><h2 id="1-1-什么是-net？"><a class="header-anchor" href="#1-1-什么是-net？">¶</a>1.1 什么是 .NET？</h2><p>.NET 是由 Microsoft 创建的开源开发人员平台，用于生成许多不同类型的应用程序。使用 .NET，可以使用多种语言、编辑器和库来构建 Web、移动、桌面、游戏和 IoT 等。<a href="https://learn.microsoft.com/zh-cn/dotnet/">.NET 文档 | Microsoft Learn</a>。</p><ul><li><p>编程语言</p><p>可以使用 C#、F# 或 Visual Basic 编写 .NET 应用。<a href="https://dotnet.microsoft.com/zh-cn/languages">了解.NET 编程语言</a>。</p><ul><li><p>C# 是一种简单、现代、面向对象和类型安全的编程语言。</p></li><li><p>F# 是一种编程语言，利用它可轻松编写简洁、可靠且性能出色的代码。</p></li><li><p>Visual Basic 是一种易于使用的语言，简单语法便于生成类型安全、面向对象的应用。</p></li></ul></li><li><p>跨平台</p><p>无论是使用 C#、F# 还是 Visual Basic，代码都会在任何兼容的操作系统上本机运行。可以使用 .NET 生成多种类型的应用。有些是跨平台的，有些则针对特定的一组操作系统和设备。</p></li><li><p>一致的 API</p><p>.NET 提供一组标准的基类库和 API，这些库和 API 对所有 .NET 应用程序都是通用的。每个应用模型还可以公开特定于其运行的操作系统或它提供的功能的其他 API。例如，<a href="http://ASP.NET">ASP.NET</a> 是跨平台 Web 框架，它提供用于生成在 Linux 或 Windows 上运行的 Web 应用的其他 API。</p></li><li><p>库</p><p>为了扩展功能，Microsoft 和其他公司维护着一个正常的 .NET 软件包生态系统。<a href="https://nuget.org/">NuGet</a>是专为包含了 100,000 多个包的 .NET 构建的包管理器。</p></li><li><p>应用程序模型</p><p>可以使用 .NET 生成多种类型的应用。为了帮助你更快地生成应用，应用模型基于基础库构建。</p></li></ul><table><thead><tr><th style="text-align:center">Web</th><th>为 Windows、Linux、macOS、Docker 构建 Web 应用和服务。</th></tr></thead><tbody><tr><td style="text-align:center">手机</td><td>使用单一代码库生成适用于 iOS、Android 和 Windows 等的本机移动应用。</td></tr><tr><td style="text-align:center">桌面</td><td>创建适用于 Windows 和 macOS 的本机应用，或使用 Web 技术生成随时随地运行的应用。</td></tr><tr><td style="text-align:center">微服务</td><td>创建可在 Docker 容器上运行的可独立部署的微服务。</td></tr><tr><td style="text-align:center">云</td><td>使用现有云服务，或创建和部署自己的云服务。</td></tr><tr><td style="text-align:center">机器学习</td><td>为应用添加视觉算法、语音处理、预测模型等。</td></tr><tr><td style="text-align:center">游戏开发</td><td>为最热门的台式机、手机和控制台开发 2D 和 3D 游戏。</td></tr><tr><td style="text-align:center">物联网</td><td>使用 Raspberry Pi 和其他单板计算机的本机支持创建 IoT 应用。</td></tr></tbody></table><h2 id="1-2-什么是-c-？"><a class="header-anchor" href="#1-2-什么是-c-？">¶</a>1.2 什么是 C#？</h2><p>一种编程语言，<a href="http://xn--6kq0h13lndz8tg7l.NET">可以开发基于.NET</a> 平台的应用。</p><h2 id="1-3-net-两种交互模式"><a class="header-anchor" href="#1-3-net-两种交互模式">¶</a>1.3 .NET 两种交互模式</h2><ul><li>C/S：客户端（Client）/服务器（Server） 模式（需安装客户端软件）</li><li>B/S：浏览器（Browser）/服务器 模式（只需要浏览器）</li></ul><h2 id="1-4-开发工具"><a class="header-anchor" href="#1-4-开发工具">¶</a>1.4 开发工具</h2><ul><li><a href="https://visualstudio.microsoft.com/">Visual Studio</a></li></ul><h1 id="二-c-语法基础"><a class="header-anchor" href="#二-c-语法基础">¶</a>二、C#语法基础</h1><h2 id="2-1-c-程序一般结构"><a class="header-anchor" href="#2-1-c-程序一般结构">¶</a>2.1 C#程序一般结构</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System; <span class="comment">//调用命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//项目开始的地方</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="comment">//构造命名空间，作用：区别相同名称但是作用不同的类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">YourNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构造类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">YourClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        <span class="comment">//属性</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        <span class="comment">//方法或函数</span></span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> YourStruct</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义接口</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IYourInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义委托类型</span></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">YourDelegate</span>()</span>;</span><br><span class="line">    <span class="comment">//枚举类型变量</span></span><br><span class="line">    <span class="built_in">enum</span> YourEnum</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">YourNestedNamespace</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> YourStruct</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>代码中出现的所有标点都是英文半角；</li><li>在 C# 代码中，每行代码的结束，都以<strong>分号</strong>结束。</li></ol><h2 id="2-2-注释"><a class="header-anchor" href="#2-2-注释">¶</a>2.2 注释</h2><ol><li><p>单行注释</p><p>一般放在<strong>代码语句</strong>的后面，或者放在<strong>代码块</strong>的前面。基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a;<span class="comment">//定义变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量 b，c</span></span><br><span class="line"><span class="built_in">int</span> b;</span><br><span class="line"><span class="built_in">int</span> c;</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Console.WriteLine();</span></span><br><span class="line"><span class="comment">Console.ReadKey();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>文本注释</p><p>多用来解释类或方法的功能及参数。基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>text</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-基本数据类型"><a class="header-anchor" href="#2-3-基本数据类型">¶</a>2.3 基本数据类型</h2><p>在 C# 中，变量分为以下几种类型：</p><ul><li>值类型</li><li>引用类型</li><li>指针类型</li></ul><h3 id="2-3-1-值类型"><a class="header-anchor" href="#2-3-1-值类型">¶</a>2.3.1 值类型</h3><p>它们是从类 <code>System.ValueType</code> 中派生的。值类型变量可以直接分配给一个值，即当前变量所在地址里的数据就是当前变量的值。值类型直接包含数据。</p><table><thead><tr><th style="text-align:center">关键字</th><th>描述</th><th>范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">sbyte</td><td>8 位有符号整数类型</td><td>-128 到 127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td>16 位有符号整数类型</td><td>-32,768 到 32,767</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>int</strong></td><td>32 位有符号整数类型</td><td>-2,147,483,648 到 2,147,483,647</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td>64 位有符号整数类型</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">byte</td><td>8 位无符号整数</td><td>0 到 255</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ushort</td><td>16 位无符号整数类型</td><td>0 到 65,535</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">uint</td><td>32 位无符号整数类型</td><td>0 到 4,294,967,295</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ulong</td><td>64 位无符号整数类型</td><td>0 到 18,446,744,073,709,551,615</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">float</td><td>32 位单精度浮点型</td><td>-3.4 x 1038 到 + 3.4 x 1038</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td>64 位双精度浮点型</td><td>(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td><td style="text-align:center">0.0D</td></tr><tr><td style="text-align:center">decimal</td><td>128 位精确的十进制值，28-29 有效位数</td><td>(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td><td style="text-align:center">0.0M</td></tr><tr><td style="text-align:center">char</td><td>16 位 Unicode 字符</td><td>U +0000 到 U +ffff</td><td style="text-align:center">‘\0’</td></tr><tr><td style="text-align:center">bool</td><td>布尔值</td><td>true 或 false</td><td style="text-align:center">False</td></tr></tbody></table><blockquote><p>字符不可为空，字符只能存一个字符。</p></blockquote><p>如需得到一个类型或一个变量在特定平台上的准确字节大小，可以使用 <code>sizeof()</code> 方法。下面举例获取任何机器上 <code>int</code> 类型的字节大小：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataTypeApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="keyword">sizeof</span>(<span class="built_in">int</span>));<span class="comment">//</span></span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值类型还包括<a href="#4-3-%E6%9E%9A%E4%B8%BE">枚举</a>和结构体。</p><h3 id="2-3-1-引用类型"><a class="header-anchor" href="#2-3-1-引用类型">¶</a>2.3.1 引用类型</h3><p>引用类型变量不包含存储在变量中的实际数据，但它们包含对变量的引用（地址）。换句话说，<strong>它们实际存储的是一个地址（栈区）</strong>，并指向变量的实际值所在的内存空间（堆区）。内置的引用类型有：<code>object</code>、<code>dynamic</code>和<code>string</code>。</p><ul><li><p>对象（Object）类型</p><p><strong>对象</strong>：是所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><ul><li>当一个值类型转换为对象类型时，则被称为<strong>装箱</strong>；</li><li>当一个对象类型转换为值类型时，则被称为<strong>拆箱</strong>。</li></ul></li><li><p>动态（Dynamic）类型</p><p>任何类型的值可以存储在动态数据类型变量中。这些变量的类型检查是在运行时发生的。声明动态类型的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dynamic &lt;variable_name&gt; = value;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>字符串（String）类型</p><p><strong>字符串（String）类型</strong>：允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。</p></li></ul><h3 id="2-3-3-指针类型"><a class="header-anchor" href="#2-3-3-指针类型">¶</a>2.3.3 指针类型</h3><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。声明指针类型的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type* name;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="built_in">char</span>* cp;</span><br><span class="line"><span class="built_in">int</span>* ip;</span><br></pre></td></tr></table></figure><blockquote><p>指针具体的使用，请参照<a href="">不安全代码</a></p></blockquote><h3 id="2-3-4-数据类型的转换"><a class="header-anchor" href="#2-3-4-数据类型的转换">¶</a>2.3.4 数据类型的转换</h3><p>数据类型的转换有两种：<strong>隐式类型转换</strong>和<strong>显式类型转换</strong>。前者是自动进行，而后者是强制进行。</p><ul><li><p>隐式类型转换</p><p>需要满足的条件是：两种兼容类型；目标类型等级高于源类型。例如：int 和 double 兼容（都是数字类型），而 double &gt; int 。</p></li><li><p>显式类型转换</p><ul><li><p>兼容类型</p><p>高阶转换成低阶，可能会造成数据丢失。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> num = <span class="number">521.1314</span>;</span><br><span class="line"><span class="built_in">int</span> num_1;</span><br><span class="line">num_1 = (<span class="built_in">int</span>)num;<span class="comment">//此时 num_1 的值为 521</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：浮点型向整型转换时，会直接<strong>舍弃</strong>小数部分</p></blockquote></li><li><p>不兼容类型/Convert 类型转换</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> num;</span><br><span class="line">num = Convert.ToDouble(str);</span><br></pre></td></tr></table></figure><blockquote><p>转换的内容必须合理，比如 <code>14A</code> 中的 <code>A</code>不能转换成数字。</p></blockquote></li></ul></li><li><p><code>Convert</code>类型转换对应的所有方法如下：</p></li></ul><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">ToBoolean</td><td style="text-align:left">如果可能的话，把类型转换为布尔型。</td></tr><tr><td style="text-align:center">ToByte</td><td style="text-align:left">如果可能的话，把类型转换为字节类型。</td></tr><tr><td style="text-align:center">ToChar</td><td style="text-align:left">如果可能的话，把类型转换为单个 Unicode 字符类型。</td></tr><tr><td style="text-align:center">ToDateTime</td><td style="text-align:left">如果可能的话，把类型（整数或字符串类型）转换为 日期-时间 结构。</td></tr><tr><td style="text-align:center">ToDecimal</td><td style="text-align:left">如果可能的话，把浮点型或整数类型转换为十进制类型。</td></tr><tr><td style="text-align:center">ToDouble</td><td style="text-align:left">如果可能的话，把类型转换为双精度浮点型。</td></tr><tr><td style="text-align:center">ToInt16</td><td style="text-align:left">如果可能的话，把类型转换为 16 位整数类型。</td></tr><tr><td style="text-align:center">ToInt32</td><td style="text-align:left">如果可能的话，把类型转换为 32 位整数类型。</td></tr><tr><td style="text-align:center">ToInt64</td><td style="text-align:left">如果可能的话，把类型转换为 64 位整数类型。</td></tr><tr><td style="text-align:center">ToSbyte</td><td style="text-align:left">如果可能的话，把类型转换为有符号字节类型。</td></tr><tr><td style="text-align:center">ToSingle</td><td style="text-align:left">如果可能的话，把类型转换为小浮点数类型。</td></tr><tr><td style="text-align:center">ToString</td><td style="text-align:left">如果可能的话，把类型转换为字符串类型。</td></tr><tr><td style="text-align:center">ToType</td><td style="text-align:left">如果可能的话，把类型转换为指定类型。</td></tr><tr><td style="text-align:center">ToUInt16</td><td style="text-align:left">如果可能的话，把类型转换为 16 位无符号整数类型。</td></tr><tr><td style="text-align:center">ToUInt32</td><td style="text-align:left">如果可能的话，把类型转换为 32 位无符号整数类型。</td></tr><tr><td style="text-align:center">ToUInt64</td><td style="text-align:left">如果可能的话，把类型转换为 64 位无符号整数类型。</td></tr></tbody></table><h2 id="2-4-运算符"><a class="header-anchor" href="#2-4-运算符">¶</a>2.4 运算符</h2><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。分类如下：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="2-4-1-算数运算符"><a class="header-anchor" href="#2-4-1-算数运算符">¶</a>2.4.1 算数运算符</h3><table><thead><tr><th style="text-align:center">加</th><th style="text-align:center">减</th><th style="text-align:center">乘</th><th style="text-align:center">除</th><th style="text-align:center">取余</th><th style="text-align:center">自增</th><th style="text-align:center">自减</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">-</td><td style="text-align:center">*</td><td style="text-align:center">/</td><td style="text-align:center">%</td><td style="text-align:center">++</td><td style="text-align:center">–</td></tr></tbody></table><p>自增和自减有两种，前置和后置。分别对应如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i;</span><br><span class="line">i++;</span><br><span class="line">++i;</span><br></pre></td></tr></table></figure><p>二者的区别是：</p><ul><li><code>++i</code>：表示取<code>i</code>的地址，增加它的内容，然后把值放在寄存器中（<strong>先加后用</strong>）</li><li><code>i++</code>：表示取<code>i</code>的地址，把它的值装入寄存器，然后增加内存中的 a 的值（<strong>先用后加</strong>）</li></ul><p><strong>而前置自增 (<code>++i</code>) 通常要比后置自增 (<code>i++</code>) 效率更高</strong>。理由如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置++</span></span><br><span class="line">Age&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    ++i</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++</span></span><br><span class="line"><span class="keyword">const</span> Age <span class="keyword">operator</span>++(<span class="built_in">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Age tmp = *<span class="keyword">this</span>;</span><br><span class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//利用前置++</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前置直接对源数据进行加 1 操作；而后置需要先创建一个临时变量，源数据保存一个副本后，再加 1</li><li>时间上来看：后置的语句更多，占用的时间更多</li><li>空间上来看：后置需要创建临时变量（用完释放），因此占用的内存更多</li></ul><h3 id="2-4-2-关系运算符"><a class="header-anchor" href="#2-4-2-关系运算符">¶</a>2.4.2 关系运算符</h3><p>下表显示了 C# 支持的所有关系运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:center">(A == B) 不为真。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:center">(A != B) 为真。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &gt; B) 不为真。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &lt; B) 为真。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &gt;= B) 不为真。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &lt;= B) 为真。</td></tr></tbody></table><h3 id="2-4-3-逻辑运算符"><a class="header-anchor" href="#2-4-3-逻辑运算符">¶</a>2.4.3 逻辑运算符</h3><p>下表显示了 C# 支持的所有逻辑运算符。假设变量 A 为布尔值 true，变量 B 为布尔值 false，则：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:center">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:center">||</td><td style="text-align:left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td style="text-align:center">(A|| B) 为真。</td></tr><tr><td style="text-align:center">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:center">!(A &amp;&amp; B) 为真。</td></tr></tbody></table><h3 id="2-4-4-位运算符"><a class="header-anchor" href="#2-4-4-位运算符">¶</a>2.4.4 位运算符</h3><p>位逻辑运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th style="text-align:center">p</th><th style="text-align:center">q</th><th style="text-align:center">p &amp; q</th><th style="text-align:center">p| q</th><th style="text-align:center">p ^ q</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>以及位操作符：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:left">如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:center">|</td><td style="text-align:left">如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td><td style="text-align:left">(A |B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。</td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:center">~</td><td style="text-align:left">二进制补码运算符是一元运算符，具有&quot;翻转&quot;位效果。</td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，2 的补码形式，带符号的二进制数。</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><h3 id="2-4-5-赋值运算符"><a class="header-anchor" href="#2-4-5-赋值运算符">¶</a>2.4.5 赋值运算符</h3><p>下表列出了 C# 支持的赋值运算符：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:center">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:center">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:center">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:center">C _= A 相当于 C = C _ A</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:center">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:center">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:center">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:center">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:center">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:center">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:center">|=</td><td style="text-align:left">按位或且赋值运算符</td><td style="text-align:center">C|= 2 等同于 C = C | 2</td></tr></tbody></table><h3 id="2-4-6-其他运算符"><a class="header-anchor" href="#2-4-6-其他运算符">¶</a>2.4.6 其他运算符</h3><p>下表列出了 C# 支持的其他一些重要的运算符：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">sizeof()</td><td style="text-align:left">返回数据类型的大小。</td><td style="text-align:left">sizeof(int)，将返回 4.</td></tr><tr><td style="text-align:center">typeof()</td><td style="text-align:left">返回变量的类型。</td><td style="text-align:left">typeof(StreamReader);</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&amp;a; 将得到变量的实际地址。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">变量的指针。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:center">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则为 X : 否则为 Y</td></tr><tr><td style="text-align:center">is</td><td style="text-align:left">判断当前对象是否为 XXX 类型</td><td style="text-align:left">返回 ture 或 false</td></tr><tr><td style="text-align:center">as</td><td style="text-align:left">强制转换，即使转换失败也不会抛出异常。</td><td style="text-align:left">转换成功，返回转换后的对象；反之，返回 NULL</td></tr></tbody></table><h3 id="2-4-7-lambda-运算符"><a class="header-anchor" href="#2-4-7-lambda-运算符">¶</a>2.4.7 lambda 运算符</h3><p>在 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>中，lambda 运算符 <code>=&gt;</code> 将左侧的输入参数与右侧的 lambda 主体分开。</p><p>使用 Lambda 表达式来创建匿名函数。 使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-operator">lambda 声明运算符<code>=&gt;</code></a> 从其主体中分离 lambda 参数列表。 Lambda 表达式可采用以下任意一种形式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(input-parameters) =&gt; expression;</span><br><span class="line">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;;</span><br></pre></td></tr></table></figure><p>若要创建 Lambda 表达式，需要在 Lambda 运算符左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Action&lt;<span class="built_in">string</span>&gt; greet = (name) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> greeting = <span class="string">$&quot;Hello <span class="subst">&#123;name&#125;</span>!&quot;</span>;</span><br><span class="line">    Console.WriteLine(greeting);</span><br><span class="line">&#125;;</span><br><span class="line">greet(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Hello World!</span></span><br></pre></td></tr></table></figure><h2 id="2-5-特殊字符"><a class="header-anchor" href="#2-5-特殊字符">¶</a>2.5 特殊字符</h2><h3 id="2-5-1-转义字符"><a class="header-anchor" href="#2-5-1-转义字符">¶</a>2.5.1 转义字符</h3><p><code>\\</code> + <code>特殊字符</code> = <code>具有特殊意义的字符</code>。例如下表所示：</p><table><thead><tr><th style="text-align:center">转义符</th><th style="text-align:center">字符名</th></tr></thead><tbody><tr><td style="text-align:center">\’</td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:center">\&quot;</td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center">\\</td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center">\0</td><td style="text-align:center">空字符</td></tr><tr><td style="text-align:center">\a</td><td style="text-align:center">感叹号</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">新行</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">水平 tab</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">垂直 tab</td></tr></tbody></table><h3 id="2-5-2-符"><a class="header-anchor" href="#2-5-2-符">¶</a>2.5.2 @ 符</h3><ol><li>取消字符串中转义字符的转义作用。用在字符串前时，字符串里面的转义字符不转义。将字符串按照原格式输出。</li></ol><h3 id="2-5-3-符"><a class="header-anchor" href="#2-5-3-符">¶</a>2.5.3 + 符</h3><ul><li><p>当<code>+</code>两边至少有一边为字符串时，作用为拼接字符串的作用</p><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;AAAAA&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">string</span> email = <span class="string">&quot;XXXXX@xx.com&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> address = <span class="string">&quot;SSSSS&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> salary = <span class="number">10000</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁了，邮箱是：&quot;</span> + email + <span class="string">&quot;,住在&quot;</span> + address + <span class="string">&quot;,每月的收入是&quot;</span> + salary + <span class="string">&quot;日元&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure></li><li><p>数字相加</p><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num_1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> num_2 = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> num_3 = num_1 + num_2;</span><br><span class="line">Console.WriteLine(num_3);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-4-占位符"><a class="header-anchor" href="#2-5-4-占位符">¶</a>2.5.4 占位符</h3><p>用在字符串内，增强代码的可读性。具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数字是：&quot;</span> + a + <span class="string">&quot;，第二个数字是：&quot;</span> + b + <span class="string">&quot;，第三个数字是：&quot;</span> + c);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数字是：&#123;0&#125;，第二个数字是：&#123;1&#125;，第三个数字是：&#123;2&#125;&quot;</span>,a,b,c);</span><br></pre></td></tr></table></figure><p>使用注意：</p><ul><li>挖几个坑，就要填几个坑。如果多填，不报错但没效果；如果少填，就会异常（语法没错误，只不过在程序运行期间，由于某些原因出现问题，使程序不在正常的运行）</li><li>输出顺序{0}，{1}，{2}… 对应 a, b, c, …</li></ul><p>还可以使用 <code>$</code> 修饰字符串，然后使用占位符。例如下面的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;第一个数字是：<span class="subst">&#123;a&#125;</span>，第二个数字是：<span class="subst">&#123;b&#125;</span>，第三个数字是：<span class="subst">&#123;c&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>推荐在项目中使用 <code>$</code> 作为占位符修饰字。</p></blockquote><h2 id="2-6-可空类型-💖💖💖"><a class="header-anchor" href="#2-6-可空类型-💖💖💖">¶</a>2.6 可空类型 💖💖💖</h2><p>在 C# 中，值类型例如 int 的默认值是 0 ，同时也不能进 <code>a = null</code> 的赋值操作。一般情况下所有 <code>if( a != null)</code> 永远为真。</p><p>C# 提供了一个特殊的数据类型，<code>nullable</code> 类型（<strong>可空类型</strong>），可空类型可以表示其基础值类型正常范围内的值，再加上一个 null 值。</p><p><code>?</code> 单问号用于对 <code>int、double、bool </code>等无法直接赋值为 <code>null</code> 的数据类型进行 <code>null</code> 的赋值</p><h3 id="2-6-1-定义可空类型"><a class="header-anchor" href="#2-6-1-定义可空类型">¶</a>2.6.1 定义可空类型</h3><p>语法如下：声明一个 <code>nullable</code> 类型（可空类型）的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;data_type&gt;? &lt;variable_name&gt; = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>? i = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-null-合并运算符"><a class="header-anchor" href="#2-6-2-null-合并运算符">¶</a>2.6.2 null 合并运算符（ ?? ）</h3><p><code>null</code>合并运算符用于定义<strong>可空类型</strong>和<strong>引用类型</strong>的默认值。<strong>null 合并运算符为类型转换定义了一个预设值，以防可空类型的值为 null</strong>。下面的实例演示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NullablesAtShow</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//定义可空类型</span></span><br><span class="line">          <span class="built_in">double</span>? num1 = <span class="literal">null</span>;</span><br><span class="line">          <span class="built_in">double</span>? num2 = <span class="number">3.14157</span>;</span><br><span class="line">          <span class="built_in">double</span> num3;</span><br><span class="line">          <span class="comment">//如果第一个操作数的值为 null，则运算符返回第二个操作数的值，否则返回第一个操作数的值</span></span><br><span class="line">          num3 = num1 ?? <span class="number">5.34</span>;</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;num3 的值： &#123;0&#125;&quot;</span>, num3);</span><br><span class="line">          num3 = num2 ?? <span class="number">5.34</span>;</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;num3 的值： &#123;0&#125;&quot;</span>, num3);</span><br><span class="line">          Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果左操作数的值不为 <code>null</code>，则 null 合并运算符 <code>??</code> 返回该值；否则，它会计算右操作数并返回其结果。 如果左操作数的计算结果为非 null，则 <code>??</code> 运算符不会计算其右操作数。</p><p>仅当左操作数的计算结果为 <code>null</code> 时，Null 合并赋值运算符 <code>??=</code> 才会将其右操作数的值赋值给其左操作数。 如果左操作数的计算结果为非 null，则 <code>??=</code> 运算符不会计算其右操作数。</p><h3 id="2-6-3-操作符"><a class="header-anchor" href="#2-6-3-操作符">¶</a>2.6.3 <code>?.</code> 操作符</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A?.print();</span><br></pre></td></tr></table></figure><p>如果 <code>A</code> 不为 <code>null</code> ，则执行 <code>print()</code> 方法。</p><h1 id="三-流程控制语句"><a class="header-anchor" href="#三-流程控制语句">¶</a>三、流程控制语句</h1><h2 id="3-1-选择结构"><a class="header-anchor" href="#3-1-选择结构">¶</a>3.1 选择结构</h2><h3 id="3-1-1-单-if-语句"><a class="header-anchor" href="#3-1-1-单-if-语句">¶</a>3.1.1 单 if 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(逻辑表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 如果逻辑表达式为真将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-if-else-语句"><a class="header-anchor" href="#3-1-2-if-else-语句">¶</a>3.1.2 if/else 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(boolean_expression)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 如果布尔表达式为真将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 如果布尔表达式为假将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-switch-语句"><a class="header-anchor" href="#3-1-3-switch-语句">¶</a>3.1.3 switch 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 您可以有任意数量的 case 语句 */</span></span><br><span class="line">    <span class="literal">default</span> : <span class="comment">/* 默认执行（除了上面情况之外） */</span></span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>语句必须遵循下面的规则：</p><ul><li><code>case</code> 的<code>constant-expression</code>必须与<code>switch</code>中的变量具有相同的数据类型，且必须是一个常量。</li><li>当遇到<code>break</code>语句时，<code>switch</code>终止，控制流将跳转到 <code>switch</code> 语句后的下一行。</li><li>C# 不允许从一个开关部分继续执行到下一个开关部分。如果 <code>case</code> 语句中有处理语句，则必须包含<code>break</code>或其他跳转语句。</li></ul><h3 id="3-1-4-三目运算符"><a class="header-anchor" href="#3-1-4-三目运算符">¶</a>3.1.4 三目运算符</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逻辑表达式 ? Exp2 : Exp3</span><br></pre></td></tr></table></figure><p>请注意，冒号的使用和位置。 <code>?</code> 表达式的值是由<strong>逻辑表达式</strong>决定的。</p><ul><li>如果逻辑表达式为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值</li><li>如果逻辑表达式为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值</li></ul><h2 id="3-2-循环结构"><a class="header-anchor" href="#3-2-循环结构">¶</a>3.2 循环结构</h2><h3 id="3-2-1-while-语句"><a class="header-anchor" href="#3-2-1-while-语句">¶</a>3.2.1 while 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(逻辑表达式/循环条件)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进行判断，满足判断条件后再循环。</p><h3 id="3-2-2-do-while-语句"><a class="header-anchor" href="#3-2-2-do-while-语句">¶</a>3.2.2 do-while 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(逻辑表达式/循环条件);</span><br></pre></td></tr></table></figure><p>先进行循环，然后判断是否继续循环。</p><h3 id="3-2-3-for-语句"><a class="header-anchor" href="#3-2-3-for-语句">¶</a>3.2.3 for 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表达式1一般为声明循环变量</span></span><br><span class="line"><span class="comment">//循环条件</span></span><br><span class="line"><span class="comment">//改变循环条件</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-循环控制语句"><a class="header-anchor" href="#3-2-4-循环控制语句">¶</a>3.2.4 循环控制语句</h3><ol><li><code>break</code>：跳出当前循环，如果有循环的嵌套，那么只会跳出<strong>一层</strong>循环</li><li><code>continue</code>：立即结束<strong>本次</strong>循环，然后判断循环条件，如果成立，则进入下一次循环，否则退出循环</li></ol><h1 id="四-复杂数据类型"><a class="header-anchor" href="#四-复杂数据类型">¶</a>四、复杂数据类型</h1><h2 id="4-1-字符串"><a class="header-anchor" href="#4-1-字符串">¶</a>4.1 字符串</h2><p>字符串是引用类型。在 C# 中，您可以使用<strong>字符数组</strong>来表示字符串。但是，更常见的做法是使用 <code>string</code> 关键字来声明一个字符串变量。</p><h3 id="4-1-1-创建-string-对象"><a class="header-anchor" href="#4-1-1-创建-string-对象">¶</a>4.1.1 创建 String 对象</h3><p>您可以使用以下方法之一来创建 string 对象：</p><ul><li>通过给 <code>String</code> 变量指定一个字符串</li><li>通过使用 <code>String</code> 类构造函数</li><li>通过使用字符串串联运算符（ + ）</li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过<strong>格式化方法</strong>来转换一个值或对象为它的字符串表示形式</li></ul><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//字符串，字符串连接</span></span><br><span class="line">            <span class="built_in">string</span> fname, lname;</span><br><span class="line">            fname = <span class="string">&quot;Rowan&quot;</span>;</span><br><span class="line">            lname = <span class="string">&quot;Atkinson&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> fullname = fname + lname;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Full Name: &#123;0&#125;&quot;</span>, fullname);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过使用 string 构造函数</span></span><br><span class="line">            <span class="built_in">string</span> greetings = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Greetings: &#123;0&#125;&quot;</span>, greetings);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法返回字符串</span></span><br><span class="line">            <span class="built_in">string</span>[] sarray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;From&quot;</span>, <span class="string">&quot;Tutorials&quot;</span>, <span class="string">&quot;Point&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> message = String.Join(<span class="string">&quot; &quot;</span>, sarray);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用于转化值的格式化方法</span></span><br><span class="line">            DateTime waiting = <span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">58</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">string</span> chat = String.Format(<span class="string">&quot;Message sent at &#123;0:t&#125; on &#123;0:D&#125;&quot;</span>,</span><br><span class="line">            waiting);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, chat);</span><br><span class="line">            Console.ReadKey() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-string-类的属性"><a class="header-anchor" href="#4-1-2-string-类的属性">¶</a>4.1.2 String 类的属性</h3><p><code>String</code> 类有以下两个常用属性：</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">Chars</td><td style="text-align:left">在当前 <em>String</em> 对象中获取 <em>Char</em> 对象的指定位置。</td></tr><tr><td style="text-align:center">Length</td><td style="text-align:left">在当前的 <em>String</em> 对象中获取字符数。</td></tr></tbody></table><h3 id="4-1-3-string-类的方法"><a class="header-anchor" href="#4-1-3-string-类的方法">¶</a>4.1.3 String 类的方法</h3><p>具体可以参考：<a href="https://www.runoob.com/csharp/csharp-string.html">C# 字符串（String） | 菜鸟教程 (runoob.com)</a>。</p><h2 id="4-2-数组"><a class="header-anchor" href="#4-2-数组">¶</a>4.2 数组</h2><p>数组是一个引用类型。数组是一个存储相同类型元素的固定大小的顺序集合。数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><h3 id="4-2-1-声明数组"><a class="header-anchor" href="#4-2-1-声明数组">¶</a>4.2.1 声明数组</h3><p>在 C# 中声明一个数组，您可以使用下面的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datatype[] arrayName;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="built_in">int</span>[] id;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>datatype</code>用于指定被存储在数组中的元素的类型</li><li><code>[ ]</code>指定数组的秩（维度）。秩指定数组的大小</li><li><code>arrayName</code> 指定数组的名称</li></ul><h3 id="4-2-2-初始化数组"><a class="header-anchor" href="#4-2-2-初始化数组">¶</a>4.2.2 初始化数组</h3><p>声明一个数组不会在内存中初始化数组。当初始化数组变量时，您可以赋值给数组。数组是一个引用类型，所以您需要使用 <strong>new</strong> 关键字来创建数组的实例。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="4-2-3-赋值给数组"><a class="header-anchor" href="#4-2-3-赋值给数组">¶</a>4.2.3 赋值给数组</h3><p>您可以通过使用索引号赋值给一个单独的数组元素，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br><span class="line">balance[<span class="number">0</span>] = <span class="number">4500.0</span>;</span><br></pre></td></tr></table></figure><p>您可以在声明数组的同时给数组赋值，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = &#123; <span class="number">2340.0</span>, <span class="number">4523.69</span>, <span class="number">3421.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以创建并初始化一个数组，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>在上述情况下，你也可以省略数组的大小，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以赋值一个数组变量到另一个目标数组变量中。在这种情况下，目标和源会指向相同的内存位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] score = marks;</span><br></pre></td></tr></table></figure><p>当您创建一个数组时，C# 编译器会根据数组类型隐式初始化每个数组元素为一个默认值。例如，int 数组的所有元素都会被初始化为 0。</p><h3 id="4-2-4-访问数组元素"><a class="header-anchor" href="#4-2-4-访问数组元素">¶</a>4.2.4 访问数组元素</h3><p>元素是通过带索引的数组名称来访问的。这是通过把元素的索引放置在数组名称后的方括号中来实现的。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure><h2 id="4-3-枚举"><a class="header-anchor" href="#4-3-枚举">¶</a>4.3 枚举</h2><p>枚举是值类型。enum：枚举的关键字，声明枚举的关键字。具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">[<span class="meta">public</span>] <span class="built_in">enum</span> 枚举名</span><br><span class="line">&#123;</span><br><span class="line">    值<span class="number">1</span>,</span><br><span class="line">    值<span class="number">2</span>,</span><br><span class="line">    值<span class="number">3</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Gender</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Gender gender = Gender.男;</span><br></pre></td></tr></table></figure><h2 id="4-4-结构体"><a class="header-anchor" href="#4-4-结构体">¶</a>4.4 结构体</h2><p>在 C# 中，结构体是<strong>值类型</strong>数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。<code>struct</code>关键字用于创建结构体。结构体是用来代表一个记录。</p><h3 id="4-4-1-构造结构体"><a class="header-anchor" href="#4-4-1-构造结构体">¶</a>4.4.1 构造结构体</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="keyword">struct</span> 结构名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> 成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-c-结构的特点"><a class="header-anchor" href="#4-4-2-c-结构的特点">¶</a>4.4.2 C# 结构的特点</h3><p>在 C# 中的结构与传统的 C 或 C++ 中的结构不同。C# 中的结构有以下特点：</p><ul><li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li><li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。</li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 <strong>New</strong> 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li></ul><h1 id="五-函数-方法"><a class="header-anchor" href="#五-函数-方法">¶</a>五、函数/方法</h1><p>一个方法是把一些相关的语句组织在一起，用来执行一个任务的语句块。每一个 C# 程序至少有一个带有 Main 方法的类。</p><h2 id="5-1-定义方法"><a class="header-anchor" href="#5-1-定义方法">¶</a>5.1 定义方法</h2><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] [<span class="keyword">static</span>] 返回值类型 方法名([形式参数列表])</span><br><span class="line">&#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-调用方法"><a class="header-anchor" href="#5-2-调用方法">¶</a>5.2 调用方法</h2><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名([实际参数列表]);<span class="comment">//当方法和主函数在同一类下，则不用添加类名</span></span><br><span class="line">对象.方法名([实际参数列表]);</span><br></pre></td></tr></table></figure><h2 id="5-3-函数的递归"><a class="header-anchor" href="#5-3-函数的递归">¶</a>5.3 函数的递归</h2><p>一个方法可以自我调用。这就是所谓的 <strong>递归</strong>。</p><blockquote><p>应当在工程中，避免使用递归方法。因为递归方法</p></blockquote><h2 id="5-4-参数传递与-💗高级参数💗"><a class="header-anchor" href="#5-4-参数传递与-💗高级参数💗">¶</a>5.4 参数传递与 💗<code>高级参数</code>💗</h2><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">值参数</td><td style="text-align:left">这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</td></tr><tr><td style="text-align:center">引用参数</td><td style="text-align:left">这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。</td></tr><tr><td style="text-align:center">输出参数</td><td style="text-align:left">这种方式可以返回多个值。</td></tr></tbody></table><h3 id="5-4-1-按值传递参数"><a class="header-anchor" href="#5-4-1-按值传递参数">¶</a>5.4.1 按值传递参数</h3><p>这是参数传递的默认方式。在这种方式下，当调用一个方法时，会为每个值参数创建一个新的存储位置。</p><p>实际参数的值会复制给形参，实参和形参使用的是两个不同内存中的值。所以，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Add10</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = a+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a,b,c;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = Add10(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把实际参数 a 传入到函数 Add10(a) 中去，在该函数中，对形式参数 a 进行赋值计算，但是形参 a 改变没有影响实参 a ，它们两个使用不同的内存空间。</p><h3 id="5-4-2-按引用传递参数-ref"><a class="header-anchor" href="#5-4-2-按引用传递参数-ref">¶</a>5.4.2 按引用传递参数——ref</h3><p>引用参数是一个对变量的<strong>内存位置的引用</strong>。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。在 C# 中，使用 <code>ref</code> 关键字声明引用参数。</p><p>在以下示例中，<code>p </code>和<code>x</code>指的是相同的存储器位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span> (<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> p</span>)</span> &#123;</span><br><span class="line">       p = p + <span class="number">1</span>;             <span class="comment">// Increment p by 1</span></span><br><span class="line">       Console.WriteLine (p); <span class="comment">// Write p to screen</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">8</span>;</span><br><span class="line">        myMethod (<span class="keyword">ref</span> x);      <span class="comment">// Ask myMethod to deal directly with x</span></span><br><span class="line">        Console.WriteLine (x); <span class="comment">// x is now 9</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-按输出传递参数-out"><a class="header-anchor" href="#5-4-3-按输出传递参数-out">¶</a>5.4.3 按输出传递参数——out</h3><p>return 语句可用于只从函数中返回一个值。但是，可以使用 <strong>输出参数</strong> 来从函数中返回两个或多个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。</p><p>out 参数就像一个<code>ref</code>参数，但是它:</p><ul><li>在进入函数之前不需要赋值</li><li><strong>必须在它出来的函数之前赋值</strong></li><li>out 修饰符用于从方法获取多个返回值。</li></ul><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ToWords</span> (<span class="params"><span class="built_in">string</span> name, <span class="keyword">out</span> <span class="built_in">string</span> firstNames, <span class="keyword">out</span> <span class="built_in">string</span> lastName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//out参数要求在方法的内部必须为其赋值</span></span><br><span class="line">       <span class="built_in">int</span> i = name.LastIndexOf (<span class="string">&quot; &quot;</span>);</span><br><span class="line">       firstNames = name.Substring (<span class="number">0</span>, i);</span><br><span class="line">       lastName = name.Substring (i + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        ToWords(<span class="string">&quot;this is a test&quot;</span>, <span class="keyword">out</span> a, <span class="keyword">out</span> b);</span><br><span class="line">        Console.WriteLine (a);</span><br><span class="line">        Console.WriteLine (b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-params-修饰符"><a class="header-anchor" href="#5-4-4-params-修饰符">¶</a>5.4.4 params 修饰符</h3><p>将实参列表中跟可变参数数组类型一致的元素都当作数组的元素去处理。<code>params </code>参数修饰符用于方法的<strong>最后一个参数</strong>，以便该方法接受任意数量的特定类型的参数。</p><p>参数类型必须声明为数组。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Sum</span> (<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] ints</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ints.Length; i++)</span><br><span class="line">       &#123;</span><br><span class="line">          sum += ints[i]; <span class="comment">// Increase sum by ints[i]</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> total = Sum (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        Console.WriteLine (total); <span class="comment">// 10</span></span><br><span class="line">        <span class="built_in">int</span> total = Sum (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>，<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine (total); <span class="comment">// 15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-5-命名参数"><a class="header-anchor" href="#5-4-5-命名参数">¶</a>5.4.5 命名参数</h3><p>我们可以通过名称识别参数，参考 Python 的位置参数。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine (x + <span class="string">&quot;, &quot;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   myMethod (x:<span class="number">1</span>, y:<span class="number">2</span>); <span class="comment">// 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-匿名方法"><a class="header-anchor" href="#5-5-匿名方法">¶</a>5.5 匿名方法</h2><p>在 C#中，匿名方法是一种没有名称且可以在运行时定义的方法，通常用于在需要时定义委托或事件的处理程序。下面是一个示例，演示如何使用匿名方法定义一个简单的委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">PrintDelegate</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PrintDelegate print = <span class="built_in">delegate</span> (<span class="built_in">string</span> message) &#123; Console.WriteLine(message); &#125;;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，匿名方法在定义时可以访问包含它的方法中的变量，这些变量称为“捕获变量”。例如，下面是一个示例，演示如何使用匿名方法访问捕获变量：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line">        Action print = <span class="built_in">delegate</span> () &#123; Console.WriteLine(x); &#125;;</span><br><span class="line">        x = <span class="number">20</span>;</span><br><span class="line">        print();  <span class="comment">// 输出20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了一个名为 print 的委托，它没有参数，返回类型为 void。在匿名方法中，我们输出了变量 x 的值，然后修改了变量 x 的值，最后调用了 print 方法。<strong>由于匿名方法访问的是变量的引用，因此输出的值为 20，而不是最 初的值 10</strong>。</p><p>Lambda 表达式主要用于实现匿名方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参</span></span><br><span class="line">() =&gt; &#123;  &#125;</span><br><span class="line"><span class="comment">//一个参数</span></span><br><span class="line">(x) =&gt; &#123; &#125;</span><br><span class="line">x =&gt; &#123; &#125;</span><br><span class="line"><span class="comment">//多参数</span></span><br><span class="line">(x,y,z) =&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单语句，可以不加 &#123; &#125;</span></span><br><span class="line">() =&gt; a = <span class="number">5</span>; <span class="comment">//执行 a = 5 ，但是没有任何返回值</span></span><br><span class="line">() =&gt; a; <span class="comment">// 单语句如果是一个值/引用，返回对应的的值/引用，可以省略return。例如：前面代码返回a的值</span></span><br><span class="line">(message) =&gt; Console.WriteLine(message); <span class="comment">// 单语句可以是一个函数，并且能接受对应的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多语句，必须加 &#123; &#125;</span></span><br><span class="line">(x,y) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-面向对象-类"><a class="header-anchor" href="#六-面向对象-类">¶</a>六、面向对象——类</h1><h2 id="6-1-类的成员"><a class="header-anchor" href="#6-1-类的成员">¶</a>6.1 类的成员</h2><p>C#中，类有三个成员：</p><ul><li>字段<ul><li>静态</li><li>非静态</li></ul></li><li>属性<ul><li>静态</li><li>非静态</li></ul></li><li>方法/函数<ul><li>构造方法</li><li>自定义方法</li><li>析构函数</li></ul></li></ul><p>一般格式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] [<span class="keyword">static</span>] <span class="keyword">class</span> <span class="title">ClassName</span>[&lt;泛型&gt;] [:<span class="title">Father</span>]</span><br><span class="line">&#123;</span><br><span class="line">    [字段];</span><br><span class="line">    [属性];</span><br><span class="line">    [方法];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>类名命名规则符合 Pascal 规范。每个单词的首字母都要大写，其余字母小写。比如：MyFirstClass</li><li>静态类和动态类有区别，成员也有就静态和动态的区别，默认为私有、动态类。（这里在随后进行详细说明）</li><li>如果要访问类的成员，你要使用点（.）运算符。</li><li>点运算符链接了对象（或类）的名称和成员的名称。</li></ol><h3 id="6-1-1-字段"><a class="header-anchor" href="#6-1-1-字段">¶</a>6.1.1 字段</h3><p>字段是在类或结构中直接声明的任意类型的变量。 字段是其包含类型的成员。</p><p>字段(field) 用来存储数值或对象的真正实体</p><p>注意：</p><ul><li><p>命名规则：</p><ul><li>Camel。骆驼命名规范。变量名中首单词的首字母要小写，其余单词的首字母要大写。</li><li>类的字段一般以<strong>下划线</strong>开头。</li></ul></li></ul><h3 id="6-1-2-属性"><a class="header-anchor" href="#6-1-2-属性">¶</a>6.1.2 属性</h3><p>属性从外部看起来像字段，但在内部它们包含逻辑。一个属性被声明为一个字段，但是添加了一个 get / set 块。</p><p>以下是如何实现 CurrentPrice 作为属性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">decimal</span> _currentPrice;       <span class="comment">// The private &quot;backing&quot; field、</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> CurrentPrice <span class="comment">// The public property</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> _currentPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">          _currentPrice = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性的作用：保护字段，对字段的赋值、取值进行限定</p><ul><li>当给属性赋值时，会执行 set 方法</li><li>当给属性输出时，会执行 get 方法</li></ul><p>注意：</p><ul><li>命名规则符合 Pascal 规范。</li></ul><h3 id="6-1-3-构造方法"><a class="header-anchor" href="#6-1-3-构造方法">¶</a>6.1.3 构造方法</h3><p>作用：帮助我们给初始化对象（给每个属性依次赋值）</p><p>构造函数是一种特殊的方法；当在实例化类的时候，自动执行函数里面的内容（参考 python 的_**_init__**构造方法）</p><ol><li>构造方法没有返回值，连 void 也不能写</li><li>构造方法的名称必须跟类名一致</li><li>构造方法可以重载</li><li>每写好一个类，就会自带一个无参数的构造方法，<strong>当写了一个构造函数后，默认的无参构造方法就会消失</strong>。</li></ol><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stuident</span>()<span class="comment">//必须是public</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        xxxxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-4-💎this💎-关键字"><a class="header-anchor" href="#6-1-4-💎this💎-关键字">¶</a>6.1.4 💎this💎 关键字</h3><p>this 是 C#中的保留字，</p><ol><li><p>作用 1 ：</p><ul><li>它允许一个对象指向它自己，即 this 表示当前正在被操作的对象本身。</li><li>在方法内部，this 引用可以用于指向任何当前执行的对象。</li><li>经常地，this 引用用于区分构造函数的参数和它们相对应的同名的实例变量。</li></ul><p>例如，当一个类有三个字段，实例化后的对象有<code>number、name、owner</code>三个属性。我们在初始化时，可以使用以下方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Money</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> _number;</span><br><span class="line">    <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="built_in">string</span> _owner;</span><br><span class="line">    <span class="function">Public <span class="title">Money</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">string</span> b, <span class="built_in">string</span> c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _number = a;</span><br><span class="line">        _name = b;</span><br><span class="line">        _owner = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Money instance = <span class="keyword">new</span> Money(<span class="number">1</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是上述方法存在一些问题：为了让类的字段和初始化时传入类的参数做区别，特别的将变量的名称写成不一样的，这样降低了程序代码的可读性。因此可以使用 this 关键字对当前对象进行引用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Money</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> _number;</span><br><span class="line">    <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="built_in">string</span> _owner;</span><br><span class="line">    <span class="function">Public <span class="title">Money</span>(<span class="params"><span class="built_in">int</span> number, <span class="built_in">string</span> name, <span class="built_in">string</span> owner</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._number = number;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等号前面指的是当前操作对象的某一个类成员，后者是传入到类的参数。因此将二者进行了区分。</p></li><li><p>作用 2 ：</p><p>构造函数重载时，将重载的构造函数的参数传递给其他构造函数，并且使其初始化类。 例如，下面的 Person 类有三个构造方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">this</span>关键字测试</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _id;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> _name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _gender;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">int</span> gender, <span class="built_in">int</span> age</span>)：</span></span><br><span class="line">        &#123;</span><br><span class="line">            _id = id;</span><br><span class="line">            _name = name;</span><br><span class="line">            _gender = gender;</span><br><span class="line">            _age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">int</span> gender</span>) : <span class="title">this</span>(<span class="params">id, <span class="string">&quot;www&quot;</span>, gender, <span class="number">20</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//_id = id;</span></span><br><span class="line">            <span class="comment">//_gender = gender;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">        &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">            Person person1 = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，当我们 new 创建类的实例化对象时，会调用类的构造函数对类进行初始化。当有多个构造函数时，<strong>会根据传入的参数列表自动选择对应的构造函数</strong>。但是，我们不希望在每个构造函数中，都写一遍初始化语句。因此，我们可以使用 this 关键字，将当前选择的构造函数中已经接收到的参数列表，传给另一个构造函数，<u>多余的参数不用写，缺省的参数要补上</u>。然后<strong>先执行接收 this 传递的参数列表的构造函数，再执行 new 时自动选择的构造函数</strong>。</p></li></ol><h3 id="6-1-5-析构函数"><a class="header-anchor" href="#6-1-5-析构函数">¶</a>6.1.5 析构函数</h3><ul><li>当程序结束的时候或者类不在被调用的时候，析构函数才运行</li><li>该函数可以帮助我们释放资源</li><li>GC Garbage Collection 垃圾回收，因此，在实际开发中，析构函数并不常用</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~Student()</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我是析构函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-类的构造和实例化"><a class="header-anchor" href="#6-2-类的构造和实例化">¶</a>6.2 类的构造和实例化</h2><h3 id="6-2-1-类的构造"><a class="header-anchor" href="#6-2-1-类的构造">¶</a>6.2.1 类的构造</h3><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] [<span class="keyword">static</span>] <span class="keyword">class</span> <span class="title">ClassName</span>[&lt;泛型&gt;] [:<span class="title">Father</span>]</span><br><span class="line">&#123;</span><br><span class="line">    [字段];</span><br><span class="line">    [属性];</span><br><span class="line">    [方法];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2-类的实例化"><a class="header-anchor" href="#6-2-2-类的实例化">¶</a>6.2.2 类的实例化</h3><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假如有个类：Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类的实例化</span></span><br><span class="line">Student zhangsan = <span class="keyword">new</span> Student([参数列表]);</span><br></pre></td></tr></table></figure><p>实例化的对象是：zhangsan，该对象的类型为：Student。括号里面是传入到类中的可选参数。</p><p><code>new</code>针对类实例化的作用：</p><ol><li>在内存中开辟一块<strong>新的空间</strong>（堆区）</li><li>调用类的构造方法</li><li><strong>所有的构造方法执行完毕，对象才会被创建</strong></li></ol><blockquote><p><code>new</code>还有其他的一些用法，比如创建变量等，具体功能根据实际代码而定。</p></blockquote><h2 id="6-3-封装"><a class="header-anchor" href="#6-3-封装">¶</a>6.3 封装</h2><h3 id="6-3-1-访问修饰符"><a class="header-anchor" href="#6-3-1-访问修饰符">¶</a>6.3.1 访问修饰符</h3><p><strong>封装</strong> 被定义为&quot;把一个或多个项目封闭在一个物理的或者逻辑的包中&quot;。在面向对象程序设计方法论中，封装是为了防止对实现细节的访问。</p><p>抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使开发者实现所需级别的抽象。</p><p>C# 封装根据具体的需要，设置使用者的访问权限，并通过 <strong>访问修饰符</strong> 来实现。</p><p>一个 <strong>访问修饰符</strong> 定义了一个类成员的范围和可见性。C# 支持的访问修饰符如下所示：</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:left">所有对象都可以访问</td></tr><tr><td style="text-align:center">protected internal</td><td style="text-align:left">访问限于当前程序集或派生自包含类的类型</td></tr><tr><td style="text-align:center">internal</td><td style="text-align:left">同一个程序集的对象可以访问</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:left">只有该类对象及其子类对象可以访问</td></tr><tr><td style="text-align:center">private（默认）</td><td style="text-align:left">对象本身在对象内部可以访问</td></tr></tbody></table><ul><li>Public 访问修饰符：允许一个类将其成员变量和成员函数暴露给其他的函数和对象。任何公有成员可以被外部的类访问。</li><li>Protected Internal 访问修饰符：允许在本类,派生类或者包含该类的程序集中访问。这也被用于实现继承。</li><li>Internal 访问修饰符：允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。换句话说，带有 internal 访问修饰符的任何成员，可以被定义在该成员所定义的<strong>应用程序内</strong>的任何类或方法访问。</li><li>Protected 访问修饰符：允许子类访问它的基类的成员变量和成员函数。这样有助于实现继承。</li><li>Private 访问修饰符：允许一个类将其成员变量和成员函数对其他的函数和对象进行隐藏。只有同一个类中的函数可以访问它的私有成员。即使是类的实例也不能访问它的私有成员。</li></ul><p>类比理解：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">比如说：一个人 A 为父类，他的儿子 B，妻子 C，私生子 D（注：D 不在他家里）</span><br><span class="line"></span><br><span class="line">如果我们给 A 的事情增加修饰符：</span><br><span class="line"></span><br><span class="line">public 事件，地球人都知道，全公开</span><br><span class="line">protected internal 事件，A，B，C，D 都知道,其它人不知道</span><br><span class="line">internal 事件，A，B，C 知道（A 家里人都知道，私生子 D 不知道）</span><br><span class="line">protected 事件，A，B，D 知道（A 和他的所有儿子知道，妻子 C 不知道）</span><br><span class="line">private 事件，只有 A 知道（隐私？心事？）</span><br></pre></td></tr></table></figure><hr><p>在 C# 中，不同类型的成员具有不同的默认访问修饰符。以下是各种类型的成员及其默认访问修饰符的列表：</p><ol><li><strong>类（Class）</strong>：如果没有指定访问修饰符，默认为 <code>internal</code>。这意味着这个类只能在定义它的程序集内部访问。</li><li><strong>结构体（Struct）</strong>：与类相同，如果没有指定访问修饰符，默认为 <code>internal</code>。结构体和它们的成员只能在定义它们的程序集内部访问。</li><li><strong>接口（Interface）</strong>：与类和结构体相同，如果没有指定访问修饰符，默认为 <code>internal</code>。接口和它们的成员只能在定义它们的程序集内部访问。</li><li><strong>枚举（Enum）</strong>：与类、结构体和接口相同，如果没有指定访问修饰符，默认为 <code>internal</code>。枚举类型和它们的成员只能在定义它们的程序集内部访问。</li><li><strong>委托（Delegate）</strong>：与类、结构体、接口和枚举相同，如果没有指定访问修饰符，默认为 <code>internal</code>。委托类型只能在定义它们的程序集内部访问。</li><li><strong>类和结构体的成员</strong>：类和结构体的成员具有不同的默认访问修饰符，具体如下：<ul><li><strong>字段（Field）</strong>：如果没有指定访问修饰符，默认为 <code>private</code>。这意味着字段只能在声明它的类或结构体内部访问。</li><li><strong>方法（Method）</strong>：如果没有指定访问修饰符，默认为 <code>private</code>。这意味着方法只能在声明它的类或结构体内部访问。</li><li><strong>属性（Property）</strong>：如果没有指定访问修饰符，默认为 <code>private</code>。这意味着属性只能在声明它的类或结构体内部访问。</li><li><strong>事件（Event）</strong>：如果没有指定访问修饰符，默认为 <code>private</code>。这意味着事件只能在声明它的类或结构体内部访问。</li><li><strong>构造函数（Constructor）</strong>：如果没有指定访问修饰符，默认为 <code>private</code>。这意味着构造函数只能在声明它的类或结构体内部访问。</li><li><strong>嵌套类型（Nested Type）</strong>：例如嵌套类、嵌套结构体、嵌套接口和嵌套枚举，默认访问修饰符为 <code>private</code>。这意味着嵌套类型只能在声明它的外部类型内部访问。</li></ul></li></ol><p>请注意，这些默认访问修饰符可以通过显式指定访问修饰符（例如 <code>public</code>、<code>protected</code>、<code>internal</code> 或 <code>private</code>）来修改。</p><h2 id="6-4-继承"><a class="header-anchor" href="#6-4-继承">¶</a>6.4 继承</h2><p>继承是面向对象程序设计中最重要的概念之一。继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。</p><p>当创建一个类时，程序员不需要完全重新编写新的数据成员和成员函数，只需要设计一个新的类，继承了已有的类的成员即可。这个已有的类被称为的 <strong>基类</strong>，这个新的类被称为<strong>派生类</strong>。</p><p>我们可能会在一些类中写重复的成员，我们可以将这些重复的成员，单独的封装到一个类中，作为这些类的<strong>父类</strong>（基类），那么，这些类就叫做<strong>父类</strong>的<strong>子类</strong>（派生类）。</p><p>类可以从另一个类继承以扩展或定制原始类。继承一个类会重用该类中的功能。类只能从一个类继承。</p><h3 id="6-4-1-继承的语法"><a class="header-anchor" href="#6-4-1-继承的语法">¶</a>6.4.1 继承的语法</h3><p>继承的格式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    xxxxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    xxxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    xxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>子类可以从父类中继承：字段、属性、方法</p></li><li><p>子类不能继承父类的<strong>私有</strong>的字段、属性、方法</p></li><li><p>父类不能从子类中调用成员</p></li><li><p><strong>子类没有继承父类的构造函数，子类会默认的调用父类的无参构造方法</strong></p><ol><li><p>子类用 new 实例化时，首先会默认的调用父类的无参构造方法，这一过程是为了创建父类的实例化对象，让子类能使用父类中的成员</p></li><li><p>然后父类的无参构造函数执行完，才会执行自己的构造方法。</p></li><li><p>父类会默认地自带一个无参构造方法，但是<strong>父类中存在有参的构造函数时，默认的无参构造函数就会消失</strong>，这时候创建子类时，会报错。</p></li><li><p>因此，在定义含有<strong>有参构造函数</strong>的父类时，一般需手动定义一个无参的构造函数，以便于让子类调用。</p></li></ol></li><li><p>在子类中显示调用父类的构造函数，使用关键字：base</p><p>使用此方法一般不用手动构造无参的构造函数，因为子类这时会直接调用父类对应的构造方法（如果父类有有参构造方法，而子类 base 的是父类的无参构造方法，那么还是需要手动在父类中创建无参构造方法），而子类中，一旦含有不使用 base 的构造方法，那么父类就必须存在无参构造方法。</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"><span class="built_in">string</span> name , <span class="built_in">int</span> age , <span class="built_in">char</span> gender</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">        ........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name ,<span class="built_in">int</span> age , <span class="built_in">char</span> gender</span>) : <span class="title">base</span> (<span class="params">name , age , gender</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>继承的单根性：一个子类只能有一个父类</li><li>继承的传递性：子类能继续被继承</li></ol><h3 id="6-4-2-里氏转换"><a class="header-anchor" href="#6-4-2-里氏转换">¶</a>6.4.2 里氏转换</h3><ol><li>子类可以赋值给父类：如果有一个地方需要父类作为参数，我们可以给一个子类代替父类</li><li>如果父类对象参数中装的是子类对象，那么可以将这个父类对象强转为子类对象</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PersonSay</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是父类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StudentSay</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TeacherSay</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是老师&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//里氏转换</span></span><br><span class="line">        <span class="comment">//子类赋值给父类</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">/*或者*/</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        Person p = s;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//现在父类p中装的是子类对象s，那么可以将这个父类对象强转为子类对象</span></span><br><span class="line">        Student ss = (Student)p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-3-is-与-as-关键字"><a class="header-anchor" href="#6-4-3-is-与-as-关键字">¶</a>6.4.3 is 与 as 关键字</h3><ul><li><p><strong><code>is</code></strong>：表示类型转换，如果能够转换成功，则返回一个 ture，如果转换失败，则返回一个 false</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略上述 6.4.2 的代码</span></span><br><span class="line"><span class="keyword">if</span>（p <span class="keyword">is</span> teacher）</span><br><span class="line">&#123;</span><br><span class="line">    Teacher ss = (Teacher)p;</span><br><span class="line">    ss.TeacherSay();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;转换成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;转换失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果是:转换失败</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>as</code></strong>：表示类型转换，如果能够转换成功，则返回<strong>对应的对象</strong>，否则返回一个 null</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略上述 6.4.2 的代码</span></span><br><span class="line"><span class="keyword">if</span>（p <span class="keyword">is</span> teacher）</span><br><span class="line">&#123;</span><br><span class="line">    Teacher ss = (Teacher)p;</span><br><span class="line">    ss.TeacherSay();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;转换成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;转换失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是:转换失败</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-4-4-装箱与拆箱"><a class="header-anchor" href="#6-4-4-装箱与拆箱">¶</a>6.4.4 装箱与拆箱</h3><p><strong>对象（Object）类型</strong> 是 C# 通用类型系统中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型（引用类型）时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型（引用类型）转换为值类型时，则被称为 <strong>拆箱</strong>。能否装箱或拆箱，要看两种类型之间有无继承关系，有继承关系，就能发生装箱和拆箱。</p><blockquote><p>注意：装箱过程存在类型的转换，因此在程序运行时，需要更多的时间。</p></blockquote><h2 id="6-5-多态"><a class="header-anchor" href="#6-5-多态">¶</a>6.5 多态</h2><p>这里先通过一个例子，来展示父类对象变量装载的是子类对象时，父类、子类同名方法的调用问题。例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 多态之虚方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//父类对象</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> _name;<span class="comment">//字段</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">        &#123;; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;<span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;<span class="comment">//属性</span></span><br><span class="line">        <span class="comment">//父类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是人类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">China</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用父类的构造方法进行实例化</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">China</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;; &#125;</span><br><span class="line">        <span class="comment">//子类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是&#123;0&#125;人&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Japanese</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Japanese</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是&#123;0&#125;人&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Korea</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Korea</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是&#123;0&#125;人&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">American</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">American</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是&#123;0&#125;人&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建子类对象</span></span><br><span class="line">            China ch1 = <span class="keyword">new</span> China(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">            Japanese j1 = <span class="keyword">new</span> Japanese(<span class="string">&quot;日本&quot;</span>);</span><br><span class="line">            Korea k = <span class="keyword">new</span> Korea(<span class="string">&quot;韩国&quot;</span>);</span><br><span class="line">            American a = <span class="keyword">new</span> American(<span class="string">&quot;美国人&quot;</span>);</span><br><span class="line">            <span class="comment">//创建父类对象数组，并把子类对象装载进去</span></span><br><span class="line">            Person[] person = &#123; ch1, j1, k, a &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                person[i].SayHello();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是人类</span><br><span class="line">我是人类</span><br><span class="line">我是人类</span><br><span class="line">我是人类</span><br></pre></td></tr></table></figure><p>表明：如果父类和子类中有相同的方法时，那么根据当前操作的对象的类型，执行相应的方法。子类变量会执行子类的方法，父类变量执行父类的方法。</p><p>首先我们理解，<code>Person[] person = &#123; ch1, j1, k, a &#125;</code> 变量类型是<code>Person</code>，但是父类变量中装载的子类对象。</p><p>我们将 for 循环中，添加下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (person[i] <span class="keyword">is</span> China)</span><br><span class="line">&#123;</span><br><span class="line">    ((China)person[i]).SayHello();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (person[i] <span class="keyword">is</span> Japanese)</span><br><span class="line">&#123;</span><br><span class="line">    ((Japanese)person[i]).SayHello();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (person[i] <span class="keyword">is</span> Korea)</span><br><span class="line">&#123;</span><br><span class="line">    ((Korea)person[i]).SayHello();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (person[i] <span class="keyword">is</span> American)</span><br><span class="line">&#123;</span><br><span class="line">    ((American)person[i]).SayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我是中国人</span><br><span class="line">我是人类</span><br><span class="line">我是日本人</span><br><span class="line">我是人类</span><br><span class="line">我是韩国人</span><br><span class="line">我是人类</span><br><span class="line">我是美国人人</span><br><span class="line">我是人类</span><br></pre></td></tr></table></figure><p>表明：如果父类和子类中有相同的方法时，那么根据当前操作的对象的类型，执行相应的方法。子类变量会执行子类的方法，父类变量执行父类的方法。</p><hr><p>多态的直接定义：让一个类能够表现出多种类型的状态（类型）。实现多态的 3 种手段：</p><ol><li>虚方法</li><li>抽象类</li><li>接口</li></ol><p><strong>静态多态性</strong>：在编译时，函数和对象的连接机制被称为早期绑定，也被称为静态绑定。C# 提供了两种技术来实现静态多态性。分别为：</p><ul><li>函数重载</li><li>运算符重载</li></ul><p><strong>动态多态性</strong>：使用关键字 <strong><code>abstract</code></strong> 创建<strong>抽象类</strong>，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p><p>下面是有关抽象类的一些规则：</p><ul><li>您不能创建一个抽象类的实例，因此抽象类必须被继承才能实例化</li><li>您不能在一个抽象类外部声明一个抽象方法，即抽象方法只能写在抽象类中</li><li>通过在类定义前面放置关键字 <strong><code>sealed</code></strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong><code>sealed</code></strong> 时，它不能被继承。抽象类不能被声明为 <code>sealed</code>。</li></ul><h3 id="6-5-1-虚方法"><a class="header-anchor" href="#6-5-1-虚方法">¶</a>6.5.1 虚方法</h3><p>抽象方法是需要子类去实现的。<strong>虚方法是已经实现了的，可以被子类覆盖，也可以不覆盖，取决于需求</strong>。</p><p>虚方法可以有实现体，若一个实例方法的声明中含有 <code>virtual</code> 修饰符，则称该方法为虚方法。使用了 <code>virtual</code> 修饰符后，不允许再有 <code>static</code>、<code>abstract</code> 或者 <code>override</code> 修饰符。</p><p><strong>父类的虚方法，可以在子类中重写</strong>（<code>override</code>），此时，再在父类对象中执行该方法，就会只执行对应子类对象的重写的方法。</p><p>例如，将上面的 Person 父类的 <code>SayHello()</code> 方法写为：添加修饰符 <code>virtual</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我是人类&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把每个子类里面的 <code>SayHello()</code> 方法写为：添加修饰符 <code>override</code> ：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我是&#123;0&#125;人&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行多态的代码，就会得到以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是中国人</span><br><span class="line">我是日本人</span><br><span class="line">我是韩国人</span><br><span class="line">我是美国人</span><br></pre></td></tr></table></figure><p>表明：父类变量里装载的是子类对象，在把父类方法定义为虚方法，并且子类进行重写后，再调用父类对象的方法时，只会执行相应的子类对象的方法。</p><p>如果想不仅能执行子类中重写的方法，还能同时执行父类中的虚方法，我么可以在<strong>子类中重写的方法中调用父类的虚方法</strong>。基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public override void FunctionName()</span><br><span class="line">&#123;</span><br><span class="line">    base.FunctionName();</span><br><span class="line">    [方法体;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>总结：当父类变量里装载的是子类对象。在父类中定义虚方法，并在子类中重写这个方法，那么调用父类变量的方法时，就会只执行子类中重写的方法；如果子类没有重写，那么还是会调用自身的方法。</p><h3 id="6-5-2-抽象类"><a class="header-anchor" href="#6-5-2-抽象类">¶</a>6.5.2 抽象类</h3><p>例如，狗狗会叫，猫猫也会叫，但是狗狗不能作为猫猫的父类，猫猫也不能作为狗狗的父类，因此需要抽象出一个类：动物（<code>animal</code>）。与狗狗类和猫猫类不同的是，动物类不能直接实例化出一个对象，因为范围太大，不确定是狗狗还是猫猫还是其他等，而狗狗类就能实例化出对象（具体的某个狗狗）。</p><p>当父类中的方法不知道怎么去实现的时候，可以把父类定义为抽象类，将方法写成抽象方法。使用 <code>abstract</code> 修饰。</p><p>我们可以写下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 抽象类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">            animal.Bark();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Bark</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//空实现的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bark</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;狗狗会汪汪汪&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bark</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猫猫会喵喵喵&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">狗狗会汪汪汪</span><br></pre></td></tr></table></figure><p>因此，我们知道，当一个抽象父类变量装载子类对象时，调用的方法均是子类的方法。</p><p>抽象类有以下性质：</p><ol><li>抽象类不允许创建该类实例对象，但可以创建该类的子类对象</li><li>抽象方法只能存在于抽象类中，并且没有方法体，即没有大括号，但是结尾要加分号 <code>;</code></li><li>抽象类包含<ol><li>字段</li><li>属性</li><li>抽象属性</li><li>方法</li><li>抽象方法</li><li>虚方法</li></ol></li></ol><p>抽象方法和虚方法的区别：</p><ol><li><p>抽象方法是没有实现的方法，需要由子类去实现，而虚方法是有默认实现的方法，子类可以选择覆盖或者不覆盖。</p></li><li><p>抽象方法用 abstract 关键字来定义，而虚方法用 virtual 关键字来定义。</p></li><li><p>抽象方法必须放在抽象类或者接口中，而虚方法可以放在普通的类中。</p></li><li><p><strong>抽象方法没有方法体，而虚方法有默认的方法体</strong>。</p></li><li><p><strong>子类继承抽象类或者实现接口时，必须实现抽象方法，否则子类也要声明为抽象类</strong>；而子类继承类中的虚方法时，可以选择性地覆盖或者不覆盖。</p></li></ol><p>总之，抽象方法和虚方法都是为了实现多态性而存在的，它们的主要区别在于抽象方法是强制性的，需要子类去实现，而虚方法是可选的，子类可以选择覆盖或者不覆盖。</p><h3 id="6-5-3-接口"><a class="header-anchor" href="#6-5-3-接口">¶</a>6.5.3 接口</h3><p>接口定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分。</p><p>接口定义了属性、方法和事件，这些都是接口的成员。<strong>接口只包含了成员的声明</strong>。成员的定义是派生类的责任。接口提供了派生类应遵循的标准结构。接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类。</p><p><strong>接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约</strong>。</p><p>接口的特点：</p><ul><li>接口命名一般在开头加上大写字母 “I”</li><li>接口中的方法，不允许写方法体，并且继<strong>承该接口的类中，必须有实现该方法的方法体</strong></li><li>接口成员不允许使用访问修饰符</li><li>接口没有字段，但是可以有常量</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">GetName</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-部分类和密封类"><a class="header-anchor" href="#6-6-部分类和密封类">¶</a>6.6 部分类和密封类</h3><h3 id="6-6-1-部分类"><a class="header-anchor" href="#6-6-1-部分类">¶</a>6.6.1 部分类</h3><p>在同一个命名空间下，不允许创建两个名字相同的类，但是可以创建部分类。部分类使用 <code>partial</code> 关键字修饰，同一类的部分类的名字是相同的，基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分类其实本质上是一个类，只不过将一个类里面的内容分开描述，部分类之间互通的。</p><h3 id="6-6-2-密封类"><a class="header-anchor" href="#6-6-2-密封类">¶</a>6.6.2 密封类</h3><p>当我们创建一个类，但是不想让这个类被继承，可以使用 <code>sealed</code> 关键字修饰，表示不能被继承的密封类。基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-base-与-this-关键字"><a class="header-anchor" href="#6-6-base-与-this-关键字">¶</a>6.6 base 与 this 关键字</h2><h3 id="6-6-1-base-关键字"><a class="header-anchor" href="#6-6-1-base-关键字">¶</a>6.6.1 base 关键字</h3><p>在 C# 中，当我们使用 new 关键字，创建一个子类对象的时候，会自动调用父类的无参构造方法。但是，如果父类中有多个构造方法，我们如何去调用其他类型的构造方法呢？</p><p><code>base</code> 关键字，能够使我们显式的调用父类中对应的构造方法，具体调用哪一个，是要根据传入的参数确定的。并且当我们使用 <code>base</code> 指定对应的构造方法后， 子类便不在自动调用父类的无参构造方法。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">bool</span> _isBoy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">bool</span> isBoy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">        <span class="keyword">this</span>._isBoy = isBoy;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;父类构造函数(有参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;父类构造函数(无参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> _school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类构造函数，使用base关键字调用父类对应的有参的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">bool</span> isBoy, <span class="built_in">string</span> school</span>) : <span class="title">base</span>(<span class="params">name, age, isBoy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._school = school;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子类构造函数(有参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子类构造函数(无参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="literal">true</span>, <span class="string">&quot;清华大学&quot;</span>); <span class="comment">//调用父类的有参构造函数</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(); <span class="comment">//调用父类的无参构造函数</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类构造函数(有参)</span><br><span class="line">子类构造函数(有参)</span><br><span class="line">父类构造函数(无参)</span><br><span class="line">子类构造函数(无参)</span><br></pre></td></tr></table></figure><h3 id="6-6-2-this-关键字"><a class="header-anchor" href="#6-6-2-this-关键字">¶</a>6.6.2 this 关键字</h3><p><code>this</code> 关键字与 <code>base</code> 类似，不同的是，它是调用<strong>当前类</strong>中对应参数的构造方法，并且如果在子类中使用，那么 new 一个对象的时候，是 <code>父类构造方法 -&gt; 子类中被this的构造方法 -&gt; 子类中this构造方法</code> 。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> _name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">bool</span> _isBoy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">bool</span> isBoy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">        <span class="keyword">this</span>._isBoy = isBoy;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;父类构造函数(有参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;父类构造函数(无参)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> _school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类构造函数，使用base关键字调用父类对应的有参的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">bool</span> isBoy, <span class="built_in">string</span> school</span>) : <span class="title">base</span>(<span class="params">name, age, isBoy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._school = school;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子类构造函数(有参1)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params">String name</span>) : <span class="title">this</span>(<span class="params">name, <span class="number">0</span>, <span class="literal">true</span>, <span class="string">&quot;清华大学&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;子类构造函数(有参2)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="literal">true</span>, <span class="string">&quot;清华大学&quot;</span>); <span class="comment">//调用父类的有参构造函数</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;小行&quot;</span>); <span class="comment">//调用父类的无参构造函数</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父类构造函数(有参)</span><br><span class="line">子类构造函数(有参<span class="number">1</span>)</span><br><span class="line">父类构造函数(有参)</span><br><span class="line">子类构造函数(有参<span class="number">1</span>)</span><br><span class="line">子类构造函数(有参<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="说明"><a class="header-anchor" href="#说明">¶</a>说明</h1><h2 id="环境配置"><a class="header-anchor" href="#环境配置">¶</a>环境配置</h2><ul><li>开发工具：<a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio 2022 专业版</a></li><li>.NET Framework ：4.7.2</li></ul><h2 id="更新日志"><a class="header-anchor" href="#更新日志">¶</a>更新日志</h2><details class="folding-tag" ><summary> 更新日志 </summary>              <div class='content'>              <div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-6-14</p></div></div><div class='timeline-item-content'><ol><li>在 <a href="#6-6-base%E4%B8%8Ethis%E5%85%B3%E9%94%AE%E5%AD%97">6.6 base 与 this 关键字</a> 部分，添加了与构造方法有关的两个关键字：base 与 this</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-31</p></div></div><div class='timeline-item-content'><ol><li>在 <a href="#6-3-1-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">6.3.1 访问修饰符</a> 部分，添加了各种类型的默认访问级别。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-30</p></div></div><div class='timeline-item-content'><ol><li>完善了抽象类的组成</li><li>增加了匿名方法的定义以及使用</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-23</p></div></div><div class='timeline-item-content'><ol><li>在 “前言” 部分，新增了对代码规范的链接</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-19</p></div></div><div class='timeline-item-content'><ol><li>在<a href="#2-6-%E5%8F%AF%E7%A9%BA%E7%B1%BB%E5%9E%8B-%F0%9F%92%96%F0%9F%92%96%F0%9F%92%96">2.6 可空类型 💖💖💖</a>中，添加了 <code>?.</code> 的使用方法</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-12</p></div></div><div class='timeline-item-content'><ol><li>在<a href="#2-6-%E5%8F%AF%E7%A9%BA%E7%B1%BB%E5%9E%8B-%F0%9F%92%96%F0%9F%92%96%F0%9F%92%96">2.6 可空类型 💖💖💖</a>中，添加了 <code>??=</code> 的用法</li><li>添加<a href="#2-4-7-lambda-%E8%BF%90%E7%AE%97%E7%AC%A6">2.4.7 lambda 运算符</a> 目录，并向其添加了<code>=&gt;</code> 运算符的用法</li><li>在<a href="#2-5-4-%E5%8D%A0%E4%BD%8D%E7%AC%A6">2.5.4 占位符</a>中，添加了 <code>$符</code> 的用法</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-5-10</p></div></div><div class='timeline-item-content'><ol><li>添加了文章 <strong>前言</strong> 部分</li></ol></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
          <category> Csharp </category>
          
          <category> Unity3D基础 </category>
          
          <category> Csharp基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> Csharp </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 教程 </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/04.Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
      <url>/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/04.Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-初识-python"><a class="header-anchor" href="#第一章-初识-python">¶</a>第一章 初识 Python</h1><h2 id="1-1-python-简介"><a class="header-anchor" href="#1-1-python-简介">¶</a>1.1 Python 简介</h2><h3 id="1-1-1-什么是-python"><a class="header-anchor" href="#1-1-1-什么是-python">¶</a>1.1.1 什么是 Python</h3><p>Python，发音是[ˈpaɪθɑn]，本意是“蟒蛇”（这里需要说明的是，Python 并不是以蟒蛇命名，而是以电视节目 Monty Python’s Flying Circus 来命名的）。它是 1989 年由荷兰人 Guido van Rossum 发明的一种<strong>面向对象的解释型高级语言</strong>。</p><p>Python 有着简单、开发速度快、节省时间和精力的特点。</p><p>Python 本身并非所有与的特性和功能都集成到语言核心，而是被设计为可扩充。它具有丰富和强大的库，能够把用其他语言（尤其是 C++）制作的各种模块很轻松的联结在一起。为此，Python 常称为”胶水“语言。</p><h3 id="1-1-2-python-的版本"><a class="header-anchor" href="#1-1-2-python-的版本">¶</a>1.1.2 Python 的版本</h3><p>Python 自发布以来，主要经历三个版本的变化。</p><ul><li>1994 年发布的 Python 1.0 版本（已过时）</li><li>2000 年发布的 Python 2.0 版本 （逐渐淘汰）</li><li>2008 年发布的 Python 3.0 版本（初学者首选）</li></ul><p>Python 在版本升级时，并不是向下兼容的。</p><h3 id="1-1-3-python-都能做些什么"><a class="header-anchor" href="#1-1-3-python-都能做些什么">¶</a>1.1.3 Python 都能做些什么</h3><p>Python 作为一种功能强大，并且简单易学的编程语言而广受好评。</p><ol><li>Web 开发</li><li>大数据处理</li><li>人工智能</li><li>自动化运维开发</li><li>云计算</li><li>爬虫</li><li>游戏开发</li></ol><blockquote><p>以下代码将会使用 Pycharm2022.1.3 编译器以及 Python 3.7.2 版本</p></blockquote><h2 id="1-2-搭建-python-开发环境"><a class="header-anchor" href="#1-2-搭建-python-开发环境">¶</a>1.2 搭建 Python 开发环境</h2><h3 id="1-2-1-开发环境概述"><a class="header-anchor" href="#1-2-1-开发环境概述">¶</a>1.2.1 开发环境概述</h3><h3 id="1-2-2-安装-python-解释器"><a class="header-anchor" href="#1-2-2-安装-python-解释器">¶</a>1.2.2 安装 Python 解释器</h3><h1 id="第二章-python-语言基础"><a class="header-anchor" href="#第二章-python-语言基础">¶</a>第二章 Python 语言基础</h1><h2 id="2-1-python-语法的特点"><a class="header-anchor" href="#2-1-python-语法的特点">¶</a>2.1 Python 语法的特点</h2><p>学习 Python 需要了解它的语法特点，如：注释规则、代码缩进、编码规范等。下面将对学习 Python 时首先需要了解的这些语法特点进行详细介绍。</p><h3 id="2-1-1-注释规则"><a class="header-anchor" href="#2-1-1-注释规则">¶</a>2.1.1 注释规则</h3><p>在代码中添加的标注行文字，从而帮助程序员更好的阅读代码。注释的内容将被 Python 解释器忽略，并不会在执行结果种体现出来。</p><p>在 Python 中，通常包括 3 种类型的注释，分别是：单行注释、多行注释和中文注释。</p><ol><li><p>单行注释</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释内容</span></span><br></pre></td></tr></table></figure><p>​    在 Python 中，使用 “#” 作为单行注释的符号。从符号“#”开始，直到换行结束，其后面所有的内容都会作为注释内容。</p></li><li><p>多行注释</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>​    多行注释通常用来为 Python 文件、模块、类或者函数（方法）等添加版权、功能信息。</p></li><li><p>中文注释</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:编码 -*-</span></span><br></pre></td></tr></table></figure><p>​    或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding = 编码</span></span><br></pre></td></tr></table></figure><p>​    该注释的出现主要是为了解决 Python 2.x 中不支持直接写中文的情况。虽然在 Python 3.X 中，该问题已经不复存在。但是为了规范页面的编码，也为了方便其他人及时了解文件所使用的编码，建议在文件开头加上中文注释。</p></li></ol><h3 id="2-1-2-代码缩进"><a class="header-anchor" href="#2-1-2-代码缩进">¶</a>2.1.2 代码缩进</h3><p>Python 不像其他程序语言一样，采用大括号“{ }”分隔代码块，而是采用代码缩进和冒号 “:” 区分代码之间的层次。</p><p>例如，下面的代码中的缩进：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="built_in">float</span>( <span class="built_in">input</span>( <span class="string">&quot;请输入你的身高：&quot;</span> ) )</span><br><span class="line">weight = <span class="built_in">float</span>( <span class="built_in">input</span>( <span class="string">&quot;请输入你的体重：&quot;</span> ) )</span><br><span class="line">bmi = weight / (height * height)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断身材是否合理</span></span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18.5</span> :</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;体重过轻&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bmi &gt;= <span class="number">18.5</span> <span class="keyword">and</span> bmi &lt; <span class="number">24.9</span> :</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;正常范围&quot;</span> )</span><br><span class="line"><span class="keyword">if</span> bmi &gt;= <span class="number">24.9</span> <span class="keyword">and</span> bmi &lt; <span class="number">29.9</span> :</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;体重过重&quot;</span> )</span><br></pre></td></tr></table></figure><h3 id="2-1-3-编码规范"><a class="header-anchor" href="#2-1-3-编码规范">¶</a>2.1.3 编码规范</h3><ol><li><p>编写规则</p><ol><li>每个 <code>import</code> 语句只导入一个模块，尽量避免一次导入多个模块；</li><li>不要在行尾添加分号，也不要用分号将两条命令放在同一行；</li><li>建议每行不超过 80 个字符；</li><li>使用必要的空行可以增强代码的可读性；</li><li>通常情况下，运算符两侧、函数参数之间、逗号 “,” 两侧，建议添加空格；</li><li>应该避免在循环中使用 + 和 += 操作符累加字符串。这是因为字符串是不可变的，这样做会创造不必要的临时对象；</li><li>适当使用异常处理。</li></ol></li><li><p>命名规范</p><ol><li>模块名尽量短小，并且全部使用小写字母，可以用下划线分隔多个单词；</li><li>模块名尽量短小，并且全部使用小写字母，不推荐使用下划线；</li><li>类名采用单词首字母大写形式（即 Pascal 风格）</li><li>模块内部的类采用下划线+Pascal 风格的类名组成；</li><li>函数、类的属性和方法的命名规则同模块类似；</li><li>常量命名时采用全部大写字母，可以使用下划线；</li><li>单下划线“_”开头的模块变量或者函数时受保护的，在使用 import * from 语句从模块中导入时，这些变量或者函数不能被导入。</li><li>使用双下划线”__“开头的实例变量或方法是类私有的。</li></ol></li></ol><h2 id="2-2-python-中的变量"><a class="header-anchor" href="#2-2-python-中的变量">¶</a>2.2 Python 中的变量</h2><h3 id="2-2-1-保留字与标识符"><a class="header-anchor" href="#2-2-1-保留字与标识符">¶</a>2.2.1 保留字与标识符</h3><ol><li><p>保留字</p><p>保留字是 Python 语言中已经被赋予特定含义的一些单词，开发程序时，不可以把这些保留字作为变量、函数、类、模块和其他对象的名称来使用。</p><p>Python 中的保留的关键字可以通过以下方法查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></table></figure></li><li><p>标识符</p><p>标识符简单理解为一个名字</p><p>Python 语言的标识符命名规则如下：</p><ul><li>由字母、下划线和数字组成，并且不能以数字开</li><li>不能使用 Python 中的保留字</li></ul></li></ol><table><thead><tr><th style="text-align:center">and</th><th style="text-align:center">as</th><th style="text-align:center">assert</th><th style="text-align:center">break</th><th style="text-align:center">class</th><th style="text-align:center">continue</th></tr></thead><tbody><tr><td style="text-align:center">def</td><td style="text-align:center">del</td><td style="text-align:center">elif</td><td style="text-align:center">else</td><td style="text-align:center">except</td><td style="text-align:center">finally</td></tr><tr><td style="text-align:center">for</td><td style="text-align:center">from</td><td style="text-align:center">False</td><td style="text-align:center">global</td><td style="text-align:center">if</td><td style="text-align:center">import</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">is</td><td style="text-align:center">lambda</td><td style="text-align:center">nonlocal</td><td style="text-align:center">not</td><td style="text-align:center">None</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">pass</td><td style="text-align:center">raise</td><td style="text-align:center">return</td><td style="text-align:center">try</td><td style="text-align:center">Ture</td></tr><tr><td style="text-align:center">while</td><td style="text-align:center">with</td><td style="text-align:center">yield</td><td style="text-align:center">\</td><td style="text-align:center">\</td><td style="text-align:center">\</td></tr></tbody></table><h3 id="2-2-2-变量"><a class="header-anchor" href="#2-2-2-变量">¶</a>2.2.2 变量</h3><p>在 Python 中，严格意义上变量应该称为“名字”，也可以理解为标签。</p><p>定义变量：</p><ul><li>变量名应该是一个有效的标识符</li><li>不能使用保留字</li><li>慎用小写字母 “l” 和大写字母“O”</li><li>应该选用有意义的单词作为变量名</li></ul><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = value</span><br></pre></td></tr></table></figure><p>另外，Python 是一种动态语言，也就是说，变量的类型可以随时变化。</p><blockquote><p>在 Python 中，使用内置函数 type()可以返回变量类型。</p></blockquote><p>在 Python 中，允许多个变量指向同一个值。</p><blockquote><p>在 Python 中，使用内置函数 <code>id()</code> 可以返回变量所指的内存地址。</p></blockquote><h2 id="2-3-基本数据类型"><a class="header-anchor" href="#2-3-基本数据类型">¶</a>2.3 基本数据类型</h2><h3 id="2-3-1-数字"><a class="header-anchor" href="#2-3-1-数字">¶</a>2.3.1 数字</h3><ol><li><p>整数</p><ol><li><p>十进制</p><p>例如以下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1456151515151</span></span><br></pre></td></tr></table></figure><blockquote><p>不能以 0 作为十进制数的开头（ 0 除外）</p></blockquote></li><li><p>八进制</p><blockquote><p>在 Python3.X 中，对于八进制数，必须以 0o/0O 开头</p></blockquote></li><li><p>十六进制</p><blockquote><p>在 Python3.X 中，对于十六进制数，必须以 0x/0X 开头</p></blockquote></li><li><p>二进制</p></li></ol></li><li><p>浮点数</p><p>​    浮点数由整数部分和小数部分组成，主要用于处理包括小数的数。浮点数也可用科学计数法表示。</p></li><li><p>复数</p><p>​    Python 中的复数与数学中的复数形式完全一致，都是由实部和虚部组成。</p></li></ol><h3 id="2-3-2-字符串"><a class="header-anchor" href="#2-3-2-字符串">¶</a>2.3.2 字符串</h3><p>字符串就是连续的字符序列，可以是计算机所能表示的一切字符集合。在 Python 中，字符串数以不可变序列，通常使用单引号、双引号或者三引号、六引号括起来。其中单引号和双引号祖父序列必须在同一行上，而三引号内的字符串可以分布在连续的多行上。</p><h3 id="2-3-3-布尔型"><a class="header-anchor" href="#2-3-3-布尔型">¶</a>2.3.3 布尔型</h3><h3 id="2-3-3-数据类型的转换"><a class="header-anchor" href="#2-3-3-数据类型的转换">¶</a>2.3.3 数据类型的转换</h3><p>在 Python 中，提供了以下函数进行各数据类型的转换</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">int(x)</td><td style="text-align:center">将 x 转成整数类型</td></tr><tr><td style="text-align:center">float(x)</td><td style="text-align:center">将 x 转成浮点数类型</td></tr><tr><td style="text-align:center">complex(real ,imag)</td><td style="text-align:center">创建一个复数</td></tr><tr><td style="text-align:center">str(x)</td><td style="text-align:center">将 x 转成字符串</td></tr><tr><td style="text-align:center">repr(x)</td><td style="text-align:center">将 x 转成表达式字符串</td></tr><tr><td style="text-align:center">eval(str)</td><td style="text-align:center">计算 字符串中的有效 Python 表达式，并返回一个对象</td></tr><tr><td style="text-align:center">chr(x)</td><td style="text-align:center">将整数 x 转换成一个字符</td></tr><tr><td style="text-align:center">ord(x)</td><td style="text-align:center">将一个字符 x 转换为它对应的整数值</td></tr><tr><td style="text-align:center">hex(x)</td><td style="text-align:center">将一个整数 x 转换为一个十六进制字符串</td></tr><tr><td style="text-align:center">oct(x)</td><td style="text-align:center">将一个整数 x 转换为一个八进制字符串</td></tr></tbody></table><h2 id="2-4-基本输入和输出"><a class="header-anchor" href="#2-4-基本输入和输出">¶</a>2.4 基本输入和输出</h2><h3 id="2-4-1-使用-input-函数"><a class="header-anchor" href="#2-4-1-使用-input-函数">¶</a>2.4.1 使用 input() 函数</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = <span class="built_in">input</span>(<span class="string">&quot;提示文字&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 Python 3.X 中，无论输入的是数字还是字符，都将被作为字符串读取。因此想要接收整数，需要把接受的字符串进行类型转换。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable =<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入整数&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-4-2-使用-print-函数输出"><a class="header-anchor" href="#2-4-2-使用-print-函数输出">¶</a>2.4.2 使用 print() 函数输出</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world!\n&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="第三章-运算符与表达式"><a class="header-anchor" href="#第三章-运算符与表达式">¶</a>第三章 运算符与表达式</h1><h2 id="3-1-运算符"><a class="header-anchor" href="#3-1-运算符">¶</a>3.1 运算符</h2><p>运算符是一些特殊的符号，主要用于数学计算、比较大小和逻辑运算等。</p><h3 id="3-1-1-算数运算符"><a class="header-anchor" href="#3-1-1-算数运算符">¶</a>3.1.1 算数运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">实例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">12.45+16</td><td style="text-align:center">28.45</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">5.231-3.21</td><td style="text-align:center">2.021</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">5*0.1</td><td style="text-align:center">0.5</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">7/2</td><td style="text-align:center">3.5</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">7%2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">取整</td><td style="text-align:center">7//2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td style="text-align:center">2**4</td><td style="text-align:center">16</td></tr></tbody></table><blockquote><ul><li>在算数操作符中使用 % 取余，如果除数是负数，那么取得的结果也是一个负值。</li><li>在 Python 中，<strong>除法运算，一律按照浮点数进行运算</strong>，因此两个整数相除，结果是浮点数。</li></ul><p>注意：在使用除法、取余和取整运算时，除数不能为 0 ，否则会出现异常。</p></blockquote><h3 id="3-1-2-赋值运算符"><a class="header-anchor" href="#3-1-2-赋值运算符">¶</a>3.1.2 赋值运算符</h3><p>赋值运算符主要用来为变量赋值。使用时，可以直接把等基本赋值运算符右边的值赋给左边的变量，也可以是进行某些运算后再赋值给左边。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3-比较-关系-运算符"><a class="header-anchor" href="#3-1-3-比较-关系-运算符">¶</a>3.1.3 比较（关系）运算符</h3><p>用于对变量或表达式的结果进行大小、真假等比较。如果比较为真，则返回 Ture；如果为假，则返回 False 。</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">作用</th><th style="text-align:center">举例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="3-1-4-逻辑运算符"><a class="header-anchor" href="#3-1-4-逻辑运算符">¶</a>3.1.4 逻辑运算符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th><th style="text-align:center">用法</th><th style="text-align:center">结合方向</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">逻辑与</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">逻辑或</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">逻辑非</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="3-1-5-位操作符"><a class="header-anchor" href="#3-1-5-位操作符">¶</a>3.1.5 位操作符</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th><th style="text-align:center">举例</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">按位或</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">按位取反</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移位运算符</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移位运算符</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h2 id="3-2-运算优先级"><a class="header-anchor" href="#3-2-运算优先级">¶</a>3.2 运算优先级</h2><p>由高到低依次是：</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">**</td><td style="text-align:center">幂运算</td></tr><tr><td style="text-align:center">~、+、-</td><td style="text-align:center">取反、正号和负号</td></tr><tr><td style="text-align:center">*、/、%、//</td><td style="text-align:center">算数运算符</td></tr><tr><td style="text-align:center">+、-</td><td style="text-align:center">加、减</td></tr><tr><td style="text-align:center">&lt;&lt;、&gt;&gt;</td><td style="text-align:center">左移和右移</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center">&lt;、&lt;=、&gt;、&gt;=、!=、==</td><td style="text-align:center">比较运算符</td></tr></tbody></table><h1 id="第四章-流程控制语句"><a class="header-anchor" href="#第四章-流程控制语句">¶</a>第四章 流程控制语句</h1><h2 id="4-1-程序结构"><a class="header-anchor" href="#4-1-程序结构">¶</a>4.1 程序结构</h2><ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul><h2 id="4-2-选择语句"><a class="header-anchor" href="#4-2-选择语句">¶</a>4.2 选择语句</h2><p>在生活中，我们总是要做出许多选择，程序也是一样。</p><blockquote><p>Python 中，没有 switch 语句，因此为了实现多重选择的功能，只能使用 if……elif……else 分支语句或者 if 语句的嵌套</p></blockquote><h3 id="4-2-1-最简单的-if-语句"><a class="header-anchor" href="#4-2-1-最简单的-if-语句">¶</a>4.2.1 最简单的 if 语句</h3><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    语句块</span><br></pre></td></tr></table></figure><blockquote><p>如果只有一条语句，语句块可以直接写到冒号的右侧。但是，为了程序的可读性，建议不要这么做。</p></blockquote><h3 id="4-2-2-if-else-语句"><a class="header-anchor" href="#4-2-2-if-else-语句">¶</a>4.2.2 if……else 语句</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>在使用 else 时，else 一定不能单独使用。</p></blockquote><h3 id="4-2-3-if-elif-else-语句"><a class="header-anchor" href="#4-2-3-if-elif-else-语句">¶</a>4.2.3 if……elif……else 语句</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">    语句块<span class="number">2</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句块n</span><br></pre></td></tr></table></figure><h3 id="4-2-4-if-语句的嵌套"><a class="header-anchor" href="#4-2-4-if-语句的嵌套">¶</a>4.2.4 if 语句的嵌套</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句块<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="4-3-循环语句"><a class="header-anchor" href="#4-3-循环语句">¶</a>4.3 循环语句</h2><h3 id="4-3-1-while-循环"><a class="header-anchor" href="#4-3-1-while-循环">¶</a>4.3.1 while 循环</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure><h3 id="4-3-2-for-循环"><a class="header-anchor" href="#4-3-2-for-循环">¶</a>4.3.2 for 循环</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 对象:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure><ol><li><p>进行数值循环</p><p>​    在使用 for 循环时，最基本的应用就是进行数值循环。例如，实现从 1 到 100 的累加。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding = UTF-8</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;计算 1 到 100 的累加\n&quot;</span> )</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span> ) :</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;结果是：&quot;</span>, <span class="built_in">sum</span> )</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">计算 1 到 100 的累加</span></span><br><span class="line"><span class="string">结果是：5050</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    其中用到 <code>range()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start,end,step)</span><br></pre></td></tr></table></figure><p>​    各参数说明如下：</p><ul><li>start：用于指定计数的起始值（包含该值），可以省略，默认值为 0 ；</li><li>end：用于指定计数的结束值（不包含该值），不能省略；</li><li>step：用于指定步长，即两个数之间的间隔，可以省略，默认值为 1 。</li></ul></li><li><p>遍历字符串</p><p>​    使用 for 循环语句除了可以循环数值，还可以逐个遍历字符串。例如，下面的代码可以将横向显示的字符串转换为纵向显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding = UTF-8</span></span><br><span class="line">string = <span class="string">&quot;人生苦短，我用Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">    <span class="built_in">print</span>(ch)</span><br></pre></td></tr></table></figure><blockquote><p>​    for 循环语句还可以用于迭代（遍历）列表、元组、集合和字典等。</p></blockquote></li></ol><h3 id="4-3-3-循环嵌套"><a class="header-anchor" href="#4-3-3-循环嵌套">¶</a>4.3.3 循环嵌套</h3><p>在 Python 中，允许一个循环体嵌入另一个循环，这称为<font color='red'>循环嵌套</font>。在 Python 中， for 循环和 while 循环都可以进行循环嵌套。</p><h2 id="4-4-break-continue-和-pass-语句"><a class="header-anchor" href="#4-4-break-continue-和-pass-语句">¶</a>4.4 break、continue 和 pass 语句</h2><ol><li>break：完全终止当前所有循环；</li><li>continue：终止当前循环，进入下一次循环迭代；</li><li>pass：表示空语句，不做任何事，一般起到占位作用。</li></ol><h1 id="第五章-复杂数据类型"><a class="header-anchor" href="#第五章-复杂数据类型">¶</a>第五章 复杂数据类型</h1><h2 id="5-1-序列"><a class="header-anchor" href="#5-1-序列">¶</a>5.1 序列</h2><p>序列是一块用于存放多个值得连续内存空间，并且按一定得顺序，每个值（称为元素）都分配一个数字，称为索引或位置。通过该索引可以取出相应的值。</p><h3 id="5-1-1-索引"><a class="header-anchor" href="#5-1-1-索引">¶</a>5.1.1 索引</h3><p>序列中的每个元素都有一个编号，也称为索引（Indexing）。这个索引是从 0 开始递增的，即下标为 0 表示第一个元素，下标为 1 表示第二个元素，依次类推。</p><p>Python 比较神奇，它的索引可以是负数。这个索引从右向左计数，也就是从最后一个元素开始计数。最后一个元素的索引为 -1 ，倒数第二个元素的索引值为 -2 ，依此类推。</p><h3 id="5-1-2-切片"><a class="header-anchor" href="#5-1-2-切片">¶</a>5.1.2 切片</h3><p>切片（sliceing）操作时访问序列中元素的另一种方法，它可以访问一定范围内的元素。通过切片操作可以生成一个新的序列。</p><p>切片的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sname[start:end:step]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>sname：表示被切序列的名称</li><li>start：表示切片的开始位置（包括该位置），可以省略，默认为 0 ；</li><li>end：表示切片的截至位置（不包括该位置），可以省略，默认为序列的长度</li><li>step：表示切片的步长，可以省略，默认为 1 。当省略步长时，最后一个冒号也可以省略。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verse = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(verse[<span class="number">1</span>:<span class="number">6</span>]) <span class="comment">#获取第 2 到 6 个元素</span></span><br><span class="line"><span class="built_in">print</span>(verse[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]) <span class="comment">#获取第 2、4、6 个元素</span></span><br></pre></td></tr></table></figure><blockquote><p>如果想要复制整个序列，可以将 start 和 end 参数都省略，但是中间的冒号需要保留。</p></blockquote><h3 id="5-1-2-序列相加"><a class="header-anchor" href="#5-1-2-序列相加">¶</a>5.1.2 序列相加</h3><p>在 Python 中，支持两种相同类型的序列相加（adding）操作，即将两个序列进行连接，但是不会去掉重复的元素，使用 “+” 运算符实现。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verse1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">verse2 = [ <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">verse3 = verse1 + verse2</span><br></pre></td></tr></table></figure><h3 id="5-1-4-乘法"><a class="header-anchor" href="#5-1-4-乘法">¶</a>5.1.4 乘法</h3><p>在 Python 中，使用整数 $$n$$ 乘以一个序列会生成新的序列。新序列的内容为原来序列被重复 $$n$$ 次的结果。</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">verse1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">verse3 = verse1 * <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="5-1-5-检查某个元素是否是序列成员"><a class="header-anchor" href="#5-1-5-检查某个元素是否是序列成员">¶</a>5.1.5 检查某个元素是否是序列成员</h3><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value <span class="keyword">in</span> sequence</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>value：表示要检查的元素</li><li>sequence：表示指定的序列</li></ul><p>结果：</p><ul><li>该结果为一个布尔型（bool）</li><li>如果该元素在序列里面，就返回 Ture；反之，就返回 False。</li></ul><blockquote><p>另外，在 Python 中，也可以使用 not in 关键字实现检查某个元素是否不包含在指定的序列中。</p></blockquote><h3 id="5-1-6-对序列进行操作的函数"><a class="header-anchor" href="#5-1-6-对序列进行操作的函数">¶</a>5.1.6 对序列进行操作的函数</h3><p>在 Python 中，提供了内置函数计算序列的长度、最大值和最小值。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>()<span class="comment">#序列的长度，即返回序列包含的元素的个数</span></span><br><span class="line"><span class="built_in">max</span>()<span class="comment">#返回序列元素中的最大值</span></span><br><span class="line"><span class="built_in">min</span>()<span class="comment">#返回序列元素中的最小值</span></span><br></pre></td></tr></table></figure><p>除了上面介绍 3 个内置函数， Python 还提供了下表所示函数</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">list()</td><td style="text-align:center">将序列转化为列表</td></tr><tr><td style="text-align:center">str()</td><td style="text-align:center">将序列转化为字符串</td></tr><tr><td style="text-align:center">sum()</td><td style="text-align:center">计算元素和</td></tr><tr><td style="text-align:center">sorted()</td><td style="text-align:center">对元素进行排序</td></tr><tr><td style="text-align:center">reversed()</td><td style="text-align:center">反向序列中的元素</td></tr><tr><td style="text-align:center">enumerate()</td><td style="text-align:center">将序列组合为一个索引序列，多用在 for 循环中</td></tr></tbody></table><h2 id="5-2-列表"><a class="header-anchor" href="#5-2-列表">¶</a>5.2 列表</h2><p>Python 中的列表，也是由一系列按特定顺序排列的元素组成。它是 Python 中内置的可变序列。在形式上，列表所有元素都放在一对中括号中，两个相邻元素之间使用逗号分隔。在内容上，可以将整数、实数、字符串、列表、元组等任何类型的内容放入列表中，并且<strong>同一个列表中元素的类型可以不同</strong>，因为他们之间没有任何联系。</p><h3 id="5-2-1-列表的创建和删除"><a class="header-anchor" href="#5-2-1-列表的创建和删除">¶</a>5.2.1 列表的创建和删除</h3><ol><li><p>使用赋值运算符直接创建列表</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname = [element1,element2,...,element n]</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>listname：表示列表的名字，可以是任何符合 Python 命名规范的标识符；</li><li>element：表示列表中的元素。</li></ul></li><li><p>创建空列表</p><p>​    在 Python 中，可以创建空列表。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emptylist = []</span><br></pre></td></tr></table></figure></li><li><p>创建数值列表</p><p>​    在 Python 中，数值列表很常用。可以使用 <code>list()</code> 函数直接将 <code>range()</code> 函数循环出来的结果转换成列表。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(data)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>data：表示可以转换成列表的数据，其类型可以是 range 对象、字符串、元组或者其他可迭代的类型的数据。</li></ul></li><li><p>删除列表</p><p>​    对于已经创建的列表，不在使用时，可以将其删除。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>( <span class="built_in">range</span>( <span class="number">11</span> ) )</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><blockquote><p>​    del 在实际开发中，并不常用。因为 Python 自带的垃圾回收机制，会制动销毁不用的列表，所以即使我们不用手动将其删除， Python 也会自动将其收回。</p></blockquote></li></ol><h3 id="5-2-2-访问列表元素"><a class="header-anchor" href="#5-2-2-访问列表元素">¶</a>5.2.2 访问列表元素</h3><p>可以用索引来访问列表的某一个元素。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname[index]</span><br></pre></td></tr></table></figure><h3 id="5-2-3-遍历列表"><a class="header-anchor" href="#5-2-3-遍历列表">¶</a>5.2.3 遍历列表</h3><ol><li><p>直接 for 循环实现</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> listname:</span><br><span class="line">    循环体<span class="comment">#输出item</span></span><br></pre></td></tr></table></figure></li><li><p>使用 for 循环和<code> enumerate()</code> 函数实现</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(listname):</span><br><span class="line">    <span class="comment">#输出 index 和 item</span></span><br></pre></td></tr></table></figure><p>​    参数说明：</p><ul><li>index：用于保存元素的索引值</li><li>item：用于保存获取的元素值，要输出元素内容时，直接输出该变量即可</li><li>listname：列表的名称</li></ul></li></ol><h3 id="5-2-4-添加-修改和删除列表元素"><a class="header-anchor" href="#5-2-4-添加-修改和删除列表元素">¶</a>5.2.4 添加、修改和删除列表元素</h3><p>添加、修改和删除列表元素也称为更新列表。在实际开发时，经常需要对列表进行更新。</p><ol><li><p>添加元素</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.append(obj)</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>listname：表示要添加的列表名称</li><li>obj：要添加到列表末尾的对象</li></ul><p>​    上面介绍的是向列表中添加一个元素。如果想要将一个列表中的全部元素添加到另一个列表中，可以使用列表对象的 <code>extend()</code> 方法实现。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.extend(seq)</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>listname：表示要添加的列表名称</li><li>seq：要添加到列表末尾的列表</li></ul></li><li><p>修改元素</p><p>​    修改列表中的元素只需要通过索引获取该元素，然后在为其重新赋值即可。</p></li><li><p>删除元素</p><p>​    删除元素主要由两种情况，一是<strong>根据索引删除</strong>，另一种是<strong>根据元素值进行删除</strong>。</p><ol><li><p>根据索引删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">verse = [<span class="string">&quot;长亭外&quot;</span>, <span class="string">&quot;古道边&quot;</span>, <span class="string">&quot;芳草碧连天&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> verse[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>( verse )</span><br></pre></td></tr></table></figure></li><li><p>根据元素值删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">verse = [<span class="string">&quot;长亭外&quot;</span>, <span class="string">&quot;古道边&quot;</span>, <span class="string">&quot;芳草碧连天&quot;</span>]</span><br><span class="line">verse.remove(<span class="string">&quot;古道边&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(verse)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="5-2-5-对列表进行统计"><a class="header-anchor" href="#5-2-5-对列表进行统计">¶</a>5.2.5 对列表进行统计</h3><ol><li><p>获取指定元素出现的次数</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.count(obj)</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>listname：表示列表的名称</li><li>obj：要匹配的元素</li></ul></li><li><p>获取指定元素首次出现的索引</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.index(obj)</span><br></pre></td></tr></table></figure></li><li><p>统计数值列表的元素和</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(listname[,start])</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>listname：表示列表的名称</li><li>start：表示统计开始的位置，可选参数，默认为 0 。</li></ul></li></ol><h3 id="5-2-6-对列表进行排序"><a class="header-anchor" href="#5-2-6-对列表进行排序">¶</a>5.2.6 对列表进行排序</h3><ol><li><p>使用列表对象的 <code>sort()</code> 方法实现</p><p>​    列表对象提供了 <code>sort()</code> 方法对原列表中的元素进行排序。排序后原列表中的元素顺序将发生改变。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listname.sort(key = <span class="literal">None</span>, reverse = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>listname：表示要进行排序的列表</li><li>key：表示指定一个从每个序列元素中提取一个比较键</li><li>reverse：可选参数。如果为 Ture，则表示降序排列，如果为 False，则表示升序排列。默认为 Falses 。</li></ul></li><li><p>使用内置的 <code>sorted()</code> 函数实现</p><p>​     在 Python 中，提供一个内置的 sorted() 函数，用于对列表进行排序。使用该函数进行排序后，原列表的元素顺序不变，而是返回一个新的列表。sorted() 函数语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(iterable,key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>iterable：表示要进行排序的列表的名称</li><li>key：表示指定一个从每个序列元素中提取一个比较键</li><li>reverse：可选参数。如果为 Ture，则表示降序排列，如果为 False，则表示升序排列。默认为 Falses 。</li></ul></li></ol><h3 id="5-2-7-列表推导式"><a class="header-anchor" href="#5-2-7-列表推导式">¶</a>5.2.7 列表推导式</h3><p>使用列表推导式可以快速生成一个列表，或者根据某个列表生成满足指定需求的列表。列表推导式通常有以下几种常用的语法格式</p><ol><li><p>生成指定范围的数值列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [Expression <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">range</span>]</span><br></pre></td></tr></table></figure><p>​    参数说明：</p><ul><li>list：表示生成的列表名称</li><li>Expression：表达式，用于计算新列表的元素</li><li>var：循环变量</li><li>range：采用 range() 函数生成的 range 对像</li></ul><p>​    例如，要生成一个包含 10 个随机数的列表，要求数的范围在 10-100 之间（包括 100），具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">randomnumber = [random.randint( <span class="number">10</span>, <span class="number">100</span> ) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">10</span> )]</span><br><span class="line"><span class="built_in">print</span>( randomnumber )</span><br></pre></td></tr></table></figure></li><li><p>根据列表生成指定需求的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newlist = [Expression <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span>]</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>newlist：表示新生成的列表名称</li><li>Expression：表达式，用于计算新列表的元素</li><li>var：循环变量</li><li>list：用于生成新列表的原列表</li></ul><p>​    例如，定义一个记录商品价格的列表，然后应用列表推导式，生成一个将全部商品价格打五折的列表，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">price = [<span class="number">3124</span>, <span class="number">2134</span>, <span class="number">1400</span>, <span class="number">800</span>, <span class="number">500</span>]</span><br><span class="line">sale = [<span class="built_in">int</span>( x / <span class="number">2</span> ) <span class="keyword">for</span> x <span class="keyword">in</span> price]</span><br><span class="line"><span class="built_in">print</span>( price )</span><br><span class="line"><span class="built_in">print</span>( sale )</span><br></pre></td></tr></table></figure></li><li><p>从列表中选择符合条件的元素组成新的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newlist = [Expression <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>newlist：表示新生成的列表名称</li><li>Expression：表达式，用于计算新列表的元素</li><li>var：循环变量</li><li>list：用于生成新列表的原列表</li><li>condition：条件表达式，用于指定筛选条件</li></ul></li></ol><h3 id="5-2-8-二维列表"><a class="header-anchor" href="#5-2-8-二维列表">¶</a>5.2.8 二维列表</h3><ol><li><p>直接定义二列列表</p><p>​    例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>​    每一行为一个一维列表，列表直接用逗号隔开。</p></li><li><p>使用嵌套的 for 循环创建</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    arr.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        arr[i].append(j)</span><br></pre></td></tr></table></figure></li><li><p>使用列表推导式创建</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = [[i <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>如果要访问二维列表中的元素，使用索引的方式。</p></li></ol><h2 id="5-3-元组"><a class="header-anchor" href="#5-3-元组">¶</a>5.3 元组</h2><p>元组（tuple）是 Python 中另一个重要的序列结构，与列表类似，也是由一系列按照特定顺序排列的元素组成。<strong>但是它是不可变序列</strong>。因此元组也称为不可变列表。在形式上，元组的所有元素都放在一对小括号内，两个相邻的元素用逗号隔开。</p><h3 id="5-3-1-元组的创建"><a class="header-anchor" href="#5-3-1-元组的创建">¶</a>5.3.1 元组的创建</h3><ol><li><p>使用赋值运算符直接创建</p><p>​    同其他类型的 Python 语法一样，创建元组时，也可以用赋值运算符直接将一个元组赋值给变量。具体的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuplename = (element <span class="number">1</span>,element <span class="number">2</span>,element <span class="number">3</span>,...,element n)</span><br></pre></td></tr></table></figure></li><li><p>创建空元组</p><p>​    在 Python 中，也可以创建空元组。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty = （）</span><br></pre></td></tr></table></figure></li><li><p>创建数值元组</p><p>​    在 Python 中，可以使用 tuple() 函数直接将 range() 函数循环出来的结果转换为数值元组。</p><blockquote><p>有关 range() 函数的详细介绍，请参见 <a href="#4-3-2-for-%E5%BE%AA%E7%8E%AF">4.3.2</a> 节</p></blockquote><p>​    <code>tuple()</code> 函数的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(data)</span><br><span class="line"><span class="built_in">tuple</span>(<span class="built_in">range</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除元组</p><p>​    对于已经创建的元组，不再使用时，可以用 del 语句将其删除。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> tuplename</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-2-访问元组元素"><a class="header-anchor" href="#5-3-2-访问元组元素">¶</a>5.3.2 访问元组元素</h3><p>在 Python 中，如果想要把元组的所有元素输出，可以直接使用 print() 函数。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span> )</span><br></pre></td></tr></table></figure><p>或者通过元组的索引获取指定的元素。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span>[<span class="number">2</span>] )</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span>[-<span class="number">2</span>] )</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span>[<span class="number">0</span> :<span class="number">6</span> :<span class="number">2</span>] ) <span class="comment">#前两者输出的是单个元素，这个输出的是一个新的元组</span></span><br></pre></td></tr></table></figure><p>另外，元组还可以使用 for 循环和 enumerate() 函数结合进行遍历。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>( <span class="built_in">tuple</span> ) :</span><br><span class="line">    <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> :</span><br><span class="line">        <span class="built_in">print</span>( item, <span class="string">&quot;,&quot;</span>, end=<span class="string">&quot;&quot;</span> )</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="built_in">print</span>( item, <span class="string">&quot;。&quot;</span> )</span><br></pre></td></tr></table></figure><h3 id="5-3-3-修改元组"><a class="header-anchor" href="#5-3-3-修改元组">¶</a>5.3.3 修改元组</h3><p>元组是不可变序列，所以我们不能对它单个元素的值进行修改，但是元组也不是完全不能修改。我们可以对元组重新赋值。例如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span> )</span><br><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span> )</span><br></pre></td></tr></table></figure><p>另外，还可以对元组进行连接组合。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">tuple2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>( tuple1 + tuple2 )</span><br></pre></td></tr></table></figure><blockquote><p>在进行元组连接时，连接的内容必须都是元组。不能将元组和字符串或者是列表进行连接。</p></blockquote><h3 id="5-3-4-元组推导式"><a class="header-anchor" href="#5-3-4-元组推导式">¶</a>5.3.4 元组推导式</h3><p>使用元组推导式可以快速成成一个元组，它的表现形式和列表推导式类似，只是将列表推导式中的中括号换成小括号。例如下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span> = (random.randint( <span class="number">10</span>, <span class="number">100</span> ) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">5</span> ))</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">tuple</span> )</span><br></pre></td></tr></table></figure><h3 id="5-3-5-元组与列表的区别"><a class="header-anchor" href="#5-3-5-元组与列表的区别">¶</a>5.3.5 元组与列表的区别</h3><ol><li>列表属于可变序列，它的元素可以随时修改或删除；而元组属于不可变序列，其中的元组不可以修改，除非<strong>整体替换</strong></li><li>列表可以使用 append() 、 extend() 、 insert() 、 remove() 和 pop() 等方法实现添加和修改列表元素；而元组没有这些方法，也不能删除元素</li><li>列表可以使用切片访问和修改列表中的元素；元组也支持切片，但是只支持切片访问元组中的元素，不支持修改</li><li>元组的访问和处理速度比列表快。所以如果只需要对其中的元组进行访问，而不进行任何修改，建议使用元组而不使用列表</li><li>列表不能作为字典的键；而元组可以</li></ol><h2 id="5-4-字典"><a class="header-anchor" href="#5-4-字典">¶</a>5.4 字典</h2><p>字典（dictionary）和列表类似，也是可变序列，不过与列表不同 ，它是无序可变序列，保存的内容是以“键-值对”的形式存放的。类似于 Java 或者 C++ 中的 Map 对象。</p><p>字典的主要特征如下：</p><ul><li>通过键而不是通过索引来读取</li><li>字典是任意对象的无序集合</li><li>字典是可变的，并且可以任意嵌套</li><li>字典中的键必须唯一</li><li>字典中的键必须不可变</li></ul><h3 id="5-4-1-字典的创建和删除"><a class="header-anchor" href="#5-4-1-字典的创建和删除">¶</a>5.4.1 字典的创建和删除</h3><p>定义字典是，每个元素都包含两个部分：“键”和“值”，并且在“键”和“值”之间，用冒号分隔，相邻两个元素使用逗号隔开，所有元素放在一个大括号中。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&#x27;key 1&#x27;</span>:<span class="string">&#x27;value 1&#x27;</span>,<span class="string">&#x27;key 2&#x27;</span>:<span class="string">&#x27;value 2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>dictionary：表示字典的名称</li><li>key：表示元素的键，必须是唯一的，并且不可变</li><li>value：表示元素的值，可以是任何数据类型，不是必须唯一</li></ul><p>铜列表和元组一样，也可以创建空字典。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dictionary = &#123;&#125;</span><br><span class="line">dictionary = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><p>Python 的 <code>dicr()</code> 方法除了可以创建一个空字典外，还可以通过已有数据快速创建字典。主要表现为以下两种形式：</p><ol><li><p>通过映射函数创建字典</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(list1,list2))</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>dictionary：表示字典的名称</li><li>zip() 函数：用于将多个列表或元组对应位置的元素组合成为元组，并返回包含这些内容的 zip 对象。如果想要得到元组，可以将 zip 对象使用 tuple() 函数转换为元组；如果想要得到列表，则可以使用 list() 函数将其转换成列表</li></ul></li><li><p>通过给定的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary = <span class="built_in">dict</span>(key1 = value1,key2 = value2)</span><br></pre></td></tr></table></figure><p>在 Python 中，还可以使用 dict 对象的 fromkeys() 方法创建值为空的字典。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary = <span class="built_in">dict</span>,fromkeys(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>​    参数说明：</p><ul><li>dictionary：表示字典的名称</li></ul></li></ol><ul><li>list：表示作为字典的键的列表</li></ul><h3 id="5-4-2-访问字典"><a class="header-anchor" href="#5-4-2-访问字典">¶</a>5.4.2 访问字典</h3><p>在 Python 中，如果想要将字典的全部元素输出，可以直接用 print() 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dicttionary = <span class="built_in">dict</span>( 甘雨=<span class="string">&#x27;冰系&#x27;</span>, 胡桃=<span class="string">&quot;火系&quot;</span>, 雷电将军=<span class="string">&quot;雷系&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( dicttionary )</span><br></pre></td></tr></table></figure><p>但是，使用字典是，很少直接输出它的内容。一般根据指定的键得到相应的结果。在 python 中，访问字典元素可以通过 键 的方式实现。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dicttionary = <span class="built_in">dict</span>( 甘雨=<span class="string">&#x27;冰系&#x27;</span>, 胡桃=<span class="string">&quot;火系&quot;</span>, 雷电将军=<span class="string">&quot;雷系&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( dicttionary )</span><br><span class="line"><span class="built_in">print</span>( dicttionary[<span class="string">&quot;甘雨&quot;</span>] )</span><br></pre></td></tr></table></figure><p>在实际开发过程中，很可能我们不知道当前存在什么键，所以避免该异常的产生。具体的解决方法是使用 if 语句对不存在的情况进行处理，即给定一个默认值。例如，可以将上面的代码修改为以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dicttionary = <span class="built_in">dict</span>( 甘雨=<span class="string">&#x27;冰系&#x27;</span>, 胡桃=<span class="string">&quot;火系&quot;</span>, 雷电将军=<span class="string">&quot;雷系&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( dicttionary[<span class="string">&quot;神里凌华&quot;</span>] <span class="keyword">if</span> <span class="string">&quot;神里凌华&quot;</span> <span class="keyword">in</span> dicttionary <span class="keyword">else</span> <span class="string">&quot;我的字典里没有此人&quot;</span> )</span><br></pre></td></tr></table></figure><p>另外， Python 中推荐的方法 hi 是使用字典对象的 get() 方法获取指定键的值。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dicttionary.get(key[,default])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>dictionary：表示当前操作的字典对象</li><li>key：指定的键</li><li>default：可选参数，默认为 None 。用于当指定的键不存在时，返回一个默认值。</li></ul><p>例如，上面的代码可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dicttionary = <span class="built_in">dict</span>( 甘雨=<span class="string">&#x27;冰系&#x27;</span>, 胡桃=<span class="string">&quot;火系&quot;</span>, 雷电将军=<span class="string">&quot;雷系&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( dicttionary.get( <span class="string">&quot;雷电将军&quot;</span> ) )</span><br></pre></td></tr></table></figure><h3 id="5-4-3-遍历字典"><a class="header-anchor" href="#5-4-3-遍历字典">¶</a>5.4.3 遍历字典</h3><p>字典是以“键-值对”的形式存储数据，素以就可能需要对这些“键-值对”进行获取。Python 提供了遍历字典的方法，通过遍历可以获取字典中的全部“键-值对”。</p><p>使用字典对象的 items() 方法可以获取字典的“键-值对”列表。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary.items()</span><br></pre></td></tr></table></figure><p>其中，dictionary 为字典对象；返回值为可遍历的“键-值对”元组列表。</p><blockquote><p>在 Python 中，字典对象还提供了 values() 和 keys() 方法，用于返回字典的“值”和“键”列表</p></blockquote><h3 id="5-4-4-添加-修改和删除字典元素"><a class="header-anchor" href="#5-4-4-添加-修改和删除字典元素">¶</a>5.4.4 添加、修改和删除字典元素</h3><p>由于字典是可变序列，所以可以随时在其中添加“键-值对”，这和列表类似。向字典中添加元素的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dictionary[key] = value</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>dictionary：表示字典的名称</li><li>key：表示要添加的元素的键，必须是唯一的，并且不可变</li><li>value：表示元素的值，可以是任何数据类型，不是必须唯一</li></ul><p>由于在字典中，“键”必须是唯一的，所以如果添加的新元素的“键”已经存在，则会用新元素的值替换掉旧元素的值，相当于修改字典的元素的值。</p><p>当字典中某个元素不需要时，可以使用 del 语句将其删除。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dicttionary = <span class="built_in">dict</span>( 甘雨=<span class="string">&#x27;冰系&#x27;</span>, 胡桃=<span class="string">&quot;火系&quot;</span>, 雷电将军=<span class="string">&quot;雷系&quot;</span> )</span><br><span class="line"><span class="keyword">del</span> dicttionary[<span class="string">&quot;甘雨&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>( dicttionary )</span><br></pre></td></tr></table></figure><blockquote><p>当删除一个不存在的键时，将会抛出异常</p></blockquote><h3 id="5-4-5-字典推导式"><a class="header-anchor" href="#5-4-5-字典推导式">¶</a>5.4.5 字典推导式</h3><p>使用字典推导式可以快速生成一个字典，它的表现形式和列表推导式类似。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">dictionary = &#123; i : random.randint( <span class="number">10</span>, <span class="number">100</span> ) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">5</span> ) &#125;</span><br><span class="line"><span class="built_in">print</span>( dictionary )</span><br></pre></td></tr></table></figure><h2 id="5-5-集合"><a class="header-anchor" href="#5-5-集合">¶</a>5.5 集合</h2><p>Python 中的集合（set）与数学中的集合概念类似，也是用于保存不重复元素。它有可变集合和不可变集合两种。</p><h3 id="5-5-1-创建集合"><a class="header-anchor" href="#5-5-1-创建集合">¶</a>5.5.1 创建集合</h3><ol><li><p>直接使用大括号创建</p><p>​    语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setname = &#123;element <span class="number">1</span>,element <span class="number">2</span>,...&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 set() 函数创建</p><p>​    在 Python 中，可以使用 set() 函数将列表、元组等其他可迭代对象转换为集合。 set() 函数的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setname = <span class="built_in">set</span>(iteration)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-5-2-向集合中添加和删除元素"><a class="header-anchor" href="#5-5-2-向集合中添加和删除元素">¶</a>5.5.2 向集合中添加和删除元素</h3><ol><li><p>向集合中添加元素</p><p>​    向集合中添加元素可以使用 add() 方法实现。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setname.add(element)</span><br></pre></td></tr></table></figure></li><li><p>从集合中删除元素</p><p>在 Python 中，可以使用 del 语句删除整个集合，也可以使用集合的 pop() 方法或者 remove() 方法删除一个元素，或者使用集合对象的 clear() 方法清空集合，使其变为空集合。</p></li></ol><h3 id="5-5-3-集合的交集-并集和差集运算"><a class="header-anchor" href="#5-5-3-集合的交集-并集和差集运算">¶</a>5.5.3 集合的交集、并集和差集运算</h3><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">两个集合的交集</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\vert</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span></td><td style="text-align:center">两个集合的并集</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">两个集合的差集</td></tr></tbody></table><h1 id="第六章-字符串"><a class="header-anchor" href="#第六章-字符串">¶</a>第六章 字符串</h1><h2 id="6-1-字符串编码转换"><a class="header-anchor" href="#6-1-字符串编码转换">¶</a>6.1 字符串编码转换</h2><h3 id="6-1-1-使用-encode-方法编码"><a class="header-anchor" href="#6-1-1-使用-encode-方法编码">¶</a>6.1.1 使用 encode() 方法编码</h3><p>encode() 方法为 str 对象的方法，用于将字符串转化成二进制数据，也称为“编码”。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;人活着就是为了樱岛麻衣!&quot;</span></span><br><span class="line"><span class="built_in">str</span>.encode( encoding=<span class="string">&quot;utf-8&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">str</span> )</span><br><span class="line">//<span class="built_in">str</span>.encode([encoding=<span class="string">&quot;utf-8&quot;</span>][,errors=<span class="string">&quot;strict&quot;</span>])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>str：表示要进行转换的字符串</li><li>encoding=“utf-8”：可选参数，默认为 utf-8，用于指定进行转码时采用的字符编码</li><li>errors=“strict”：可选参数，默认值为 strict，用于指定错误的处理方式。</li></ul><blockquote><p>在使用 encode() 方法时，不会修改原字符串，只是改变显示的方式。</p></blockquote><h3 id="6-1-2-使用-decode-方法解码"><a class="header-anchor" href="#6-1-2-使用-decode-方法解码">¶</a>6.1.2 使用 decode() 方法解码</h3><p>decode() 方法为 bytes 对象的方法，用于将二进制数据转换为字符串，即将使用 encode() 方法转换的结果再转换为字符串，也称为“解码”。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bytes</span>.decode([encoding=<span class="string">&quot;utf-8&quot;</span>][,errors=<span class="string">&quot;strict&quot;</span>])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>bytes：表示要进行转换的二进制数据</li><li>encoding=“utf-8”：可选参数，默认为 utf-8，用于指定进行转码时采用的字符编码</li><li>errors=“strict”：可选参数，默认值为 strict，用于指定错误的处理方式。</li></ul><blockquote><p>在使用 decode() 方法时，不会修改原字符串，只是改变显示的方式。</p></blockquote><h2 id="6-2-字符串常用操作"><a class="header-anchor" href="#6-2-字符串常用操作">¶</a>6.2 字符串常用操作</h2><h3 id="6-2-1-拼接字符串"><a class="header-anchor" href="#6-2-1-拼接字符串">¶</a>6.2.1 拼接字符串</h3><p>使用“+”运算符可完成对多个字符串的拼接，并且返回一个新的字符串。例如，定义两个字符串，然后用“+”运算符连接，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;人活着就是&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;为了樱岛麻衣!&quot;</span></span><br><span class="line"><span class="built_in">print</span>( str1 )</span><br><span class="line"><span class="built_in">print</span>( str2 )</span><br><span class="line"><span class="built_in">print</span>( str1 + str2 )</span><br></pre></td></tr></table></figure><blockquote><p>字符串不允许直接与其他类型的数据进行拼接。</p></blockquote><h3 id="6-2-2-计算字符串的长度"><a class="header-anchor" href="#6-2-2-计算字符串的长度">¶</a>6.2.2 计算字符串的长度</h3><p>由于不同的字符所占的字节数不同，所以要计算字符串长度，需要了解各字符所占的字节数。在 Python 中，数字、英文、小数点、下划线和空格占一个字节；一个汉字可能会占 2-4 个字节，占几个字节取决于采用的编码。下面以 Python 默认的 UTF-8 编码为例，即一个汉字占三个字节。</p><p>在 Python 中，提供了 len() 函数计算字符串的长度。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(string)</span><br></pre></td></tr></table></figure><p>在默认情况下，通过 len() 函数计算字符串长度时，不区分英文、数字和汉字，所有字符都认为是一个。</p><p>在实际开发时，有时需要获取字符串实际所占的字节数。这时，可以通过使用 encode() 方法进行编码后，在进行获取。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;人活着就是为了樱岛麻衣!&quot;</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>( <span class="built_in">str</span> ) )</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>( <span class="built_in">str</span>.encode() ) )</span><br></pre></td></tr></table></figure><h3 id="6-2-3-截取字符串"><a class="header-anchor" href="#6-2-3-截取字符串">¶</a>6.2.3 截取字符串</h3><p>由于字符串也属于序列，所以要截取字符串，可以采用切片的方法。通过切片的方法截取字符串的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string[start:end:step]</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>string：表示要截取的字符串；</li><li>satrt：表示要截取的第一个字符索引（包括该字符），可选，默认为 0 ；</li><li>end：表示要截取的最后一个字符的索引（不包含该字符），可选，默认为字符串的长度；</li><li>step：表示切片的步长，可选，默认为 1 。当省略 step 时，随后一个冒号也可以省略</li></ul><h3 id="6-2-4-分割-合并字符串"><a class="header-anchor" href="#6-2-4-分割-合并字符串">¶</a>6.2.4 分割、合并字符串</h3><p>在 Python 中，字符串对象提供了分割和合并字符串的方法。分割字符串是把字符串分割为列表，而合并字符串时把列表合并为字符串，它们可以看作是互逆操作。</p><ol><li><p>分割字符串</p><p>​    字符串对象的 split() 方法可以实现字符串分割。即把一个字符串按照指定的分隔符切分为字符串列表。该列表的元素中，不包含分隔符。具体的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.split(sep,maxsplit)</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>str：表示要进行分割的字符串</li><li>sep：用于指定分隔符，可以包含多个字符，默认为 None ，即所用空字符（包括空格、换行、制表符等）</li><li>maxsplit：用于指定分割的次数，可选参数。如果不指定或者为 -1 ，则分割次数没有限制，否则，返回结果列表的元素个数最多为 maxsplit+1</li><li>返回值：分割后的字符串列表</li></ul></li><li><p>合并字符串</p><p>​    合并字符串与拼接字符串不同，它会将多个字符串采用固定的分隔符连接再一起。合并字符串可以使用字符串对象的 join() 方法实现。具体语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strnew = string.join(iterable)</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>strnew：表示合并后的新字符串</li><li>string：字符串类型，用于指定合并时的分隔符</li><li>iterable：可迭代对象，该迭代对象中的所有元素（字符串）将会被合并为一个新的字符串。</li></ul></li></ol><h3 id="6-2-5-检索字符串"><a class="header-anchor" href="#6-2-5-检索字符串">¶</a>6.2.5 检索字符串</h3><p>在 Python 中，字符串对象提供了很多应用于字符串查找的方法。</p><ol><li><p>count() 方法</p><p>​    count() 方法用于检索指定字符串在另一个字符串中出现的次数。如果检索的字符串不存在，则返回 0 ；否则返回出现的次数。其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.count(sub[,start[,end]])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>str：表示原字符串</li><li>sub：表示要检索的子字符串</li><li>start：可选参数，表示检索范围的起始位置的索引，默认为 0 ；</li><li>end：可选参数，表示检索范围的结束位置的索引，默认为一直检索结尾</li></ul></li><li><p>find() 方法</p><p>​    该方法用于检索是否包含指定的子字符串。如果检索的子字符串不存在，则返回 -1 ；反之，返回首次出现该子字符串时的索引。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.find(sub[,start[,end]])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>str：表示原字符串</li><li>sub：表示要检索的子字符串</li><li>start：可选参数，表示检索范围的起始位置的索引，默认为 0 ；</li><li>end：可选参数，表示检索范围的结束位置的索引，默认为一直检索结尾</li></ul><blockquote><p>如果只想判断指定的字符串是否存在，可以使用 in 关键字实现。sub in string ：如果存在，就返回 Ture；反之，返回 False 。另外也可以根据 find() 方法的返回值是否大于 -1 来确定是否存在。Python 的字符串对象还提供了<code> rfind()</code> 方法，从字符串右边开始查找。</p></blockquote></li><li><p>index() 方法</p><p>​    index() 方法与 find() 方法类似，也是用于检索是否包含子字符串。只不过如果使用 index() 方法，当指定的字符串不存在时会抛出异常。其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.index(sub[,start[,end]])</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>str：表示原字符串</li><li>sub：表示要检索的子字符串</li><li>start：可选参数，表示检索范围的起始位置的索引，默认为 0 ；</li><li>end：可选参数，表示检索范围的结束位置的索引，默认为一直检索结尾</li></ul></li><li><p>startswitch() 方法</p><p>​    该方法用于检索字符串是否以指定子字符串开头。如果是，返回 Ture；反之，返回 False。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.startswitch(prefix[,start[,end]])</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>str：表示原字符串</li><li>prefix：表示要检索的子字符串</li><li>start：可选参数，表示检索范围的起始位置的索引，默认为 0 ；</li><li>end：可选参数，表示检索范围的结束位置的索引，默认为一直检索结尾</li></ul></li><li><p>endswitch() 方法</p><p>​    该方法用于检索字符串是否以指定子字符串结尾。如果是，返回 Ture；反之，返回 False。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.endswitch(prefix[,start[,end]])</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li>str：表示原字符串</li><li>prefix：表示要检索的子字符串</li><li>start：可选参数，表示检索范围的起始位置的索引，默认为 0 ；</li><li>end：可选参数，表示检索范围的结束位置的索引，默认为一直检索结尾</li></ul></li></ol><h3 id="6-2-6-字母的大小写转换"><a class="header-anchor" href="#6-2-6-字母的大小写转换">¶</a>6.2.6 字母的大小写转换</h3><p>在 Python 中，字符串对象提供了 lower() 方法和 upper() 方法进行字母的大小写转换。</p><ol><li><p>lower() 方法</p><p>​     lower() 方法用于将字符串中的全部大写字母转换成小写字母。字符串长度与原字符串长度相同。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.lower()</span><br></pre></td></tr></table></figure></li><li><p>upper() 方法</p><p>​    用于将字符串中的全部小写字母转换成大写字母。字符串长度与原字符串长度相同。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.upper()</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-2-7-去除字符串中的空格和特殊字符"><a class="header-anchor" href="#6-2-7-去除字符串中的空格和特殊字符">¶</a>6.2.7 去除字符串中的空格和特殊字符</h3><p>用户在输入数据时，可能会无意中输入多余的空格，或在一些情况下，字符串前后不允许出现空格和特殊字符，此时就需要去除字符串中的空格和特殊字符。</p><ol><li><p>strip() 方法</p><p>​    该方法用于去掉字符串左、右两侧空格和特殊字符。其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.strip([chars])</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>str：要去除字符的字符串</li><li>chars：可选参数，用于指定要去除的字符，可以指定多个，默认指定空格、制表符、回车符和换行符。</li></ul></li><li><p>lstrip() 方法</p><p>​    该方法用于去掉字符串左侧的空格和特殊字符，其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.lstrip([chars])</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>str：要去除字符的字符串</li><li>chars：可选参数，用于指定要去除的字符，可以指定多个，默认指定空格、制表符、回车符和换行符。</li></ul></li><li><p>rstrip() 方法</p><p>​    该方法用于去掉字符串右侧的空格和特殊字符，其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.rstrip([chars])</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>str：要去除字符的字符串</li><li>chars：可选参数，用于指定要去除的字符，可以指定多个，默认指定空格、制表符、回车符和换行符。</li></ul></li></ol><h3 id="6-2-8-格式化字符串"><a class="header-anchor" href="#6-2-8-格式化字符串">¶</a>6.2.8 格式化字符串</h3><p>格式化字符串的意思是先制定一个模板，在这个模板中预留几个位置，然后再根据需要填上相应的内容。这些空位需要通过指定的符号标记（也称为占位符），而这些符号还不会显示出来。在 Python 中，格式化字符串有两种方法。</p><ol><li><p>使用 % 操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;%[-][+][0][m][.n]格式化字符&quot;</span>%exp</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>-：可选参数，用于指定左对齐，正数前方无符号，负数前方加负号</li><li>+：可选参数，用于指定右对齐，正数前方加正号，负数前方加负号</li><li>0：可选参数，表示右对齐，正数前方无符号，负数前方加负号，用 0 填充数字空白处（一般与 m 参数一起使用）</li><li>m：可选参数，表示占有宽度（或数字显示出的位数）</li><li>.n：可选参数，表示小数点后保留的位数</li><li>格式化字符：用于指定字符的类型</li><li>exp：要转换的项。如果要制定的项有多个，需要通过元组的形式进行指定，但是不能使用列表。</li></ul></li><li><p>使用字符出对象的 fornat() 方法</p><p>​    字符串对象提供了 format() 方法用于进行字符串格式化。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.<span class="built_in">format</span>(args)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>str：用于指定字符串的显示样式（即模板）</li></ul><p>下面重点介绍如何创建模板。在创建模板时，需要使用大括号和冒号指定占位符。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [index] [ : [ [fill] align] [sign] [<span class="comment">#] [width] [.precision] [type] ] &#125;</span></span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li><p>index：可选参数，用于指定要设置格式对象在参数列表中的索引位置，索引值从 0 开始，默认根据值得先后顺序自动分配</p></li><li><p>fill：可选参数，用于指定空白处填充得字符</p></li><li><p>align：可选参数，用于指定对齐方式，需要配合 width 一起使用</p><ul><li>&lt;：表示内容左对齐</li><li>&gt; ：表示内容右对齐</li><li>=：表示内容右对齐，将符号放在填充内容的最左侧，且只对数字类型有效</li><li>^：表示内容居中</li></ul></li><li><p>sign：可选参数，用于指定有无符号数</p><ul><li>+：表示正数加正号，负数加负号</li><li>-：表示正数不变，负数加负号</li><li>空格：表示正数加空格，负数加负号</li></ul></li><li><p>#：可选参数，对于二进制、八进制和十六进制，如果加上 # ，表示会显示 0b 0o 0x 前缀，否则不显示前缀</p></li><li><p>width：可选参数，用于指定所占宽度</p></li><li><p>.precision：可选参数，用于指定保留得小数位数</p></li><li><p>type：可选参数，用于指定类型</p></li></ul></li></ol><table><thead><tr><th style="text-align:center">格式字符</th><th style="text-align:center">说明</th><th style="text-align:center">格式字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td><td style="text-align:center">%r</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">单个字符</td><td style="text-align:center">%o</td><td style="text-align:center">八进制整数</td></tr><tr><td style="text-align:center">%d 或者%i</td><td style="text-align:center">十进制整数</td><td style="text-align:center">%e</td><td style="text-align:center">指数（基底写为 e）</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数</td><td style="text-align:center">%E</td><td style="text-align:center">指数（基底写为 E）</td></tr><tr><td style="text-align:center">%f 或者%F</td><td style="text-align:center">浮点数</td><td style="text-align:center">%%</td><td style="text-align:center">字符%</td></tr></tbody></table><table><thead><tr><th style="text-align:center">格式化字符</th><th style="text-align:center">说明</th><th style="text-align:center">格式化字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">S</td><td style="text-align:center">对字符串类型进行格式化</td><td style="text-align:center">b</td><td style="text-align:center">将十进制整数自动转换成二进制，再格式化</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">十进制整数</td><td style="text-align:center">0</td><td style="text-align:center">将十进制整数自动转换成八进制，再格式化</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">将十进制整数自动转换成对应的 Unicode 字符</td><td style="text-align:center">x 或者 X</td><td style="text-align:center">将十进制整数自动转换成十六进制，再格式化</td></tr><tr><td style="text-align:center">e 或者 E</td><td style="text-align:center">转换为科学计数法表示，再格式化</td><td style="text-align:center">f 或者 F</td><td style="text-align:center">转换为浮点数（默认小数点后保留 6 位），再格式化</td></tr><tr><td style="text-align:center">g 或者 G</td><td style="text-align:center">自动在科学计数法和浮点数中切换</td><td style="text-align:center">%</td><td style="text-align:center">显示百分比（默认显示小数点后 6 位）</td></tr></tbody></table><h1 id="第七章-正则表达式"><a class="header-anchor" href="#第七章-正则表达式">¶</a>第七章 正则表达式</h1><h2 id="7-1-正则表达式语法"><a class="header-anchor" href="#7-1-正则表达式语法">¶</a>7.1 正则表达式语法</h2><p>在处理字符串时，经常会有查找符合某些复杂规则的字符串的需求。正则表达式就是用于描述这些规则的工具。</p><h3 id="7-1-1-行定位符"><a class="header-anchor" href="#7-1-1-行定位符">¶</a>7.1.1 行定位符</h3><p>行定位符就是用来描述字符串的边界。“^”表示行的开始；“$”表示行的结尾。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^tm     <span class="comment">#从字符串的开头匹配tm</span></span><br><span class="line">tm$     <span class="comment">#从字符串的结尾匹配tm</span></span><br><span class="line">tm      <span class="comment">#从字符串的内部匹配tm</span></span><br></pre></td></tr></table></figure><h3 id="7-1-2-元字符"><a class="header-anchor" href="#7-1-2-元字符">¶</a>7.1.2 元字符</h3><p>常用的元字符：</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意的空白符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配单词的开始或结束</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串的结束</td></tr></tbody></table><h3 id="7-1-3-重复"><a class="header-anchor" href="#7-1-3-重复">¶</a>7.1.3 重复</h3><p>使用“\w*”匹配任意数量的字母或数字。如果想匹配特定数量的字符，正则表达式为我们提供了限定符（指定数量的字符）来实现该功能。</p><p>常用的限定符如下表所示：</p><table><thead><tr><th style="text-align:center">限定符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">？</td><td style="text-align:center">匹配前面的字符零次或一次</td><td style="text-align:center">colou?r，该表达式可以匹配 colour 和 color</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的字符一次或多次</td><td style="text-align:center">go+gle，该表达式可以匹配 gogle 到 go…gle</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的字符零次或多次</td><td style="text-align:center">go*gle，该表达式可以匹配 ggle 到 go…gle</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">匹配前面的字符 n 次</td><td style="text-align:center">go{2}gle，该表达式只匹配 google</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">匹配前面的字符最少 n 次</td><td style="text-align:center">go{2,}，该表达式可以匹配 google 到 goo…gle</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配前面的字符最少 n 次，最多 m 次</td><td style="text-align:center"></td></tr></tbody></table><h3 id="7-1-4-字符类"><a class="header-anchor" href="#7-1-4-字符类">¶</a>7.1.4 字符类</h3><p>正则表达式查找数字和字母是很简单的，因为已经有了对应这些字符集合的元字符（如：\d、\w），但是如果想要匹配没有预定义的元字符集合（比如：假名），应该怎么办？</p><p>很简单，只需要在方括号“[ ]”里列出它们就行。也可以指定一个字符范围，例如：[0-9a-zA-Z]，也完全等同于 \w （只考虑英文）</p><blockquote><p><strong>想要匹配给定字符串中的任意一个汉字，可以使用[\u4e00-\u9fa5]</strong></p></blockquote><h3 id="7-1-5-排除字符"><a class="header-anchor" href="#7-1-5-排除字符">¶</a>7.1.5 排除字符</h3><p>前面几节列出的是匹配符合指定字符集合的字符串。现在反过来，匹配不符合指定字符串集合的字符串。正则表达式提供了 “^” 字符。这里放到中括号中，表示排除的意思。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^a-zA-Z]</span><br></pre></td></tr></table></figure><p>该表达式用于匹配一个不是字母的字符。</p><h3 id="7-1-6-选择字符"><a class="header-anchor" href="#7-1-6-选择字符">¶</a>7.1.6 选择字符</h3><p>如何匹配身份证号码呢？身份证号码长度位 15 位或者 18 位。如果位 15 位，则全是数字；如果是 18 位，前 17 位位数字，最后一位是校验位，可能为数字或字符 X 。</p><p>在上面的描述中，包含者条件选逻辑，这就需要使用选择字符（“|”）来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ^ \d&#123;<span class="number">15</span>&#125; $ ) | ( ^ \d&#123;<span class="number">18</span>&#125; $ ) | ( (^ \d&#123;<span class="number">17</span>&#125; ) ( \d | X | x) $)</span><br></pre></td></tr></table></figure><h3 id="7-1-7-转义字符"><a class="header-anchor" href="#7-1-7-转义字符">¶</a>7.1.7 转义字符</h3><p>正则表达式中的转义字符与 Python 中的大同小异，都是将特殊字符变为普通字符。</p><h3 id="7-1-8-分组"><a class="header-anchor" href="#7-1-8-分组">¶</a>7.1.8 分组</h3><p>小括号字符的第一个作用就是可以改变限定符的作用范围。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( thir | four ) th</span><br></pre></td></tr></table></figure><p>小括号的第二个作用就是分组，也就是子表达式。</p><h3 id="7-1-9-在-python-中使用正则表达式语法"><a class="header-anchor" href="#7-1-9-在-python-中使用正则表达式语法">¶</a>7.1.9 在 Python 中使用正则表达式语法</h3><p>在 Python 中使用正则表达式时，是将其作为模式字符串使用的。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[^0-9a-z]&quot;</span></span><br><span class="line"><span class="string">&quot;\\bm\\w*\\b&quot;</span></span><br></pre></td></tr></table></figure><p>由于模式字符串可能包括大量的特殊字符和反斜杠，所以需要写为原生字符串，即在模式字符串前加 r 或 R 。例如，上面的模式字符串采用原生字符串表示就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&quot;\bm\w*\b&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-2-使用-re-模块实现正则表达式操作"><a class="header-anchor" href="#7-2-使用-re-模块实现正则表达式操作">¶</a>7.2 使用 re 模块实现正则表达式操作</h2><p>本章节将介绍如何在 Python 中使用正则表达式。</p><p>re 模块在使用时，需要应先导入 import 语句引入，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="7-2-1-匹配字符串"><a class="header-anchor" href="#7-2-1-匹配字符串">¶</a>7.2.1 匹配字符串</h3><p>匹配字符串可以使用 re 模块的 match() 、 search() 和 findall() 方法。</p><ol><li>使用 <code>match()</code> 方法进行匹配</li></ol><p>match() 方法用于从字符串的开始处进行匹配，如果在起始位置匹配成功，则返回 Match 对象，否则返回 None 。其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.<span class="keyword">match</span>(pattern,string [,flags])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li><p>pattern：表示模式字符串，由要匹配的正则表达式转换而来</p></li><li><p>string：表示要匹配的字符串</p></li><li><p>flags：可选参数，表示标志位，用于控制匹配方式，如：是否区分大小写等。</p></li></ul><ol start="2"><li>使用 search() 方法进行匹配</li></ol><p>search() 方法用于在整个字符串中搜索第一个匹配的值，如果在起始位置匹配成功，则返回 Match 对象，否则返回 None 。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.search(pattern,string [,flags])</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 findall() 方法进行匹配</li></ol><p>findall() 方法用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表的形式返回。如果匹配成功，则返回包含匹配结果的列表，否则返回空列表。其语法格式如下;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern,string [,flags])</span><br></pre></td></tr></table></figure><p>常用的标志如下表所示：</p><table><thead><tr><th style="text-align:center">标志位</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">A 或 ASCII</td><td style="text-align:center">对于\w \W \b \B \d \D \s \S 只进行 ASCII 匹配（仅适用于 Python3）</td></tr><tr><td style="text-align:center">I 或者 IGNORECASE</td><td style="text-align:center">执行不区分字母大小写的匹配</td></tr><tr><td style="text-align:center">M 或者 MULTILING</td><td style="text-align:center">将^和$用于包括整个字符串的开始和结尾的每一行</td></tr><tr><td style="text-align:center">S 或者 DOTALL</td><td style="text-align:center">使用“.”字符匹配所有字符，包括换行符</td></tr><tr><td style="text-align:center">X 或者 VERBOSE</td><td style="text-align:center">忽略模式字符串中未转义的空格和注释</td></tr></tbody></table><h3 id="7-2-2-替换字符串"><a class="header-anchor" href="#7-2-2-替换字符串">¶</a>7.2.2 替换字符串</h3><p>sub() 方法用于实现字符串的替换。其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern,repl,string,count,flags)</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>repl：表示要替换的字符串</li><li>string：表示要被查找替换的原始字符串</li><li>count：可选参数，表示模式匹配后替换的最大次数，默认值为 0 ，表示替换所有的匹配</li><li>flags：可选参数，表示标志位，用于控制匹配方式，如：是否区分大小写等</li></ul><h3 id="7-2-3-使用正则表达式分割字符串"><a class="header-anchor" href="#7-2-3-使用正则表达式分割字符串">¶</a>7.2.3 使用正则表达式分割字符串</h3><p>split() 方法用于实现根据正则表达式分割字符串，并以列表对的形式返回。其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern,string [,maxsplit] [,flags])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>string：表示要被怕匹配的字符串</li><li>maxsplit：可选参数，表示最大的拆分次数</li><li>flags：可选参数，表示标志位，用于控制匹配方式，如：是否区分大小写等</li></ul><h1 id="第八章-函数"><a class="header-anchor" href="#第八章-函数">¶</a>第八章 函数</h1><h2 id="8-1-函数的创建和调用"><a class="header-anchor" href="#8-1-函数的创建和调用">¶</a>8.1 函数的创建和调用</h2><h3 id="8-1-1-创建一个函数"><a class="header-anchor" href="#8-1-1-创建一个函数">¶</a>8.1.1 创建一个函数</h3><p>创建函数也被称为定义函数。使用 def 关键字实现。具体语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[parameterlist]</span>):</span><br><span class="line">    [<span class="string">&quot;&quot;&quot;comments&quot;&quot;&quot;</span>]</span><br><span class="line">    [functionbody]</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>functionname：函数名称，在调用函数时使用</li><li>parameterlist：可选参数，用于指定向函数中传递的参数。参数之间用逗号分隔</li><li>“”“comments”&quot;&quot;：可选参数，表示为函数指定的注释</li><li>functionbody：可选参数，用于指定函数体，即该函数被被调用之后，要执行的功能代码。</li></ul><blockquote><p>如果想定义一个什么也不做的空函数，可以使用 pass 语句作为占位符</p></blockquote><h3 id="8-1-2-调用函数"><a class="header-anchor" href="#8-1-2-调用函数">¶</a>8.1.2 调用函数</h3><p>调用函数也就是执行函数。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functionname([parametersvalue])</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>functionname：函数名称，要调用的函数名称必须是已经创建好的</li><li>parametersvalue：可选参数，用于指定各个参数的值。参数之间用逗号隔开</li></ul><h2 id="8-2-参数传毒"><a class="header-anchor" href="#8-2-参数传毒">¶</a>8.2 参数传毒</h2><h3 id="8-2-1-形式参数和实际参数"><a class="header-anchor" href="#8-2-1-形式参数和实际参数">¶</a>8.2.1 形式参数和实际参数</h3><p>在使用函数时，经常会用到形式参数和实际参数。下面从两个角度了解这两种参数。</p><ol><li>通过作用理解<ul><li>形式参数：在定义函数时，函数名后面括号中的参数为<strong>形式参数</strong></li><li>实际参数：在调用一个函数时，函数名后面的括号中的参数为<strong>实际参数</strong></li></ul></li></ol><h3 id="8-2-2-位置参数"><a class="header-anchor" href="#8-2-2-位置参数">¶</a>8.2.2 位置参数</h3><p>位置参数也称必备参数，是必须按照正确的顺序传到函数中，即调用时的数量和位置必须和定义时是一样的。</p><ol><li><p>数量必须与定义时一致</p><p>​    在调用函数时，指定的实际参数的数量必须与形式参数的数量一致，否则将会抛出 TypError 异常，提示缺少必要的位置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nothing</span>(<span class="params"> a, b, c, d </span>) :</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>​    上面代码运行的结果为：</p></li><li><p>位置必须与定义时一致</p><p>​    在调用函数时，指定的实际参数的位置必须与形式参数的位置一致，否则将产生以下两种结果。</p><ul><li><p>抛出 TypError 异常</p><p>​    实际参数的类型与形式参数的类型不符，并且在函数中，这两种类型不能正常转换。</p></li><li><p>产生的结果与预期不符</p></li></ul></li></ol><h3 id="8-2-3-关键字参数"><a class="header-anchor" href="#8-2-3-关键字参数">¶</a>8.2.3 关键字参数</h3><p>关键字参数是指使用形式参数的名字来确定输入的参数值。通过这种方式指定实际参数时，不再需要与形式参数的位置完全一致，只需要将参数名写正确即可。</p><p>例如，下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nothing</span>(<span class="params"> a, b, c, d </span>) :</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nothing( a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">3</span> )</span><br></pre></td></tr></table></figure><h3 id="8-2-4-为参数设置默认值"><a class="header-anchor" href="#8-2-4-为参数设置默认值">¶</a>8.2.4 为参数设置默认值</h3><p>调用函数时，如果没有指定某个参数将抛出异常，为了解决这个问题，我们可以为参数设置默认值，即<strong>在定义函数时，直接指定形式参数的默认值</strong>。这样，当没有传入参数时，直接使用定义函数时设置的默认值。</p><p>定义带有默认值参数的函数的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params"> ... [parameter <span class="number">1</span> = value <span class="number">1</span> , .... ] </span>):</span><br><span class="line">    [functionbody]</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>functionname：函数名称</li><li>parameter 1 = value 1：可选参数，用于指定向函数中传递的参数，并且为该参数设置默认值为 value 1</li><li>functionbody：可选参数，用于指定函数体</li></ul><blockquote><p>在定义函数时，指定的默认的形式参数必须在所有参数的后面，否则将会产生语法错误</p></blockquote><h3 id="8-2-5-可变参数"><a class="header-anchor" href="#8-2-5-可变参数">¶</a>8.2.5 可变参数</h3><p>在 Python 中，还可以定义可变参数。可变参数也称为不定长参数，即传入函数的实际参数可以是 0 个、1 个 到任意个。</p><ol><li><p>*parameter</p><p>这种形式表示接收任意多个实际参数并将其放到一个元组中。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yuanshen</span>(<span class="params"> *name </span>) :</span><br><span class="line">    string = <span class="string">&quot;原神有：&#123;&#125; 角色&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> name :</span><br><span class="line">        <span class="built_in">print</span>( string.<span class="built_in">format</span>( item ), end=<span class="string">&quot;     &quot;</span> )</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;&quot;</span> )</span><br><span class="line">    yuanshen( <span class="string">&quot;胡桃&quot;</span> )</span><br><span class="line">    yuanshen( <span class="string">&quot;胡桃&quot;</span>, <span class="string">&quot;雷电将军&quot;</span>, <span class="string">&quot;八重神子&quot;</span> )</span><br></pre></td></tr></table></figure></li><li><p>parameter</p><p>这种形式表示接收任意多个类似关键字参数一样的显式赋值的实际参数，并将其放到一个字典中。</p></li></ol><h2 id="8-3-返回值"><a class="header-anchor" href="#8-3-返回值">¶</a>8.3 返回值</h2><p>在 Python 中，可以在函数体内使用 return 语句为函数指定返回返回值，该返回值可以是任意类型，并且无论 return 语句出现在函数的什么位置，只要得到执行，会直接结束当前执行的函数。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [value]</span><br></pre></td></tr></table></figure><h2 id="8-4-变量的作用域"><a class="header-anchor" href="#8-4-变量的作用域">¶</a>8.4 变量的作用域</h2><p>变量的作用域是指程序代码能够访问该变量的区域，如果超出该区域，在访问时就会出现错误。在程序中，一般会根据变量的有效作用范围，将变量分为<strong>局部变量</strong>和<strong>全局变量</strong>。</p><h3 id="8-4-1-局部变量"><a class="header-anchor" href="#8-4-1-局部变量">¶</a>8.4.1 局部变量</h3><p>局部变量是指在函数内部定义并使用的变量，它只在函数内部有效。</p><h3 id="8-4-2-全局变量"><a class="header-anchor" href="#8-4-2-全局变量">¶</a>8.4.2 全局变量</h3><p>与局部变量对应，全局变量能够作用于函数内外的变量。</p><h2 id="8-5-匿名函数"><a class="header-anchor" href="#8-5-匿名函数">¶</a>8.5 匿名函数</h2><p>匿名函数（lambda）是指没有名字的函数，应用在需要一个函数但又不想费神去命名这个函数的场合。通常情况下，这种函数只会使用一次。其语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="keyword">lambda</span> [arg1] : expression</span><br></pre></td></tr></table></figure><h1 id="第九章-面向对象程序设计"><a class="header-anchor" href="#第九章-面向对象程序设计">¶</a>第九章 面向对象程序设计</h1><h2 id="9-1-面向对象概述"><a class="header-anchor" href="#9-1-面向对象概述">¶</a>9.1 面向对象概述</h2><p>面向对象（Object Oriented）的英文缩写是 OO，它是一种设计思想。从 20 世纪 60 年代提出面向对象的概念到现在，他已经发展成为一种比较成熟的编程思想，并且逐步成为目前软件开发领域的主流技术。</p><p>面向对象中的对象，通常是指客观世界中存在的对象，这个对象具有唯一性，对象之间各不相同，各有各的特点，每个对象都有自己的运动规律和内部状态；对象之间又是可以 i 相互联系、互相作用的。另外，对象也可以是一个抽象的事物。例如，可以从圆形、正方形、三角形等图形抽象出一个简单图形，简单图形就是一个对象，它有自己的属性和行为。</p><h3 id="9-1-1-对象"><a class="header-anchor" href="#9-1-1-对象">¶</a>9.1.1 对象</h3><p>对象，表示任意存在的食物。<strong>世间万物皆对象</strong>。</p><p>通常将对象划分为两个部分，即<strong>静态部分</strong>与<strong>动态部分</strong>。静态部分被称为“属性”，任何对象都具备自身的属性，如：人的性别；动态部分只对象的行为，即对象执行的动作，如：人可以行走。</p><h3 id="9-1-2-类"><a class="header-anchor" href="#9-1-2-类">¶</a>9.1.2 类</h3><p>类是封装对象的属性和行为的载体，反过来说，具有统一属性的行为的一类实体被称为类。</p><h3 id="9-1-3-面向对象程序设计的特点"><a class="header-anchor" href="#9-1-3-面向对象程序设计的特点">¶</a>9.1.3 面向对象程序设计的特点</h3><p>面向对象程序设计具有三大基本特征：<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。</p><ol><li><p>封装</p><p>​    封装是面向对象编程的核心思想，将对象的属性和行为封装起来，而将对象的属性和行为封装起来的载体就是类。类通常对客户隐藏其实现细节，这就是封装的思想，简单来说，用户访问类的成员时，加以一定的访问限制。</p><p>​    采用封装思想，保证了类内部数据结构的完整性，使用该类的用户不能直接看到类中的数据结构，而只能执行类允许公开的数据，这样就避免了外部对内部数据的影响，提高了程序的可维护性。</p></li><li><p>继承</p><p>​    继承是实现重复利用的重要手段，子类通过继承父类的属性和行为的同时，又添加了子类特有的属性和行为。</p></li><li><p>多态</p><p>​    将父类对象应用于子类的特征就是多态。</p></li></ol><h2 id="9-2-类的定义和使用"><a class="header-anchor" href="#9-2-类的定义和使用">¶</a>9.2 类的定义和使用</h2><h3 id="9-2-1-定义类"><a class="header-anchor" href="#9-2-1-定义类">¶</a>9.2.1 定义类</h3><p>在 Python 中，类的定义使用 class 关键字来实现，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>(<span class="title class_ inherited__">BaseClass</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;类的说明信息&quot;&quot;&quot;</span></span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>ClassName：用于指定类名，一般采用 Pascal 命名法</li><li>BaseClass：继承的父类的类名，如果没有继承可不写（同时可以省略括号）</li><li>“”“类的说明信息”&quot;&quot;：用于指定类的文档字符串，定义该字符串后，在创建类时，输入类名和括号，将会显示该信息</li><li>statement：类体，包含该类的所有成员</li></ul><h3 id="9-2-2-创建类的实例"><a class="header-anchor" href="#9-2-2-创建类的实例">¶</a>9.2.2 创建类的实例</h3><p>定义完类后，并不会真正创建一个实例。创建类的实例的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassName(parameterlist)</span><br></pre></td></tr></table></figure><h3 id="9-2-3-创建-init-方法"><a class="header-anchor" href="#9-2-3-创建-init-方法">¶</a>9.2.3 创建__init__() 方法</h3><p>在创建类后，通常会创建一个 __init__() 方法。该方法是一个特殊的方法，类似 Java 或 C# 的构造函数。每当创建一个类的实例化时， Python 都会自动执行它。__init__() 必须包含一个 self 参数，并且必须是第一个参数。self 参数是一个指向实例本身的引用，用于访问类中的属性和方法。在方法调用时，会自动传递实际参数 self 。因此，当__init__() 方法只有一个参数是，在创建类的实例时，就不需要指定实际参数了。</p><blockquote><p>__init__() 方法的名称中，开头结尾是<strong>双下划线</strong>，这是一种约定。</p></blockquote><h3 id="9-2-4-创建类的成员并访问"><a class="header-anchor" href="#9-2-4-创建类的成员并访问">¶</a>9.2.4 创建类的成员并访问</h3><p>在 Python 中，类的成员有三种：类属性、实例属性、实例方法。</p><ol><li><p>创建实例方法并访问</p><p>​    所谓实例方法，是在类中定义的函数。实例方法的第一个参数必须是 self ，并且必须包含一个 self 参数。创建实例方法的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">self,parameterlist</span>):</span><br><span class="line">    block</span><br></pre></td></tr></table></figure><p>​    参数说明如下：</p><ul><li><p>functionname：用于指定方法名，一般使用小写字母开头</p></li><li><p>self：必要参数，表示类的实例，其名称可以是 self 以外的单词，使用 self 只是一个习惯而已</p></li><li><p>parameterlist：用于指定除 self 参数以外的参数</p></li><li><p>block：方法体，实现的具体功能</p><p>实例方法创建完成后，可以通过类的实例名和（ . ）操作符进行访问。</p></li></ul></li><li><p>创建数据成员并访问</p><ul><li><p>类属性</p><p>​     类属性是指定义在类中，并且在类方法之外的属性。类属性可以在类的所有实例之间共享值，也就是在所有实例化的对象中公用。</p><p>类属性可以通过类名加 “ . ” 进行访问，也可以用实例名加 “ . ” 进行访问</p></li><li><p>实例属性</p><p>​     实例属性是指定义在类的方法中的属性，只作用于当前实例。对于实例属性，可以通过实例名称修改，但是并不会影响到另一个实例中的相应的实例属性。</p></li></ul></li><li><p>💰 类属性和实例属性的区别</p><ol><li>在内存上，每个实例对象都会在内存中开辟一块空间，用于存储自身的实例属性，因此，实例属性之间不会相互影响；</li><li>类属性只会开辟一份内存空间，所有实例对象的类属性共用一块内存，因此，在实例 A 中修改类属性，会导致实例 B ….等所有当前存在的实例对象的类属性发生变化</li></ol></li></ol><h3 id="9-2-5-self-参数的详细解读"><a class="header-anchor" href="#9-2-5-self-参数的详细解读">¶</a>9.2.5 self 参数的详细解读</h3><p>self 有两个基本作用：</p><ul><li>区别类属性和实例属性（类属性没有 self），同时区分传入类的参数与实例属性</li><li>占位符，表示对当前操作对象的引用</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> :</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, a, b </span>) :</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">zhangsan = Person( <span class="number">1</span>, <span class="number">2</span> )</span><br><span class="line">lisi = Person(<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>( Person.a )</span><br><span class="line"><span class="built_in">print</span>( zhangsan.a )</span><br><span class="line"><span class="built_in">print</span>( zhangsan.b )</span><br></pre></td></tr></table></figure><ol><li><p>首先，传入类的构造方法的参数 a、b，为了区分实例属性 a 和 b</p></li><li><p>当创建 zhangsan 时，self 将代表着 zhangsan，类中的所有 self 均可以被替换为 zhangsan（前提是当前操作的是 zhangsan 这个实例对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#伪代码</span></span><br><span class="line">zhangsan = Person(a = <span class="number">1</span>,b = <span class="number">2</span>):</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> zhangsan, a, b </span>) :</span><br><span class="line">        zhangsan.a = a</span><br><span class="line">        zhangsan.b = b</span><br></pre></td></tr></table></figure><p>​     当创建 list 时，就是把 self 替换成 list 由此可见，self 代表着对当前对象的引用。</p></li></ol><h3 id="9-2-6-访问限制"><a class="header-anchor" href="#9-2-6-访问限制">¶</a>9.2.6 访问限制</h3><p>在类的内部可以定义属性和方法，而在类的外部则可以直接调用属性或方法来操作数据，从而隐藏了类内部的复杂逻辑。但是，Python 并没有对属性和方法的访问权限进行限制。为了保护类内部的某些属性或方法不被外部访问，可以在属性或方法名前添加单下划线、双下划线或者首尾加双下划线，从而限制访问权限。</p><ul><li>_foo：以单下划线开头的表示 保护（protected）类型的成员，只允许该类本身和子类进行访问，但是不能使用 “ from module import * ” 语句导入</li><li>__foo：以双下划线开头的表示 private（私有）类型的成员，只允许定义该方法的类本身进行访问，而且也不能通过类的实例进行访问，但是可以通过 “ 类的实例名.类名.__xxx ” 进行访问</li><li>__foo__：首尾双下划线表示特殊定义方法，一般是系统定义名字，如：__init__</li></ul><h2 id="9-3-属性"><a class="header-anchor" href="#9-3-属性">¶</a>9.3 属性</h2><p>本章节介绍的属性与前面的类属性和实例属性不同。本章节要介绍的属性是一种特殊的属性，访问它时将计算它的值。</p><h3 id="9-3-1-创建用于计算的属性"><a class="header-anchor" href="#9-3-1-创建用于计算的属性">¶</a>9.3.1 创建用于计算的属性</h3><p>在 Python 中，可以通过 @property（修饰器）将一个方法转换为属性，从而实现用于计算的属性。将方法转换为属性后，可直接通过方法名来访问方法，而不需要在添加一对小括号，这样可以让代码更加简洁。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">methodname</span>(<span class="params">self</span>):</span><br><span class="line">        block</span><br><span class="line"></span><br><span class="line">tmp = ClassName()</span><br><span class="line"><span class="built_in">print</span>(tmp.methodname)</span><br></pre></td></tr></table></figure><h3 id="9-3-2-为属性添加安全保护机制"><a class="header-anchor" href="#9-3-2-为属性添加安全保护机制">¶</a>9.3.2 为属性添加安全保护机制</h3><p>在 Python 中，默认情况下，创建的类属性或者实例属性可以在类体外进行修改，如果想要限制其不能在类体外修改，可以将其设置为私有，但是设置为私有后，在类体外也不能获取它的值。如果想要创建一个可以读取，但是不能修改的属性，那么可以使用 @property（修饰器）实现只读属性。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YuanShen</span> :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self </span>) :</span><br><span class="line">        self.__company = <span class="string">&quot;米哈游&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">company</span>(<span class="params"> self </span>) :</span><br><span class="line">        <span class="keyword">return</span> self.__company</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">game = YuanShen()</span><br><span class="line"><span class="built_in">print</span>( game.company )</span><br></pre></td></tr></table></figure><h2 id="9-4-继承"><a class="header-anchor" href="#9-4-继承">¶</a>9.4 继承</h2><p>在编写类时，并不是每次都要从空白开始。当要编写的类和另一个已经存在的类之间存在一定的继承关系，就可以通过继承来达到代码重用的目的，提高开发效率。</p><h3 id="9-4-1-继承的基本语法"><a class="header-anchor" href="#9-4-1-继承的基本语法">¶</a>9.4.1 继承的基本语法</h3><p>继承是面向对象编程最重要的特性之一。</p><p>具体语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>(<span class="title class_ inherited__">baseclasslist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;类的帮助信息&quot;&quot;&quot;</span></span><br><span class="line">    Statement</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>baseclasslist：用于指定继承的父类，可以有多个。如果不指定，将使用所有 Python 对象的根类 Object 。</li></ul><h3 id="9-4-2-方法重写"><a class="header-anchor" href="#9-4-2-方法重写">¶</a>9.4.2 方法重写</h3><p>父类的成员都会被子类继承（除了私有成员），当父类中的某个方法不完全适用于子类时，就需要在子类中重新定义这个方法，这和 Java 语言中的方法重写是一样的。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> :</span><br><span class="line">    color = <span class="string">&quot;绿色&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">harvest</span>(<span class="params"> self, color </span>) :</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;水果的颜色是：&quot;</span>, color, <span class="string">&quot;的！&quot;</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>( <span class="title class_ inherited__">Fruit</span> ) :</span><br><span class="line">    color = <span class="string">&quot;红色&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">harvest</span>(<span class="params"> self, color </span>) :</span><br><span class="line">        <span class="built_in">print</span>( color, <span class="string">&quot;是水果的颜色&quot;</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apple = Apple()</span><br><span class="line">apple.harvest( <span class="string">&quot;白色&quot;</span> )</span><br></pre></td></tr></table></figure><h3 id="9-4-3-子类调用父类的-init-方法"><a class="header-anchor" href="#9-4-3-子类调用父类的-init-方法">¶</a>9.4.3 子类调用父类的__init__() 方法</h3><p>在子类中定义__init__() 方法时，不会自动调用父类的__init__() 方法。因此，要让子类调用父类的__init__() 方法进行必要的初始化，需要在子类的__init__() 方法里面使用 super() 函数调用父类的__init__() 方法。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> :</span><br><span class="line">    color = <span class="string">&quot;绿色&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self </span>) :</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;我是父类&quot;</span> )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">harvest</span>(<span class="params"> self, color </span>) :</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;水果的颜色是：&quot;</span>, color, <span class="string">&quot;的！&quot;</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>( <span class="title class_ inherited__">Fruit</span> ) :</span><br><span class="line">    color = <span class="string">&quot;红色&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self </span>) :</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;我是子类&quot;</span> )</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">harvest</span>(<span class="params"> self, color </span>) :</span><br><span class="line">        <span class="built_in">print</span>( color, <span class="string">&quot;是水果的颜色&quot;</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apple = Apple()</span><br></pre></td></tr></table></figure><h1 id="第十章-模块"><a class="header-anchor" href="#第十章-模块">¶</a>第十章 模块</h1><h2 id="10-1-模块概述"><a class="header-anchor" href="#10-1-模块概述">¶</a>10.1 模块概述</h2><p>在 Python 中，一个扩展名为 .py 的文件就称为一个模块。通常情况下，我们把能够实现某一特定功能的代码放置在一个文件中作为一个模块，从而方便其他程序和脚本导入并使用。另外，使用模块也可以避免函数名和变量名冲突。</p><h2 id="10-2-自定义模块"><a class="header-anchor" href="#10-2-自定义模块">¶</a>10.2 自定义模块</h2><p>在 Python 中，自定义模块有两个作用，意识规范代码，让代码更易阅读，另一个是方便其他程序使用已经编写好的代码，提高开发效率。自定义模块的主要分为两部分，一部分是创建模块，另一部分是导入模块。</p><h3 id="10-2-1-创建模块"><a class="header-anchor" href="#10-2-1-创建模块">¶</a>10.2.1 创建模块</h3><p>创建模块可以将模块中的相关代码编写在一个单独的文件中，并且将该文件命名为“ <a href="http://xn--eqr79ejvx.py">模块名.py</a> ” 的形式。</p><blockquote><p>创建模块时，设置的模块名不能是 Python 自带的标准模块名称。模块文件的扩展名必须是 .py</p></blockquote><h3 id="10-2-2-导入模块"><a class="header-anchor" href="#10-2-2-导入模块">¶</a>10.2.2 导入模块</h3><p>创建模块后，就可以在其他程序中使用该模块。使用模块需要先以模块的形式加载模块中的代码，这可以使用 import 语句实现。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modulename [<span class="keyword">as</span> alias]</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>modulename：要导入的模块的名称</li><li>as alias：给模块起的别名，通过别名也可以使用模块</li></ul><p>使用 import 语句还可以一次性导入多个模块，在导入多个模块时，模块名之间用逗号隔开。</p><p>在使用 import 语句导入模块时，每执行一条 import 语句，都会创建一个新的命名空间（namespace），并且在该命名空间中执行与 .py 文件相关的所有语句。所以，在执行时，需要在具体的变量、函数和类名前加上 “模块名” 前缀。如果不想再每次导入模块时都创建一个新的命名空间，而是将具体的定义导入当前的命名空间中，这时可以使用 from…import 语句。具体语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modulename <span class="keyword">import</span> member</span><br><span class="line"><span class="keyword">from</span> modulename <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>modulename：要导入的模块名称</li><li>member：用于指定导入的变量、函数或类等</li><li>使用星号 ✳：表示导入模块里面的全部内容</li></ul><blockquote><p>使用 import 导入模块时，模块名是区分大小写的</p></blockquote><h3 id="10-2-3-模块搜索目录"><a class="header-anchor" href="#10-2-3-模块搜索目录">¶</a>10.2.3 模块搜索目录</h3><p>当使用 import 语句导入模块时，默认情况下，会按照以下顺序进行查找：</p><ol><li>当前执行的 Python 脚本所在目录</li><li>到 PYTHONPATH（环境变量）下的每个目录中查找</li><li>到 Python 的默认安装位置目录下查找</li></ol><p>以上各个目录的具体位置保存在标准模块 sys 的 sys.path 变量中。可以通过下面代码查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( sys.path )</span><br></pre></td></tr></table></figure><p>如果导入的模块不在 上述代码运行结果的目录 中，那么在导入模块是将会抛出异常。这时，我们可以通过以下 3 中方法添加指定的目录到 sys.path 中。</p><ol><li><p>临时添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;E:/xx/xx&quot;</span></span><br><span class="line">sys.path.append( path )</span><br></pre></td></tr></table></figure></li><li><p>增加 .pth 文件（🎆 推荐用法）</p><p>​    在 Python 安装目录下的 Lib\site-package 子目录中，创建一个扩展名为 .pth 的文件，文件名任意。在该文件中添加要导入的模块所在目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.pth 文件</span></span><br><span class="line">E:/xx/xx</span><br></pre></td></tr></table></figure><blockquote><p>创建 .pth 文件后，需要重新打开要执行导入模块的 Python 文件，否则新添加的目录不起作用。</p></blockquote></li><li><p>在 PYTHONPATH 环境变量中添加</p></li></ol><h2 id="10-3-python-中的包"><a class="header-anchor" href="#10-3-python-中的包">¶</a>10.3 Python 中的包</h2><p>使用模块可以避免函数名和变量名重名引发为错误。那么，模块名重复则么办呢？在 Python 中提出了包（package）的概念。包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下。这样，既可以起到规范代码的作用，又可以避免模块名重复引起的错误。</p><h3 id="10-3-1-python-程序的包的结构"><a class="header-anchor" href="#10-3-1-python-程序的包的结构">¶</a>10.3.1 Python 程序的包的结构</h3><h3 id="10-3-2-创建和使用包"><a class="header-anchor" href="#10-3-2-创建和使用包">¶</a>10.3.2 创建和使用包</h3><ol><li><p>创建包</p><p>​    创建包实际上就是创建一个文件夹，并且在该文件夹中创建一个名为“__init__.py” 的 Python 文件。在__init__.py 文件中，可以不编写任何代码，也可以编写一些 Python 代码。在__init__.py 文件中所编写的代码，在导入包时会自动执行。</p></li><li><p>使用包</p><ul><li>使用 “import + 完整包名 + 模块名”</li><li>使用 “from + 完整包名 import 模块名”</li><li>使用 “import + 完整包名 + 模块名 + import + 定义名”</li></ul></li></ol><h3 id="10-3-4-以主程序的形式执行"><a class="header-anchor" href="#10-3-4-以主程序的形式执行">¶</a>10.3.4 以主程序的形式执行</h3><p>在 Python 中，执行的脚本文件在导入模块时，会执行模块里面的代码，如果模块里面存在测试代码，如：<code>print()</code> 等，同样也会执行该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;米哈游&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是测试代码！&quot;</span>)</span><br></pre></td></tr></table></figure><p>这显然不是我们想看到的，我们希望导入的模块的函数不会自动执行，而是我们手动去调用。因此，在模块里面，添加下列代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;米哈游&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是测试代码！&quot;</span>)</span><br></pre></td></tr></table></figure><p>将模块里面的测试代码放入“if __name__ == “__main__”:” 里面。当模块里面的代码以主程序运行时，就会执行测试代码，而模块以库导入其他主程序时，就不会执行测试代码。</p><h2 id="10-4-引用其他模块"><a class="header-anchor" href="#10-4-引用其他模块">¶</a>10.4 引用其他模块</h2><p>在 Python 中，除了自定义的模块外，还可以引用其他模块，主要包括标准模块和第三方模块。</p><h3 id="10-4-1-导入和使用标准模块"><a class="header-anchor" href="#10-4-1-导入和使用标准模块">¶</a>10.4.1 导入和使用标准模块</h3><p>Python 中提供了 200 多个内置的标准模块，涵盖了 Python 运行时服务、文字模式匹配、操作系统接口、数学运算、对象永久保存、网络和 Internet 脚本和 GUI 构建等方面。可以在 Python 的<a href="https://docs.python.org/">帮助文档</a>查看。</p><h3 id="10-4-2-第三方模块的下载与安装"><a class="header-anchor" href="#10-4-2-第三方模块的下载与安装">¶</a>10.4.2 第三方模块的下载与安装</h3><p>在进行 Python 程序开发时，除了可以使用 Python 内置的标准模块，还有很多第三方模块可以让我们使用。对于这些第三方模块，可在 Python 的官网推出的<a href="https://pypi.org/">皮皮 ·Python 包索引)</a>中可以让我们找到。</p><ol><li><p>安装第三方模块</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install modulename</span><br></pre></td></tr></table></figure></li><li><p>卸载第三方模块</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall modulename</span><br></pre></td></tr></table></figure></li><li><p>查看已经安装的第三方模块</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></li></ol><h1 id="第十一章-异常处理"><a class="header-anchor" href="#第十一章-异常处理">¶</a>第十一章 异常处理</h1><h2 id="11-1-异常概述"><a class="header-anchor" href="#11-1-异常概述">¶</a>11.1 异常概述</h2><p>在程序运行过程中，经常会遇到各种错误，这些错误统称为异常。</p><table><thead><tr><th style="text-align:center">异常</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">NameError</td><td style="text-align:center">尝试访问一个没有声明变量引发的错误</td></tr><tr><td style="text-align:center">IndexError</td><td style="text-align:center">索引超出序列范围引发的错误</td></tr><tr><td style="text-align:center">IndentionError</td><td style="text-align:center">缩进错误</td></tr><tr><td style="text-align:center">ValueError</td><td style="text-align:center">传入的值错误</td></tr><tr><td style="text-align:center">KeyError</td><td style="text-align:center">请求一个不存在的字典关键字引发的错误</td></tr><tr><td style="text-align:center">IOError</td><td style="text-align:center">输入输出错误</td></tr><tr><td style="text-align:center">ImpotyError</td><td style="text-align:center">当 import 语句无法找到模块或 from 无法在模块中找到相应的名称时引发的错误</td></tr><tr><td style="text-align:center">AttributeError</td><td style="text-align:center">尝试访问未知的对象属性引发的错误</td></tr><tr><td style="text-align:center">TypeError</td><td style="text-align:center">类型不合适引发的错误</td></tr><tr><td style="text-align:center">MemoryError</td><td style="text-align:center">内存不足</td></tr><tr><td style="text-align:center">ZeroDivisionError</td><td style="text-align:center">除数为 0 引发的错误</td></tr></tbody></table><blockquote><p>上述所示的异常，了解即可。</p></blockquote><h2 id="11-2-异常处理语句"><a class="header-anchor" href="#11-2-异常处理语句">¶</a>11.2 异常处理语句</h2><h3 id="11-2-1-try-except-语句"><a class="header-anchor" href="#11-2-1-try-except-语句">¶</a>11.2.1 try…except 语句</h3><p>具体语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    block1</span><br><span class="line"><span class="keyword">except</span> [ExceptionName [<span class="keyword">as</span> alias]]:</span><br><span class="line">    block2</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>block1：表示可能出现的错误的代码块</li><li>ExceptionName [as alias]：可选参数，用于指定要捕获的异常</li><li>block2：表示进行异常处理的代码块</li></ul><blockquote><p>使用 try…except 语句捕获异常后，当程序出现错误时，程序会继续执行</p></blockquote><h3 id="11-2-2-try-except-else-语句"><a class="header-anchor" href="#11-2-2-try-except-else-语句">¶</a>11.2.2 try…except…else 语句</h3><p>与 try…except 不同的时，在 try 语句没有发生异常的时候，就会执行 else 中的代码</p><h3 id="11-2-3-try-except-finally-语句"><a class="header-anchor" href="#11-2-3-try-except-finally-语句">¶</a>11.2.3 try…except…finally 语句</h3><p>完整的异常处理应该包含 finally 代码块，通常情况下，无论程序中有无异常产生， finally 代码块中的代码总会执行。</p><h3 id="11-2-4-使用-raise-语句抛出异常"><a class="header-anchor" href="#11-2-4-使用-raise-语句抛出异常">¶</a>11.2.4 使用 raise 语句抛出异常</h3><p>如果某个函数或方法可能会产生异常，但不想在当前函数或方法中处理这个异常，则可以使用 raise 语句在函数或方法中抛出异常。raise 语句的基本格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raisl [ExceptionName[(reason)]]</span><br></pre></td></tr></table></figure><h2 id="11-3-程序调试"><a class="header-anchor" href="#11-3-程序调试">¶</a>11.3 程序调试</h2><h1 id="第十二章-文件及目录操作"><a class="header-anchor" href="#第十二章-文件及目录操作">¶</a>第十二章 文件及目录操作</h1><h2 id="12-1-基本文件操作"><a class="header-anchor" href="#12-1-基本文件操作">¶</a>12.1 基本文件操作</h2><p>在 Python 中，内置了文件（File）对象。在使用文件对象时，首先需要通过内置的 open() 方法创建一个文件对象，然后通过该对象提供的一些方法进行一些基本文件操作。</p><h3 id="12-1-1-创建和打开文件"><a class="header-anchor" href="#12-1-1-创建和打开文件">¶</a>12.1.1 创建和打开文件</h3><p>在 Python 中，想要操作文件需要首先创建或打开指定文件并创建文件对象，这样可以使用内置的 open() 方法实现。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(filename [, mode [, buffering]] )</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>file：被创建的文件对象</li><li>filename：要创建或打开的文件的名称，需要使用单引号或者双引号括起来。如果打开的文件和当前文件在同一目录下，直接使用文件名即可，否则需要制定完整的路径</li><li>mode：可选参数，用于指定文件的打开模式</li><li>buffering：可选参数，用于指定读写文件的缓冲模式，值为 0 表示不缓存；值为 1 表示缓存；如果大于 1 ，则表示缓冲区的大小。默认为缓存模式</li></ul><table><thead><tr><th style="text-align:center">打开模式</th><th style="text-align:left">说明</th><th style="text-align:center">注意</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:left">以只读模式打开文件。文件的指针将会放在文件的开头</td><td style="text-align:center">文件必须存在</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:left">以二进制格式打开文件，并且采用只读模式。文件的指针将会在文件的开头。一般用于非文本文件，如：图片、声音等</td><td style="text-align:center">文件必须存在</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:left">打开文件后，可以读取文件内容，也可以写入新的内容覆盖原有内容（从文件开头进行覆盖）</td><td style="text-align:center">文件必须存在</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:left">以二进制格式打开文件，并且采用读写模式。文件的指针将会在文件的开头。一般用于非文本文件，如：图片、声音等</td><td style="text-align:center">文件必须存在</td></tr><tr><td style="text-align:center">w</td><td style="text-align:left">以只写模式打开文件</td><td style="text-align:center">文件存在，则将其覆盖；反之，则创建新文件</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:left">以二进制格式打开文件，并且采用只写模式。文件的指针将会在文件的开头。一般用于非文本文件，如：图片、声音等</td><td style="text-align:center">文件存在，则将其覆盖；反之，则创建新文件</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:left">打开文件后，先清空原有内容，使其变为一个空文件，对这个空文件有读写权限</td><td style="text-align:center">文件存在，则将其覆盖；反之，则创建新文件</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:left">以二进制格式打开文件，并且采用读写模式。文件的指针将会在文件的开头。一般用于非文本文件，如：图片、声音等</td><td style="text-align:center">文件存在，则将其覆盖；反之，则创建新文件</td></tr><tr><td style="text-align:center">a</td><td style="text-align:left">以追加模式打开一个文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">ab</td><td style="text-align:left">以二进制模式打开一个文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">a+</td><td style="text-align:left">以读写模式打开一个文件。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:left">以二进制模式打开一个文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td style="text-align:center"></td></tr></tbody></table><h3 id="12-1-2-关闭文件"><a class="header-anchor" href="#12-1-2-关闭文件">¶</a>12.1.2 关闭文件</h3><p>打开文件后，需要及时关闭，以免对文件造成不必要的破坏。关闭文件可以使用 close() 方法实现。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>file：为打开的文件对象</li></ul><h3 id="12-1-3-打开文件时使用-with-语句"><a class="header-anchor" href="#12-1-3-打开文件时使用-with-语句">¶</a>12.1.3 打开文件时使用 with 语句</h3><p>打开文件后，要将其及时关闭，，如果忘记关闭，可能会出现意想不到的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expression <span class="keyword">as</span> target:</span><br><span class="line">    <span class="keyword">with</span> - body</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>expression：用于指定一个表达式</li><li>target：用以指定一个变量，并且将 expression 结果保存到该变量中</li><li>with - body：用于指定 with 语句体，其中可以是执行 with 语句后相关的一些操作语句。</li></ul><h3 id="12-1-4-写入文件"><a class="header-anchor" href="#12-1-4-写入文件">¶</a>12.1.4 写入文件</h3><p>前面我们学习了如何创建文件，但是该文件没有任何内容，它的大小是 0 KB。Python 的文件对象提供了 write() 方法，可以向该文件中写入内容。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.write(string)</span><br></pre></td></tr></table></figure><blockquote><p>在我们写入文件后，写入的内容会先保存在缓冲区，只有当调用了 flush() 或 close() 方法后，操作系统才会把缓冲区的内容写入磁盘。</p></blockquote><h3 id="12-1-5-读取文件"><a class="header-anchor" href="#12-1-5-读取文件">¶</a>12.1.5 读取文件</h3><ol><li><p>读取指定字符</p><p>​    文件对象提供了 read() 方法，读取指定个数的字符。语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.read([size])</span><br></pre></td></tr></table></figure><p>​    其中：</p><ul><li>file：为打开的文件对象</li><li>size：为可选参数，用于指定要读取的字符个数，默认省略为读取所有内容</li></ul><p>​    使用上述方法读取文件时，是从开头开始读取的。如果想要读取部分内容，可以先使用文件对象的 seek() 方法将文件指针移动到新位置，然后再用 read() 方法读取。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.seek( offset [, whence ] )</span><br></pre></td></tr></table></figure><p>​    参数说明如下;</p><ul><li>file：表示已经打开的文件</li><li>offset：用于指定移动的字符个数，其具体位置与 whence 有关</li><li>whence：可选参数，用于指定从什么位置开始计算。值为 0 表示从文件头部开始计算，1 表示从文件当前位置开始计算，2 表示从文件尾部开始计算，默认省略为 0</li></ul></li><li><p>读取一行</p><p>​    在使用 read() 方法读取文件时，如果文件很大，一次读取全部内容到内存，容易造成内存不足，所以通常会采用逐行读取。语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filereadline()</span><br></pre></td></tr></table></figure></li><li><p>读取全部行</p><p>​    读取全部行的作用与 read() 方法一样，只不过读取全部行时，返回的是一个字符串列表，每个元素为文件的一行内容。其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.readlines()</span><br></pre></td></tr></table></figure></li></ol><h2 id="12-2-目录操作"><a class="header-anchor" href="#12-2-目录操作">¶</a>12.2 目录操作</h2><h3 id="12-2-1-os-和-os-path-模块"><a class="header-anchor" href="#12-2-1-os-和-os-path-模块">¶</a>12.2.1 os 和 os.path 模块</h3><p>在 Python 中，内置了 os 模块以及其子模块 os.path 用于对目录或文件进行操作。在使用 os 模块或者 os.path 模块时，需要用 import 语句进行导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br></pre></td></tr></table></figure><p>os 模块常用的变量有：</p><ul><li>name：用于获取操作系统的类型<ul><li>输出为 nt ，则代表为 Windows 操作系统</li><li>输出为 posix ，则表示为 Linux</li></ul></li><li>linesep：用于获取当前操作系统上的换行符</li><li>sep：用于获取当前操作系统所使用的路径分隔符</li></ul><p>os 模块提供的一些操作目录的函数：</p><table><thead><tr><th style="text-align:center">函数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">getcwd()</td><td>返回当前的工作目录</td></tr><tr><td style="text-align:center">listdir(path)</td><td>返回指定路径下的文件和目录信息</td></tr><tr><td style="text-align:center">mkdir(path[,mode])</td><td>创建目录</td></tr><tr><td style="text-align:center">makedirs(path1/path2/path3…[,mode])</td><td>创建多级目录</td></tr><tr><td style="text-align:center">rmdir(path)</td><td>删除目录</td></tr><tr><td style="text-align:center">remove(path1/path2)</td><td>删除多级目录</td></tr><tr><td style="text-align:center">chdir(path)</td><td>把 path 设置为当前工作目录</td></tr><tr><td style="text-align:center">walk(top[,topdown[,onerror]])</td><td>遍历目录树，该方法返回一个元组，包括所有的路径、所有目录列表和文件列表三个元素</td></tr></tbody></table><p>os.path 模块提供一些操作目录的函数：</p><table><thead><tr><th style="text-align:center">函数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">abspath(path)</td><td>用于获取文件或目录的绝对路径</td></tr><tr><td style="text-align:center">exists(path)</td><td>用于判断目录或文件是否存在，如果存在则返回 Ture；反之，返回 False</td></tr><tr><td style="text-align:center">join(path,name)</td><td>将目录与目录或文件名拼接起来</td></tr><tr><td style="text-align:center">splitext()</td><td>分离文件名或扩展名</td></tr><tr><td style="text-align:center">basename(path)</td><td>从一个目录中提取文件名</td></tr><tr><td style="text-align:center">dirname(path)</td><td>从一个路径中提取文件，不包括文件名</td></tr><tr><td style="text-align:center">isdir(path)</td><td>用于判断是否为有效路径</td></tr></tbody></table><h3 id="12-2-2-路径"><a class="header-anchor" href="#12-2-2-路径">¶</a>12.2.2 路径</h3><ol><li><p>相对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd()) <span class="comment"># 输出当前目录</span></span><br></pre></td></tr></table></figure></li><li><p>绝对路径</p><p>获取某文件的绝对路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(path)</span><br></pre></td></tr></table></figure></li><li><p>拼接路径</p><p>如果想要将两个或者多个路径拼接在一起，组成一个新的路径，可以使用 <code>os.path</code> 模块的 <code>join()</code> 函数实现。具体语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.join(path1,path2,path3...)</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-2-3-判断目录是否存在"><a class="header-anchor" href="#12-2-3-判断目录是否存在">¶</a>12.2.3 判断目录是否存在</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.exists(path)</span><br></pre></td></tr></table></figure><h3 id="12-2-4-创建目录"><a class="header-anchor" href="#12-2-4-创建目录">¶</a>12.2.4 创建目录</h3><ol><li><p>创建一级目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(path,mode=<span class="number">0o777</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>path：用于指定要创建的目录，可以使用绝对路径或相对路径</li><li>mode：用于指定数值模式，默认为 0777。该参数在非 <code>UNIX</code> 系统上无效</li></ul></li><li><p>创建多级目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(name,mode=<span class="number">0o777</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name：用于指定要创建的目录，可以使用绝对路径或相对路径</li><li>mode：用于指定数值模式，默认为 0777。该参数在非 <code>UNIX</code> 系统上无效</li></ul></li></ol><h3 id="12-2-5-删除目录"><a class="header-anchor" href="#12-2-5-删除目录">¶</a>12.2.5 删除目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(path)</span><br></pre></td></tr></table></figure><h3 id="12-2-6-遍历目录"><a class="header-anchor" href="#12-2-6-遍历目录">¶</a>12.2.6 遍历目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.walk(top,topdown,oneerro,followlinks)</span><br></pre></td></tr></table></figure><h2 id="12-3-高级文件操作"><a class="header-anchor" href="#12-3-高级文件操作">¶</a>12.3 高级文件操作</h2><p>Python 内置的 os 模块除了可以对目录进行操作，还可以对文件进行一些高级操作，具体函数如下：</p><table><thead><tr><th style="text-align:center">函数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">access(path,accessmode)</td><td>获取对文件是否有指定的访问权限</td></tr><tr><td style="text-align:center">chmod(path,mode)</td><td>修改 path 指定文件的访问权限</td></tr><tr><td style="text-align:center">remove(path)</td><td>删除 path 指定的文件路径</td></tr><tr><td style="text-align:center">rename(src,dst)</td><td>将文件或目录 src 重命名为 dst</td></tr><tr><td style="text-align:center">stat(path)</td><td>返回 path 指定的文件信息</td></tr><tr><td style="text-align:center">startfile(path[,operation])</td><td>使用关联的应用程序打开 path 指定的文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 数据挖掘 </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> 自动化运维开发 </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
